#
# SPDX-FileCopyrightText: 2023, 2024, 2025 Emir SARI <emir_sari@icloud.com>
msgid ""
msgstr ""
"Project-Id-Version: documentation-develop-kde-org 1.0\n"
"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
"POT-Creation-Date: 2025-06-13 01:53+0000\n"
"PO-Revision-Date: 2025-02-27 19:20+0300\n"
"Last-Translator: Emir SARI <emir_sari@icloud.com>\n"
"Language-Team: Turkish <kde-l10n-tr@kde.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"SPDX-FileCopyrightText: FULL NAME <EMAIL@ADDRESS>\n"
"SPDX-License-Identifier: LGPL-3.0-or-later\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"X-Generator: Lokalize 25.03.70\n"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Getting started with Kirigami"
msgstr "Kirigami ile başlangıç"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Kirigami"
msgstr "Kirigami"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Setup"
msgstr "Ayarlama"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Introduction"
msgstr "Giriş"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Style"
msgstr "Biçem"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Components"
msgstr "Bileşenler"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Advanced"
msgstr "Gelişmiş"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Manipulating data"
msgstr "Veriyi manipüle etmek"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Kirigami Addons"
msgstr "Kirigami Eklentileri"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Learning to create your first applications using Kirigami\n"
msgstr "Kirigami ile ilk uygulamanızı nasıl oluşturacağınızı öğrenin\n"

#: content/docs/getting-started/kirigami/_index.md:28
msgid ""
"This tutorial will guide you through the process of creating your own "
"convergent application using the [Kirigami framework](/frameworks/kirigami). "
"A *convergent application*, in this context, means people can use the "
"program easily regardless of the device it is running on. If it is on a "
"desktop computer, it will adapt to a large screen and a mouse and keyboard; "
"if it is being used on a mobile device, it will accept input from a "
"touchscreen and adapt to a smaller portrait screen. And so on."
msgstr ""
"Bu öğretici, [Kirigami çatısını](/frameworks/kirigami) kullanarak kendi "
"yakınsak uygulamanızı oluşturma sürecinde size kılavuzlar yapacaktır. Bu "
"bağlamda *yakınsak uygulama*, insanların, üzerinde çalıştığı aygıttan "
"bağımsız olarak programı kolayca kullanabileceği anlamına gelir. Masaüstü "
"bilgisayarda ise geniş ekrana ve fare ve klavyeye uyum sağlayacak; bir "
"taşınabilir aygıtta kullanılıyorsa dokunmatik ekrandan gelen girişi kabul "
"edecek ve daha küçük bir dikey ekrana uyum sağlayacaktır."

#: content/docs/getting-started/kirigami/_index.md:36
msgid ""
"Kirigami is built on top of the QML language and Qt Quick Controls 2 "
"components provided by the Qt project. QML has built in support for touch "
"systems, which makes it ideal for mobile apps. Qt Quick components are "
"reusable visual items we can use when building our applications' interfaces. "
"Kirigami is a set of Qt Quick components designed for creating convergent "
"applications."
msgstr ""
"Kirigami, QML dili ve Qt projesi tarafından sağlanan Qt Quick Controls 2 "
"bileşenleri üzerine yapılmıştır. QML, dokunmatik sistemlere yönelik yerleşik "
"desteğe sahiptir ve bu da onu taşınabilir uygulamalar için ideal kılar. Qt "
"Quick bileşenleri, uygulamalarımızın arayüzlerini oluştururken "
"kullanabileceğimiz, yeniden kullanılabilen görsel ögelerdir. Kirigami, "
"yakınsak uygulamalar oluşturmak için tasarlanmış bir dizi Qt Quick "
"bileşenidir."

#: content/docs/getting-started/kirigami/_index.md:42
msgid ""
"While you will use QML to create the visual part of your application, the "
"business logic—the code that does the heavy lifting for your application's "
"functionality—should be written in a different language. We will also "
"explore how to integrate our business logic with our UI in the tutorials "
"below."
msgstr ""
"Uygulamanızın görsel bölümünü oluşturmak için QML’yi kullanacak olsanız da, "
"uygulamanızın işlevselliği için ağır yükü kaldıran kod olan iş mantığı "
"farklı bir dilde yazılmalıdır. Ayrıca aşağıdaki eğitimlerde iş mantığımızı "
"kullanıcı arayüzümüzle nasıl tümleştireceğimizi keşfedeceğiz."

#: content/docs/getting-started/kirigami/_index.md:47
msgid ""
"First, you will need to set up a new project in a language of your choice. "
"The introduction will show you how to make a small, but functional Kirigami "
"application."
msgstr ""

#: content/docs/getting-started/kirigami/_index.md:49
msgid ""
"You will be shown the basics of how to deal with colors and text in your "
"application, and you will get acquainted with most QML components. Next, you "
"will get acquainted with most of the QML components you might want to use "
"and how they look like. This section won't touch any business logic at all, "
"only QML code."
msgstr ""

#: content/docs/getting-started/kirigami/_index.md:51
msgid ""
"You will get a deep dive into more advanced topics that concern manipulating "
"the data that will be shown in your program."
msgstr ""

#: content/docs/getting-started/kirigami/_index.md:53
msgid ""
"Lastly, you will be presented with Kirigami Addons, a series of quality-of-"
"life components that you can use to, among other things, design the Settings "
"of your application."
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:0
msgid "FormCard About pages"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:0
msgid "Learn to create About pages to credit your application."
msgstr ""
"Uygulamanız hakkında bilgi vermek için bir Hakkında sayfası oluşturmayı "
"öğrenin."

#: content/docs/getting-started/kirigami/addons-about/index.md:8
#: content/docs/getting-started/kirigami/addons-delegates/index.md:8
#: content/docs/getting-started/kirigami/addons-introduction/index.md:8
msgid ""
"Kirigami Addons is an additional set of visual components that work well on "
"mobile and desktop and are guaranteed to be cross-platform. It uses Kirigami "
"under the hood to create its components."
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:10
msgid ""
"Some of those components allow you to credit your work and the work of other "
"contributors in your project, as well as mention the frameworks being used "
"in your application: [AboutKDE](https://api.kde.org/frameworks/kirigami-"
"addons/html/classAboutKDE.html) and AboutPage."
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:12
msgid "About KDE"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:14
msgid ""
"Each new button we created in the previous step should open a new page. You "
"can add new pages by instantiating them as [Components](docs:qtqml;QtQml."
"Component) and then using `pageStack.layers.push()` for each button to load "
"that page in our `Main.qml`:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:18
msgid ""
"That's it really! All it takes is instantiating `FormCard.AboutKDE`. You "
"should see something like this after clicking the AboutKDE button:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:22
msgid "About Page"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:24
msgid ""
"The application's AboutPage is slightly more complex, but it's still very "
"simple to use."
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:26
msgid ""
"For a simple about page that uses the data set in by `KAboutData::"
"setApplicationData(aboutData);` in `main.cpp` add the following to your "
"`Main.qml`:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:30
msgid "The About page of our application should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:34
msgid "Using JSON instead of KAboutData"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:36
msgid ""
"Instead of letting your about page get information from [KAboutData](docs:"
"kcoreaddons;KAboutData), it is possible to pass a JSON object directly. You "
"will still need to use [QApplication::setWindowIcon()](docs:qtwidgets;"
"QApplication::setWindowIcon) in your `main.cpp` in order for your "
"application icon to show up."
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:38
msgid "Create a `MyAboutPage.qml` like this:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:42
msgid "And then adjust your `Main.qml` to include your new about page:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:46
msgid ""
"The main JSON object here contains the keys `displayName`, `productName`, "
"`homepage` and so on. The keys `authors`, `credits`, `translators` and "
"`licenses` can each be passed an array of objects. The objects passed to "
"`authors`, `credits` and `translators` share the same keys so that they can "
"be displayed each in their own section, while `licenses` includes the keys "
"`name`, `text` and `spdx` for each license added, as it is not uncommon for "
"the same project to include multiple licenses."
msgstr ""

#: content/docs/getting-started/kirigami/addons-about/index.md:48
msgid ""
"These keys are optional, but a reasonable minimum amount of keys is expected "
"to make your application have no empty fields: `displayName`, `version`, "
"`description`, `homepage`, `copyrightStatement` and `authors`. You are "
"encouraged to fill as many key as possible, however."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:0
msgid "Form delegates in your settings pages"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:0
msgid "Create elegant custom settings pages."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:10
msgid ""
"You have learned how to add About and AboutKDE pages to your application. "
"Now you will be able to use their same inner components to create your "
"settings pages."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:12
msgid "The project structure should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:23
msgid "Needed Changes"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:25
msgid "Change `Main.qml` to include our new Settings page:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:85
msgid ""
"We can now start checking out the components used to create our Settings "
"page: the Form Card and its Delegates."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:87
msgid "Form Delegates"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:89
msgid "FormCard and FormCardPage"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:91
msgid ""
"[FormCard.FormCard](https://api.kde.org/frameworks/kirigami-addons/html/"
"classFormCard.html) is the main component we will be using to group all its "
"child components, the Delegates."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:93
msgid ""
"We used a form card in the [Kirigami Addons introduction](/docs/getting-"
"started/kirigami/addons-introduction) before. Its main purpose is to serve "
"as a container for other components while following a color different from "
"the background, in a similar manner to a [Kirigami.Card](docs:kirigami2;"
"Card)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:95
msgid "Create a new `SettingsPage.qml` file:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:103
#: content/docs/getting-started/kirigami/addons-delegates/index.md:107
msgid "This is where all our delegates go!"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:112
msgid ""
"Since we are making a separate QML file for our Settings page, and since we "
"need to prepare for potential scrolling in our page, we use a `FormCard."
"FormCardPage`, which inherits [Kirigami.ScrollablePage](docs:kirigami2;"
"ScrollablePage)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:114
msgid ""
"The nice thing about the form card page is that it comes with an internal "
"layout, so no additional ColumnLayout is needed and our delegates can be "
"added directly to it."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:116
msgid ""
"{{< alert color=\"info\" title=\"Note\" >}} It is possible to use FormCard "
"delegates directly with a Kirigami.ScrollablePage, but in that case you will "
"need to add your own layouts. {{< /alert >}}"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:120
msgid "FormHeader"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:122
msgid ""
"For every [FormCard](https://api.kde.org/frameworks/kirigami-addons/html/"
"classFormCard.html) you want to create, you can create a [FormHeader]"
"(https://api.kde.org/frameworks/kirigami-addons/html/classFormHeader.html) "
"just before it. The header uses bold text and shows up right above the form "
"card."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:133
#: content/docs/getting-started/kirigami/addons-delegates/index.md:141
msgid "Our delegates go here..."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:146
msgid "FormTextDelegate and FormSectionText"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:148
msgid "Let's start simple, with plain text."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:150
msgid ""
"`FormSectionText` simply adds a thin delegate containing a label. "
"`FormTextDelegate` has text and a grayed out description."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:186
msgid ""
"We add some dummy text for the hypothetical theme detection. If we wanted to "
"have actual color scheme detection, in the future it could be done similarly "
"to [Neochat](https://apps.kde.org/neochat) ([code here](https://github.com/"
"KDE/neochat/blob/master/src/colorschemer.cpp)), making use of a C++ model "
"with [KColorSchemeManager](docs:kconfigwidgets;KColorSchemeManager)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:188
msgid ""
"In the Online Accounts section, we see an additional property, `leading`. We "
"can add an [Item](docs:qtquick;Item) to it so that it appears before the "
"text. Its opposite property, `trailing`, would be able to show an Item after "
"the text, but we won't use it in our program."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:190
msgid ""
"We use a [Kirigami.Icon](docs:kirigami2;Icon) here for simplicity, but this "
"could also be implemented using a [Kirigami.Avatar](docs:kirigami2;Avatar) "
"that grabs the information from a model, as is done in Neochat [here]"
"(https://invent.kde.org/network/neochat/-/blob/master/src/qml/Settings/"
"AccountsPage.qml)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:192
msgid "It should end up looking like this:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:196
msgid "FormButtonDelegate"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:198
msgid ""
"The [FormButtonDelegate](https://api.kde.org/frameworks/kirigami-addons/html/"
"classFormButtonDelegate.html) is visually similar to a FormTextDelegate, but "
"it is clickable and shows an arrow pointing to the right. We used it in the "
"[Kirigami Addons introduction](/docs/getting-started/kirigami/addons-"
"introduction) before."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:200
msgid ""
"While the FormTextDelegate had the `leading` and `trailing` properties to "
"show an item before and after the main content, the FormButtonDelegate only "
"has the `leading` property, because the right side is occupied by the arrow."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:241
msgid ""
"We use its `icon.name` property to set a plus (+) icon to appear after the "
"space where the `leading` would appear, and before the main content. This is "
"a common pattern to indicate your button will add something to a list."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:243
msgid ""
"Since this example is for simple illustrative purposes, we don't delve deep "
"into what would be done once the button is clicked: it just prints \"Clicked!"
"\" to the terminal. We _could_ make a new page for account creation that "
"adds another user to a model, then push the page into view, similarly to "
"what we did in `Main.qml`."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:247
msgid "FormRadioDelegate, FormCheckDelegate and FormSwitchDelegate"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:249
msgid ""
"The RadioButton, CheckBox and Switch are very commonly used components in "
"any user interface. Kirigami Addons provides them as [FormRadioDelegate]"
"(https://api.kde.org/frameworks/kirigami-addons/html/classFormRadioDelegate."
"html), [FormCheckDelegate](https://api.kde.org/frameworks/kirigami-addons/"
"html/classFormCheckDelegate.html) and [FormSwitchDelegate](https://api.kde."
"org/frameworks/kirigami-addons/html/classFormSwitchDelegate.html)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:251
msgid ""
"Their only main properties are `text` and `description`. They are different "
"in usage because they all inherit [AbstractButton](docs:qtquickcontrols;"
"QtQuick.Controls.AbstractButton), and so you are expected to use its signals "
"and handlers: checked and onChecked, toggled and onToggled, clicked and "
"onClicked."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:253
msgid ""
"We want to create some autosave functionality in our application, and we "
"want to only show its settings if the user has enabled this functionality. "
"Create a new section using a [FormCard](https://api.kde.org/frameworks/"
"kirigami-addons/html/classFormCard.html) and a [FormHeader](https://api.kde."
"org/frameworks/kirigami-addons/html/classFormHeader.html), then add a "
"[FormSwitchDelegate](https://api.kde.org/frameworks/kirigami-addons/html/"
"classFormSwitchDelegate.html) and a [FormRadioDelegate](https://api.kde.org/"
"frameworks/kirigami-addons/html/classFormRadioDelegate.html)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:280
msgid ""
"We bind the visibility of each radio button to a switch, so they only appear "
"when the switch is enabled."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:282
msgid "Best Practices"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:284
msgid "<details><summary>Click here to read more</summary>\n"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:286
msgid ""
"If you have some programming background in imperative languages such as C++, "
"you might be tempted to set the `checked` property of the switch to turn the "
"visibility of the radio buttons to `true` with a JavaScript assignment such "
"as:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:296
msgid ""
"This is not very efficient for QML's declarative language and its signals "
"and slots. Try to use QML bindings like in the case of `visible: autosave."
"checked` as much as possible instead of JavaScript expressions."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:298
msgid ""
"See [this page](https://doc.qt.io/qt-6/qtquick-bestpractices.html#prefer-"
"declarative-bindings-over-imperative-assignments) for details."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:300
#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:602
#: content/docs/getting-started/kirigami/introduction-actions/index.md:80
#: content/docs/getting-started/kirigami/introduction-actions/index.md:173
#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:207
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:264
#: content/docs/getting-started/kirigami/setup-cpp/index.md:63
#: content/docs/getting-started/kirigami/setup-cpp/index.md:219
#: content/docs/getting-started/kirigami/setup-cpp/index.md:254
msgid "</details>\n"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:306
msgid ""
"To test our checkbox, we can add a new [FormCheckDelegate](https://api.kde."
"org/frameworks/kirigami-addons/html/classFormCheckDelegate.html) to our "
"General section."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:331
msgid ""
"Here we use the `onToggled` [signal handler](https://doc.qt.io/qt-6/qtqml-"
"syntax-signals.html) to show some dummy text to simulate a tray icon "
"appearing in the system. If you really wanted to, you could easily implement "
"a tray icon using [SystemTrayIcon](https://doc.qt.io/qt-6/qml-qt-labs-"
"platform-systemtrayicon.html)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:333
msgid "So far our application should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:337
msgid "FormComboBoxDelegate"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:339
msgid ""
"The common ComboBox component can be created using a [FormComboBoxDelegate]"
"(https://api.kde.org/frameworks/kirigami-addons/html/"
"classFormComboBoxDelegate.html)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:341
msgid ""
"This combobox has several useful properties we can make use of: `editable`, "
"`displayText` and `displayMode`."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:343
msgid ""
"Setting `editable: true` allows the user to edit the text of the combobox, "
"which is useful in case adding new combobox options is needed:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:347
msgid ""
"Whenever you need to show additional text before each option, you can use "
"something like `displayText: \"Profile: \" + currentText`:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:351
msgid ""
"And the most interesting one, which we will be using in our example, is "
"`displayMode`. It can have three options:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:353
msgid ""
"**FormComboBoxDelegate.ComboBox**: the standard small box showing a list of "
"options."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:357
msgid ""
"**FormComboBoxDelegate.Dialog**: a dialog showing a list of options in the "
"middle of the window, like a [Kirigami.OverlaySheet](docs:kirigami2;"
"OverlaySheet)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:361
msgid ""
"**FormComboBoxDelegate.Page**: a new page containing a list of options shown "
"in a separate window."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:365
msgid ""
"Add the following between the \"Current Color Scheme\" and \"Show Tray Icon"
"\" delegates in your \"General\" form card."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:378
msgid "With the checkbox, our Settings page should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:382
msgid "FormDelegateSeparator"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:384
msgid ""
"Our Settings page is taking shape, but each section is starting to get long. "
"We can add a few FormDelegateSeparators to make our page tidier:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:388
msgid ""
"Generally, you may use separators whenever you see major distinctions "
"between components, although the choice of where to place them is ultimately "
"yours. For example, in the General section, the checkbox differs from its "
"previous components as it doesn't start with text; in the Autosave section, "
"the separator groups the radio buttons together; and in the Accounts "
"section, adding a separator between the last account and the button provides "
"some additional focus to the button."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:390
msgid ""
"The `above` and `below` properties are rather self-explanatory when it comes "
"to their use: you pass the `id` of the components above and below the "
"separator. When they are set, the separator will swiftly disappear whenever "
"the above or below item is highlighted/hovered. They are most useful, for "
"instance, when you need to generate components dynamically and you can't "
"automatically assume which item will come immediately before or after the "
"separator. That would be the case in the Accounts section of our application "
"once the logic to add new accounts were actually implemented, in which case "
"we could always grab the last item in the model to do so."
msgstr ""

#: content/docs/getting-started/kirigami/addons-delegates/index.md:394
msgid ""
"Notice how the separator above the tray icon setting does not appear while "
"it is hovered."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:0
msgid "Introduction to Kirigami Addons"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:0
msgid "Get acquainted with Kirigami Addons components"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:10
msgid ""
"Here you will be setting up your new Kirigami Addons project and be "
"introduced to a few useful components."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:12
msgid ""
"These components make use of KDE's localization facilities, so before we "
"start using these, we will need to set a little project that makes use of "
"[KLocalizedContext](docs:ki18n;KLocalizedContext)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:14
msgid "Setting up your project"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:16
msgid "The initial project structure will look like so:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:25
#: content/docs/getting-started/kirigami/introduction-actions/index.md:145
#: content/docs/getting-started/kirigami/setup-cpp/index.md:101
#: content/docs/getting-started/kirigami/setup-python/index.md:44
msgid "Tip"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:27
#: content/docs/getting-started/kirigami/setup-cpp/index.md:103
msgid "You can quickly create this file structure with:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:37
msgid "We start by using a very standard `CMakeLists.txt`:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:41
msgid "The interesting part will be the `main.cpp`:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:45
msgid ""
"If you have read our [KXmlGui tutorial](/docs/getting-started/kxmlgui) or "
"the last Kirigami tutorial on the [Kirigami About page](/docs/getting-"
"started/kirigami/advanced-add_about_page), much of this will seem familiar "
"to you."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:47
msgid ""
"We create our application and use [KAboutData's](docs:kcoreaddons;"
"KAboutData) default constructor to add the metadata of our application, add "
"ourselves as an author, and then use [setApplicationData()](docs:kcoreaddons;"
"KAboutData::setApplicationData) to finish the process. For later, we also "
"set an application icon that comes from the system theme."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:49
msgid ""
"We then use a lambda in [qmlRegisterSingletonType](docs:qtqml;QQmlEngine::"
"qmlRegisterSingletonType) to directly send the metadata of our application "
"to the QML side, exposing its properties."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:51
msgid ""
"We then instantiate our QML engine, and set its [context](docs:qtqml;"
"QQmlContext) to use KDE's [KLocalizedContext](docs:ki18n;KLocalizedContext), "
"used to integrate translated strings, passing the just created engine as a "
"parameter."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:53
msgid ""
"We simply load our QML file from the resource file, and now we just need to "
"take care of our initial QML file."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:55
msgid "FormCard and FormButtonDelegate"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:57
msgid ""
"The idea for our app is to design our own Kirigami Addons gallery, "
"showcasing multiple components, one per page. The main page will contain a "
"simple list of buttons in a [ColumnLayout](https://doc.qt.io/qt-6/qml-"
"qtquick-layouts-columnlayout.html), each opening a separate page."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:59
msgid "Initially, our `Main.qml` should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:63
msgid ""
"We use our handy [pageStack](/docs/getting-started/kirigami/components-"
"pagerow_pagestack) to set the initial page to a [Kirigami.ScrollablePage]"
"(docs:kirigami2;ScrollablePage)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:65
msgid ""
"While we could use a [FormLayout](/docs/getting-started/kirigami/components-"
"formlayouts) together with [QtQuick Controls components](components-"
"controls) to achieve our goal, here you will be introduced to [FormCard]"
"(https://api.kde.org/frameworks/kirigami-addons/html/classFormCard.html)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:67
msgid ""
"The main purpose of a FormCard is to serve as a container for other "
"components while following a color different from the background, in a "
"similar manner to a [Kirigami.Card](docs:kirigami2;Card), but for settings "
"windows. You can have multiple FormCards in your application to indicate "
"different sections. Your FormCard is also expected to be a direct child of a "
"ColumnLayout."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:69
msgid ""
"Importing `org.kde.kirigamiaddons.formcard` makes all FormCard components "
"available to your QML file."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:71
msgid ""
"We will have only a single section in our main page, so we add a single "
"FormCard:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:75
msgid ""
"The great thing about FormCard is that it does automatic layouting for you. "
"In other words, just the order of its components is enough to indicate their "
"position inside the FormCard, no [Layout attached properties](https://doc.qt."
"io/qt-6/qml-qtquick-layouts-layout.html) are necessary and you are expected "
"not to use [anchors](https://doc.qt.io/qt-6/qtquick-positioning-anchors."
"html) or [positioners](https://doc.qt.io/qt-6/qtquick-positioning-layouts."
"html)."
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:77
msgid "We can simply add a few buttons inside our FormCard:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:81
msgid ""
"That's it! The buttons are not usable just yet, but we are now set up to "
"play with our About pages!"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:83
msgid "We then build and run it like so:"
msgstr ""

#: content/docs/getting-started/kirigami/addons-introduction/index.md:92
msgid ""
"To see other ways to build your application (for example, on Windows), see "
"the [Getting Started with Kirigami](/docs/getting-started/kirigami/"
"introduction-getting_started) page."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:0
msgid "About page"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:0
msgid "Informations about your application"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:10
msgid ""
"[Kirigami.AboutPage](docs:kirigami;org.kde.kirigami.AboutPage) allows you to "
"have a page that shows the copyright notice of the application together with "
"the list of contributors and some information of which platform it's running "
"on."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:12
msgid ""
"First, we are going to edit our `main.cpp` file from previous tutorials."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:14
#: content/docs/getting-started/kirigami/setup-cpp/index.md:202
msgid "main.cpp"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:18
msgid ""
"In the `main.cpp` file we include [KAboutData](docs:kcoreaddons;KAboutData), "
"a core KDE frameworks component that lets us store information about our "
"application. This information can then be reused by many other KDE "
"Frameworks components. We instantiate a new `aboutData` object with its "
"fairly complete default constructor and add author information."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:20
msgid ""
"After all the required information has been set, we call [KAboutData::"
"setApplicationData](docs:kcoreaddons;KAboutData::setApplicationData) to "
"initialize the properties of the [QApplication ](docs:qtwidgets;"
"QApplication) object."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:22
msgid ""
"We then create a [qmlRegisterSingletonType()](docs:qtqml;QQmlEngine::"
"qmlRegisterSingletonType). This is used to allow us to import the C++ code "
"as a module in our `main.qml` with `import org.kde.example 1.0`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:24
msgid ""
"Its first argument is the URI that will be used for the import, the second "
"and third arguments are major and minor versions respectively, the fourth is "
"the type name, the name that we will call when accessing our `About` type, "
"and the last is a reference to the C++ object that is exposed to QML. In the "
"latter's case, we use a [lambda](https://en.cppreference.com/w/cpp/language/"
"lambda) to instantiate the `aboutData` of our application in place."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:26
msgid "main.qml"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:30
msgid ""
"First, we use the import we defined in the `main.cpp` file, namely `org.kde."
"example`. We then add a [Kirigami.Action](docs:kirigami;org.kde.kirigami."
"Action) to our [global drawer](docs:kirigami;org.kde.kirigami.GlobalDrawer) "
"that will send us to the About page, and create a component with a [Kirigami."
"AboutPage](docs:kirigami;org.kde.kirigami.AboutPage) in it, which expects a "
"[KAboutData::applicationData()](docs:kcoreaddons;KAboutData::"
"applicationData) object. We exposed precisely that in our `main.cpp` and "
"called it `About`, so we can pass it here."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:33
msgid "CMakeLists"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:37
msgid ""
"In the `CMakeLists.txt` file in our top-level folder, be sure to have "
"`CoreAddons` in your [find_package()](https://cmake.org/cmake/help/latest/"
"command/find_package.html) call. It is needed for [KAboutData](docs:"
"kcoreaddons;KAboutData)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:41
msgid ""
"In the `CMakeLists.txt` file in the `src/` directory, nothing is needed "
"since we instantiated out `aboutData` in place."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:44
#: content/docs/getting-started/kirigami/setup-cpp/index.md:330
#: content/docs/getting-started/kirigami/setup-python/index.md:145
msgid "Running the application"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:46
msgid ""
"Now if you run your application and trigger the \"About\" action in the "
"global drawer you should see our about page."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page/index.md:48
msgid "![Screenshot of the Kirigami About Page](about-page.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:0
msgid "Connect logic to your QML user interface"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:0
msgid ""
"Connect a backend to do calculations and supply your user interface with "
"data to display"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:10
msgid ""
"To integrate logic into the application, we need C++ backend classes that "
"can do the important calculations. Writing logic in the QML files is "
"discouraged, so try to move as much as possible to the backend, so QML is "
"purely used for displaying the user interface, which is what it is best at."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:12
msgid ""
"For your new backend class, create two new files called `backend.cpp` and "
"`backend.h`. Don't forget to add the new cpp file to the executable in `src/"
"CMakeLists.txt`, next to main.cpp."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:14
msgid "Add the following content to the new header file (`backend.h`):"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:29
msgid ""
"The `backend.cpp` file containing the definitions is similarly empty right "
"now, it should contain something like the following:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:40
msgid ""
"Currently the user interface doesn't know about your backend class. To "
"change that, we need to register the new type in `main.cpp`. The backend "
"will be created as a singleton, that means it will only be created once and "
"exist through the whole time from starting the application to closing it."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:42
msgid ""
"Right after creating the [QQmlApplicationEngine](docs:qtqml;"
"QQmlApplicationEngine), add the [type registration](https://doc.qt.io/qt-6/"
"qtqml-cppintegration-definetypes.html) to `main.cpp` as follows:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:48
msgid "Don't forget to include the new header file at the top of `main.cpp`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:50
msgid ""
"From now on, the backend will be known to QML as `Backend`. It is contained "
"in a module called `org.kde.example`. Since the module is part of the "
"application, you don't need to worry about versioning it, just stay with "
"`1.0` and use it consistently throughout the application."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:52
msgid "In `main.qml`, import the new module:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:57
msgid ""
"Now we have connected the class holding the future logic to the application, "
"but it still doesn't do anything. To change that, let's add a property to "
"the class. Properties are a lot more than a simple variable. They can inform "
"the UI about changes so it can update the right areas."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:59
msgid ""
"Right under the [Q_OBJECT](docs:qtcore;QObject::Q_OBJECT) macro, add a new "
"[Q_PROPERTY](docs:qtcore;QObject::Q_PROPERTY)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:65
msgid ""
"This may seem like a lot of code to just read and write some code from the "
"backend. However, a closer look reveals that reading the property from the "
"UI can already run some logic—same when it is written to. In this case, it "
"will automatically inform the frontend and backend of changes."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:67
msgid ""
"The reading and writing is based on the concept of [getter and setter "
"functions](https://www.w3schools.com/cpp/cpp_encapsulation.asp). Go ahead "
"and add a new private attribute to your class that holds the data, as well "
"as the relevant getter and setter functions."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:73
msgid "To the public section, add"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:80
msgid ""
"The first function is the getter, the second the setter, and the third a "
"signal that is emitted when the property is changed. The signal doesn't need "
"any implementation in `backend.cpp` file, since it doesn't do much more than "
"being emitted, but the getter and setter need to be implemented similar to "
"the following:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:94
msgid ""
"As you can see, when the setter is called, the signal will be emitted, and "
"inform the ui and backend of the change."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:96
msgid ""
"To display the text, add a heading to `main.qml` under the `title` property "
"of the [Kirigami.Page](docs:kirigami;org.kde.kirigami.Page) element already "
"contained in the template."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:98
msgid "The resulting code in that part of the file should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:101
#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:112
#: content/docs/getting-started/kirigami/components-actions/index.md:35
#: content/docs/getting-started/kirigami/components-actions/index.md:140
#: content/docs/getting-started/kirigami/components-actions/index.md:285
#: content/docs/getting-started/kirigami/components-card/index.md:67
#: content/docs/getting-started/kirigami/components-listview/index.md:305
#: content/docs/getting-started/kirigami/components-listview/index.md:314
#: content/docs/getting-started/kirigami/introduction-actions/index.md:53
#: content/docs/getting-started/kirigami/introduction-actions/index.md:123
#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:25
#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:45
#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:87
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:21
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:40
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:50
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:82
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:135
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:150
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:185
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:214
msgid "..."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:118
msgid "Now compile and start your program again."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:120
msgid "Congratulations, you learned:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:121
msgid "How to register backend types to QML"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:122
msgid "Add new elements to the QML file"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:123
msgid "Create new QObject subclasses"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:124
msgid "How to add properties and what they do"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:125
msgid "What signals are"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend/index.md:127
msgid ""
"If you want to know more about the integration between QML and C++, we "
"recommend reading the [official Qt documentation](https://doc.qt.io/qt-6/"
"qtqml-cppintegration-definetypes.html)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:0
msgid "Connect C++ models to your QML user interface"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:0
msgid "Data from the C++ backend to the QML frontend"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:8
msgid ""
"As shown from the [previous tutorial](/docs/getting-started/kirigami/"
"advanced-connect_backend/), you can connect C++ code to QML by creating a "
"class that will be treated as just another component in QML. However, you "
"may want to represent more complicated data, such as data that needs to act "
"as a custom [ListModel](docs:qtquick;qml-qtqml-models-listmodel.html) or in "
"some way needs to be delegated from a [Repeater](docs:qtquick;qml-qtquick-"
"repeater.html)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:16
msgid ""
"We can create our own [models](docs:qtcore;qabstractlistmodel.html) from the "
"C++ side, and declare how the data from that model should be represented on "
"the QML frontend."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:20
msgid "Preparing the Class"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:22
msgid ""
"In this tutorial, we will create a class that contains a QMap, where a "
"QString is used as a key and QStringList objects are used as values. The "
"frontend will be able to read and display the keys and values and be simple "
"to use just like a one-dimensional array. It should look similar to a QML "
"ListModel."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:27
msgid ""
"To do this, we need to declare a class that inherits from "
"[QAbstractListModel](docs:qtcore;qabstractlistmodel.html). Let's also add in "
"some add data to the QMap. These declarations will be located in `model.h`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:32
#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:65
#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:73
#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:292
#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:430
#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:43
#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:88
#: content/docs/getting-started/kirigami/components-actions/index.md:16
#: content/docs/getting-started/kirigami/components-actions/index.md:40
#: content/docs/getting-started/kirigami/components-actions/index.md:190
#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:14
#: content/docs/getting-started/kirigami/components-card/index.md:97
#: content/docs/getting-started/kirigami/components-chips/index.md:112
#: content/docs/getting-started/kirigami/components-controls/index.md:115
#: content/docs/getting-started/kirigami/components-drawers/index.md:73
#: content/docs/getting-started/kirigami/components-drawers/index.md:147
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:58
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:200
#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:25
#: content/docs/getting-started/kirigami/introduction-pages/index.md:33
#: content/docs/getting-started/kirigami/introduction-pages/index.md:53
#: content/docs/getting-started/kirigami/setup-cpp/index.md:113
#: content/docs/getting-started/kirigami/setup-cpp/index.md:134
#: content/docs/getting-started/kirigami/setup-cpp/index.md:146
#: content/docs/getting-started/kirigami/setup-cpp/index.md:166
#: content/docs/getting-started/kirigami/setup-cpp/index.md:357
#: content/docs/getting-started/kirigami/setup-python/index.md:78
#: content/docs/getting-started/kirigami/setup-python/index.md:129
#: content/docs/getting-started/kirigami/setup-rust/index.md:137
#: content/docs/getting-started/kirigami/style-colors/index.md:28
msgid "Note"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:34
msgid ""
"If you are following along, please remember to update your `CMakeLists.txt` "
"file!"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:53
msgid ""
"Of course, we can't just display this class as is. We also need to tell QML "
"on how to represent this data in the class. We can do this by overriding "
"three virtual functions that are essential at doing this, all of which do "
"their own tasks."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:58
msgid ""
"`rowCount()` - Think of this function as a way to tell QML how many items "
"are in the model to represent."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:60
msgid ""
"`roleNames()` - You can think of role names as property names attached to "
"data in QML. This function allows you to create those roles."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:62
msgid ""
"`data()` - This function is called when you want to retrieve the data that "
"corresponds to the role names from the model."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:67
msgid ""
"The custom role names created by `roleNames()` are only usable when a model "
"is being delegated, and are not usable outside of it. See [Models and Views]"
"(docs:qtquick;qtquick-modelviewsdata-modelview.html#models)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:75
msgid ""
"Technically, models in Qt are represented as tables, with rows and columns. "
"So, what overriding `rowCount()` does is tell Qt how many rows are in a "
"model. Since we are just dealing with a one-dimensional array in this "
"tutorial, you can just think of \"rows\" as \"number of elements.\""
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:82
msgid "Overriding and Implementing `rowCount()`"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:84
msgid ""
"Let's override the function in the header file. The `rowCount()` comes with "
"its own parameter, but will not be used in this example and is excluded."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:95
msgid "Then, let's declare how many rows are in this model in `model.cpp`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:105
msgid "Overriding and Implementing `roleNames()`"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:107
msgid ""
"Before we override `roleNames()`, we need to declare what the roles are in "
"the C++ side using an public `enum` variable. The reason for this is because "
"these values from the `enum` variable are passed into `data()` every time "
"QML accesses a corresponding role, and as such we can make `data()` return "
"what we want."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:113
msgid ""
"Let's begin with creating the `enum` variable for roles, where each value is "
"a role for the C++ side."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:130
msgid ""
"Once we have that settled, we can finally create what these roles are in the "
"QML side using a [QHash](docs:qtcore;qhash.html) where the keys are the "
"enumerated values paired with [QByteArrays](docs:qtcore;qbytearray.html). "
"The text in the QByteArray is what's used in the actual QML code."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:144
msgid ""
"In our example model, the role \"species\" can be used to retrieve the "
"QString key \"Feline\", \"Fox\", \"Goat\", each in a separate delegate. The "
"same can be done with the QStringList values for the character names list."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:149
msgid "Overriding and Implementing `data()`"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:151
msgid ""
"There are two parameters that are passed in `data()`: `index` and `role`. "
"`index` is the location of where the data is when being delegated. As "
"previously stated, `role` is used by QML to get specific data returned when "
"it's accessing a role."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:156
msgid ""
"In `data()`, we can use a `switch` statement to return the appropriate data "
"and data type depending on the role, which is possible as `data()` returns a "
"[QVariant](docs:qtcore;qvariant.html). We still need to make sure we get the "
"appropriate location of the data, though. In this example below, you can see "
"that a new iterator variable is being declared, which is set from the "
"beginning of the list plus the row of the index and the data that the "
"iterator is pointing to is what is being returned."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:164
msgid ""
"We can't just return whatever data we want though. We may be trying to bind "
"data to a property with an incompatible data type, such as a QStringList to "
"a QString. You may have to do data conversion in order for the data to be "
"displayed properly."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:194
msgid "Allow the Class to be Declared in QML"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:196
msgid "Let's not forget to make our class usable in QML."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:206
msgid "Class Usage in QML"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:208
msgid ""
"The QML file that is used will just contain three [Kirigami.AbstractCard]"
"(docs:kirigami;org.kde.kirigami.AbstractCard) components, where the key is "
"the header and the value is the content. These cards are created by "
"delegating an AbstractCard using a Repeater, where the custom model we "
"created acts as the model. The data is accessed using word `model`, followed "
"by the roles we declared in `roleNames()`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:249
msgid "![App Screenshot](app_screenshot.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:251
msgid "Data Modification"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:253
msgid "Editing Data Using `dataChanged()` and `setData()`"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:255
msgid ""
"You may encounter a situation where you want to modify data in the model, "
"and have the changes reflected on the frontend side. Every time we change "
"data in the model, we must emit the `dataChanged()` signal which will apply "
"those changes on the frontend side at the specific cells specified in its "
"arguments. In this tutorial, we can just use the `index` argument of "
"`setData()`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:261
msgid ""
"`setData()` is a virtual function you can override so that attempting to "
"modify the data from the frontend side automatically reflects those changes "
"on the backend side. It requires three parameters:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:265
msgid "`index` - The location of the data."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:266
msgid "`value` - The contents of the new data."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:267
msgid ""
"`role` - In this context, the role here is used to tell views how they "
"should handle data. The role here should be `Qt::EditRole`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:270
msgid ""
"The `role` parameter in this case is used to ensure `setData()` can be "
"edited via user input (Qt::EditRole). Using `index`, we can use that to "
"determine the location of where the data should be edited with the contents "
"of `value`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:294
msgid ""
"`setData()` does not automatically emit `dataChanged()` and that still has "
"to be done manually."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:299
msgid ""
"Let's update the QML code so that we can open up a prompt that allows us to "
"edit the model using a Controls.Button attached to the cards."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:363
msgid ""
"Now, whenever the values of the model change in the frontend, the changes "
"should automatically update on the backend."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:370
msgid "![app_screenshot_1.png](app_screenshot_1.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:376
msgid "![app_screenshot_2.png](app_screenshot_2.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:382
msgid "Adding Rows"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:384
msgid ""
"We added a way to modify the data in existing keys of the QMap, and in the "
"front end, this is reflected as modifying the contents inside the "
"AbstractCards. But what if we need to add a new key entry in the QMap and "
"have that reflected on the QML side? Let's do this by creating a new method "
"that is callable on the QML side to perform this task."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:390
msgid ""
"To make the method visible in QML, we must use the Q_OBJECT macro in the "
"class, and begin the method declaration with the Q_INVOKABLE macro. This "
"method will also include a string parameter, which is intended to be the new "
"key in the QMap."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:406
msgid ""
"Inside of this method, we need to tell Qt that we want to create more rows "
"in the model. This is done by calling `beginInsertRows()` to begin our row "
"adding operation, followed by inserting whatever we need, then use "
"`endInsertRows()` to end the operation. We still need to emit "
"`dataChanged()` at the end, however. This time, we are going to update all "
"rows, from the first row to the last one as the QMap may alphabetically "
"reorganize itself, and we need to catch that across all rows."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:414
msgid ""
"When calling `beginInsertRows()`, we need to first pass in a QModelIndex "
"class to specify the location of where the new rows should be added, "
"followed by what the new first and last row numbers are going to be. In this "
"tutorial, the first argument will just be `QModelIndex()` as there is no "
"need to use the parameter here. We can just use the current row size for the "
"first and last row number, as we'll just be adding one row at the end of the "
"model."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:432
msgid ""
"The `dataChanged()` function uses QModelIndex as the data type for its "
"parameters. However, we can convert integers in QModelIndex data types using "
"the `index()` function."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:438
msgid ""
"Let's update the QML code so we are given the ability to add a new key to "
"the QMap."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:457
msgid "Clear TextField every time it's done"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:478
msgid ""
"Now, we should be given a new action at the top of the app that brings up a "
"prompt that allows to add a new element to the model, with our own custom "
"data."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:485
msgid "![app_screenshot_add_1.png](app_screenshot_add_1.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:491
msgid "![app_screenshot_add_2.png](app_screenshot_add_2.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:497
msgid "Removing Rows"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:499
msgid ""
"The way remove rows is similar to adding rows. Let's create another method "
"that we'll call in QML. This time, we will use an additional parameter, and "
"that is an integer that is the row number. The species name is used to "
"delete the key from the QMap, while the row number will be used to delete "
"the row on the front end."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:526
msgid ""
"Now, let's update the application so a \"Delete\" button appears alongside "
"the edit button, and hook it up to our delete method."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:570
msgid "![app_screenshot_del_1.png](app_screenshot_del_1.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:576
msgid "![app_screenshot_del_2.png](app_screenshot_del_2.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:582
msgid "Full Code"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:584
msgid "<details><summary>Main.qml</summary>\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:588
#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:595
msgid ""
"</details>\n"
"<br>\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:591
msgid "<details><summary>model.h</summary>\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:598
msgid "<details><summary>model.cpp</summary>\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:604
msgid "More Information"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_models/index.md:606
msgid ""
"For more information, see [Using C++ Models with Qt Quick Views](docs:"
"qtquick;qtquick-modelviewsdata-cppmodels.html) and [Model/View Programming]"
"(docs:qtquick;model-view-programming.html)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:0
msgid "Figuring out main.cpp"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:0
msgid "Understanding the central file of our backend code\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:11
msgid "The role of main.cpp"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:13
msgid ""
"While QML is used for the front-end of Kirigami applications, the backend is "
"usually written in C++ thanks to this language's speed and flexibility. "
"While in previous pages we have covered QML in a lot of depth, we'll need to "
"gain an understanding of our backend C++ code in order to make applications "
"that are more useful than what we can achieve with pure QML."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:15
msgid ""
"Here, we'll be going over the `main.cpp` file we created in the [Getting "
"Started](/docs/getting-started/kirigami/introduction-getting_started) page "
"so that we can better understand what is going on in the central C++ file of "
"our application. While this is a basic `main.cpp`, the features we will go "
"over will remain essential no matter what kind of application you decide to "
"create."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:17
msgid "What it does"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:21
msgid ""
"First we must include a number of Qt [header files](https://www.learncpp.com/"
"cpp-tutorial/header-files/), allowing us to use their functions. In this "
"case, we include a number of Qt headers that handle application logic, and "
"to allow us to read QML files."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:23
msgid ""
"We then create a [QApplication](docs:qtwidgets;QApplication) instance which "
"we call `app`. Passing [argc and argv](https://www.learncpp.com/cpp-tutorial/"
"command-line-arguments/) to the constructor is required for the call."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:25
msgid ""
"We also set some metadata relating to the application. These include the "
"organisation that created the application, the organisation's website, and "
"the name of the application. We set these properties by calling "
"[QApplication](docs:qtwidgets;QApplication), instantiating an object that "
"comes from [QCoreApplication](docs:qtcore;QCoreApplication) and provides the "
"[event loop](docs:qtcore;QCoreApplication::exec) for applications regardless "
"of whether they have a GUI or not (so if we ran our program without the GUI, "
"this metadata would still be set)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:27
msgid ""
"To make our app look good with KDE's [Breeze icons](https://invent.kde.org/"
"frameworks/breeze-icons) and [Breeze style](https://invent.kde.org/plasma/"
"breeze) on non-Plasma environments such as Windows or GNOME, we need to do "
"three things:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:29
msgid ""
"initialize the theming facilities of [KIconThemes](https://invent.kde.org/"
"frameworks/kiconthemes) on platforms where icon themes aren't part of the "
"system (like Windows or MacOS) with `KIconTheme::initTheme()`"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:30
msgid ""
"set the QStyle with [QApplication::setStyle()](docs:qtwidgets;QApplication::"
"setStyle) to force Breeze instead of the native platform style"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:31
msgid ""
"set the QtQuick Controls style with [QQuickStyle::setStyle()](docs:"
"qtquickcontrols;QQuickStyle::setStyle) to force Breeze with KDE's [qqc2-"
"desktop-style](https://invent.kde.org/frameworks/qqc2-desktop-style)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:33
msgid ""
"The call to `KIconTheme::initTheme()` needs to be done before creating the "
"QApplication and lets the app find Breeze icons to use. Setting the QStyle "
"to Breeze is needed because we used QApplication for our app instead of "
"[QGuiApplication](docs:qtgui;QGuiApplication). Actual interface controls in "
"the window like buttons and checkboxes will follow Breeze by using `qqc2-"
"desktop-style`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:35
msgid ""
"The [QQmlApplicationEngine](docs:qtqml;QQmlApplicationEngine) lets us load "
"an application from a QML file, which we do in the next line. In `engine."
"loadFromModule(\"org.kde.tutorial\", \"Main\");` we load our QML from the "
"URI import defined in CMake."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp/index.md:37
msgid ""
"Next, we check if our engine correctly loaded the QML file by checking that "
"the engine's [rootObjects()](docs:qtqml;QQmlApplicationEngine::rootObjects) "
"list is not empty. We can then run our application with [app.exec()](docs:"
"qtcore;QCoreApplication::exec)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:0
msgid "Understanding CMakeLists"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:0
msgid "Getting to grips with how CMakeLists.txt files work\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:11
msgid "CMake"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:12
msgid ""
"In our introductory tutorial, we used [CMake](https://cmake.org/) as the "
"build system for our application, but we only really paid close attention to "
"one of our `CMakeLists.txt` files. Here, we're going to go over how it works "
"in a bit more detail."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:14
msgid ""
"CMake is useful because it allows us to automate much of the stuff that "
"needs to be done before compilation."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:16
msgid "The root CMakeLists.txt"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:18
msgid "You might remember this `CMakeLists.txt` file from the first tutorial:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:22
msgid ""
"The first line, `cmake_minimum_required()` sets the version of CMake we will "
"be calling."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:24
msgid ""
"After that, `project(kirigami-tutorial)` defines the name of the project."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:26
msgid ""
"Then we get to a section where we include a number of necessary CMake and "
"KDE settings by using [extra-cmake-modules](https://api.kde.org/ecm/). They "
"provide a set of useful utilities:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:28
msgid ""
"[KDEInstallDirs](https://api.kde.org/ecm/kde-module/KDEInstallDirs6.html) "
"provides convenience variables such as `${KDE_INSTALL_TARGETS_DEFAULT_ARGS}"
"`, `${KDE_INSTALL_QMLDIR}`, `${KDE_INSTALL_BINDIR}` and `"
"${KDE_INSTALL_LIBDIR}`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:29
msgid ""
"[KDECMakeSettings](https://api.kde.org/ecm/kde-module/KDECMakeSettings.html) "
"provides things like `CMAKE_AUTORCC ON`, an `uninstall` target that can be "
"used with `cmake --build build/ --target uninstall`, and `ENABLE_CLAZY`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:30
msgid ""
"[KDECompilerSettings](https://api.kde.org/ecm/kde-module/KDECMakeSettings."
"html) provides a minimum C++ standard, compiler flags such as `-pedantic`, "
"and best practices macros like `-DQT_NO_CAST_FROM_ASCII` to require explicit "
"conversions such as `QStringLiteral()`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:31
msgid ""
"[ECMFindQmlModule](https://api.kde.org/ecm/module/ECMFindQmlModule.html) "
"provides a way to ensure a runtime QML dependency is found at compile time."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:32
msgid ""
"[ECMQmlModule](https://api.kde.org/ecm/module/ECMQmlModule.html) provides "
"CMake commands like `ecm_add_qml_module()` and `ecm_target_qml_sources()`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:34
msgid ""
"The following section is important, because it specifies which dependencies "
"we'll be bringing in at compile time. Let's look at the first:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:38
msgid ""
"[find_package()](https://cmake.org/cmake/help/latest/command/find_package."
"html) finds and loads the external library and its components."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:39
msgid ""
"`REQUIRED` tells CMake to exit with an error if the package cannot be found."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:40
msgid ""
"`COMPONENTS` is a parameter that precedes the specific components of the "
"framework we will include."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:41
msgid ""
"Each word after `COMPONENTS` refers to a specific component of the library."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:45
msgid ""
"If you are looking to add any components listed in the [KDE API "
"documentation](https://api.kde.org/) to your application, you may check the "
"right sidebar for how to add the component with CMake. For instance, for "
"[Kirigami](docs:kirigami;kirigami-index.html), you will find something like "
"`find_package(KF6Kirigami)`, which with the addition of ECM becomes:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:51
msgid ""
"Pay close attention to your included components, as omitting ones used in "
"our code will stop our application from compiling."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:55
msgid ""
"The install line instructs CMake to install the desktop file in `"
"${KDE_INSTALL_APPDIR}`, which on Linux translates to `$XDG_DATA_DIRS/"
"applications`, usually `/usr/share/applications`, and on Windows translates "
"to `C:/Program Files/${PROJECT_NAME}/bin/data/applications`:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:59
msgid ""
"The final line lets CMake print out which packages it has found, and it "
"makes compilation fail immediately if it encounters an error:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:63
msgid ""
"And above that, `add_subdirectory(src)` points CMake into the `src/` "
"directory, where it finds another `CMakeLists.txt` file."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:65
msgid "src/CMakeLists.txt"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:69
msgid ""
"While the first file handled metadata and finding libraries, this one will "
"consist of handling dependencies and installing the application. It has the "
"following CMake calls:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:71
msgid ""
"[add_executable()](https://cmake.org/cmake/help/latest/command/"
"add_executable.html) creates the executable target we will use to run our "
"project."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:72
msgid ""
"`ecm_add_qml_module()` creates a QML module target that will be accessible "
"via the \"org.kde.tutorial\" import."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:73
msgid ""
"[target_sources()](https://cmake.org/cmake/help/latest/command/"
"target_sources.html) adds C++ source files to the executable target."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:74
msgid "`ecm_target_qml_sources()` adds QML files to the module."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:75
msgid ""
"[target_link_libraries()](https://cmake.org/cmake/help/latest/command/"
"target_link_libraries.html) links the C++ libraries used in our code to our "
"executable. Kirigami is not included here because we are using only its QML "
"module."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:76
msgid ""
"[install()](https://cmake.org/cmake/help/latest/command/install.html) "
"installs the executable to the system."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:78
msgid ""
"The documentation for the two ECM commands can be found in the [extra-cmake-"
"modules API for ECMQmlModule](https://api.kde.org/ecm/module/ECMQmlModule."
"html)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:80
msgid ""
"The call to `ecm_add_qml_module()` was used here to modify the traditional C+"
"+ source code executable target and turn it into something that can accept "
"QML files and C++ source code that is accessible from QML in what is called "
"[using the executable as backing target for a QML module](https://doc.qt.io/"
"qt-6/qt-add-qml-module.html#executable-as-a-qml-module). This means the QML "
"files are run directly as part of the application, which is often the case "
"for applications."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:82
msgid ""
"You may also create a separate QML module that does not use the executable "
"as backing target using `ecm_add_qml_module()`. In this case, you'd create a "
"library target using [add_library()](https://cmake.org/cmake/help/latest/"
"command/add_library.html), link it to an existing executable target using "
"`target_link_libraries()`, and in addition to installing the library with "
"`install()` you will need to finalize the QML module with "
"[ecm_finalize_qml_module()](https://api.kde.org/ecm/module/ECMQmlModule."
"html) so it can generate two files: `qmldir` and `qmltypes`. These files are "
"used by QtQuick applications to find separate QML modules."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:84
msgid ""
"The method for creating a separate QML module is better exemplified in "
"[Using separate files](/content/docs/getting-started/kirigami/introduction-"
"separatefiles)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:86
msgid ""
"These are additions provided by extra-cmake-modules to make the use of [Qt "
"declarative registration](https://doc.qt.io/qt-6.7/cmake-build-qml-"
"application.html) (the [replacement to Qt resource files](https://doc.qt.io/"
"qt-5/resources.html)) easier."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:90
msgid ""
"These libraries should match the components that we included in our previous "
"`CMakeLists.txt` file, otherwise these components will not be included and "
"our application won't compile."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:94
msgid ""
"The documentation for all three commands can be found in the [extra-cmake-"
"modules API for ECMQmlModule](https://api.kde.org/ecm/module/ECMQmlModule."
"html)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:96
msgid "src/components/CMakeLists.txt"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:98
msgid ""
"In the tutorial about [how to split your code into separate files](/docs/"
"getting-started/kirigami/introduction-separatefiles#preparing-cmake-for-the-"
"new-files), a new CMake file was introduced to allow for separate QML "
"modules:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:102
msgid ""
"The requirement for this file to be read by CMake is adding a call to "
"`add_subdirectory()` in the `src/CMakeLists.txt` pointing to it."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:104
#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:96
msgid ""
"We create a new target called `kirigami-hello-components` and then turn it "
"into a QML module using [ecm_add_qml_module()](https://api.kde.org/ecm/"
"module/ECMQmlModule.html) under the import name `org.kde.tutorial."
"components` and add the relevant QML files."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:106
msgid ""
"The call to [add_library()](https://cmake.org/cmake/help/latest/command/"
"add_library.html) generates a new target called `kirigami-hello-components`. "
"This target will have its own set of source code files, QML files, link its "
"own libraries and so on, but it needs to be linked to the executable, but "
"once it is compiled it needs to be linked to the executable created in the "
"`src/CMakeLists.txt`. This is done by adding the target name to the list of "
"libraries that will be linked to the executable in `target_link_libraries()`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:108
msgid ""
"The call to `ecm_add_qml_module()` changes the library to allow it to accept "
"QML files as before, but this time we need to use [GENERATE_PLUGIN_SOURCE]"
"(https://api.kde.org/ecm/module/ECMQmlModule.html). When the executable is "
"used as a backing target (like with `kirigami-hello`) it doesn't need to "
"generate plugin code since it's built into the executable; with separate QML "
"modules like `kirigami-hello-components` the plugin code is necessary."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:110
msgid ""
"Upstream Qt's [qt_add_qml_module()](https://doc.qt.io/qt-6/qt-add-qml-module."
"html#targets-and-plugin-targets) by default generates a plugin together with "
"the QML module, but KDE's `ecm_add_qml_module()` by default does not for "
"backwards compatibility."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:112
msgid ""
"Another thing that is necessary for separate QML modules is to finalize the "
"target. This mainly means CMake generates two files, [qmldir and qmltypes]"
"(https://doc.qt.io/qt-6/qtqml-modules-qmldir.html), which describe the QML "
"modules we have and exports their symbols for use in the library. They are "
"important when installing your application so that the executable being run "
"is able to find where the QML files for each module are, so they are "
"automatically added to the target."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:114
msgid "You can then just install the target as before."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:116
msgid ""
"Next time you need to add more QML files, remember to include them in this "
"file. C++ files that use the [QML_ELEMENT](https://doc.qt.io/qt-6/qtqml-"
"cppintegration-definetypes.html) keyword which we will see much later in the "
"tutorial can also be added here using `target_sources()`. You can logically "
"separate your code by creating more QML modules with different imports as "
"needed."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists/index.md:118
msgid "This setup will be useful when developing most Kirigami apps."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:0
msgid "Actions based components"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:0
msgid "Kirigami's Actions are used to add functionality to components.\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:10
#: content/docs/getting-started/kirigami/introduction-actions/index.md:16
msgid "Actions"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:12
msgid ""
"A [Kirigami.Action](docs:kirigami;org.kde.kirigami.Action) consists of a "
"clickable action whose appearance depends on where it is added. Typically it "
"is a button with an icon and text."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:14
msgid ""
"We can use these to provide our applications with easy-to-reach actions that "
"are essential to their functionality."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:18
msgid ""
"Kirigami Actions inherit from [QtQuick.Controls.Action](docs:qtquickcontrols;"
"QtQuick.Controls.Action) and can be assigned shortcuts."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:23
msgid ""
"Like [QtQuick Controls Actions](docs:qtquickcontrols;QtQuick.Controls."
"Action), they can be assigned to menu items and toolbar buttons, but also to "
"multiple other Kirigami components."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:42
msgid ""
"The [icon.name](https://doc.qt.io/qt-6/qml-qtquick-controls2-action."
"html#icon.name-prop) property takes names for system-wide icons following "
"the FreeDesktop specification. These icons and icon names can be viewed with "
"KDE's CuttleFish application which comes with [plasma-sdk](https://invent."
"kde.org/plasma/plasma-sdk), or by visiting [FreeDesktop's icon naming "
"specification](https://specifications.freedesktop.org/icon-naming-spec/icon-"
"naming-spec-latest.html)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:46
msgid ""
"One feature offered by Kirigami Actions on top of QtQuick Actions is the "
"possibility to nest actions."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:66
msgid ""
"Another feature of Kirigami Actions is to provide various hints to items "
"using actions about how they should display the action. These are primarily "
"handled by the [displayHint](https://api-staging.kde.org/qml-org-kde-"
"kirigami-action.html#displayHint-prop) and [displayComponent](https://api-"
"staging.kde.org/qml-org-kde-kirigami-action.html#displayComponent-prop) "
"properties."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:70
msgid ""
"These properties will be respected by the item if possible. For example, the "
"following action will be displayed as a [TextField](docs:qtquickcontrols;"
"QtQuick.Controls.TextField) with the item trying its best to keep itself "
"visible as long as possible."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:87
msgid "Using actions in other components"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:89
msgid ""
"As mentioned in the [introduction tutorial for actions](/docs/getting-"
"started/kirigami/introduction-actions), Kirigami Actions are [contextual](/"
"docs/getting-started/kirigami/introduction-actions#actions-are-contextual), "
"which means they show up in different places depending on where you put "
"them. In addition to that, they also have different representations for "
"desktop and mobile."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:91
#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:69
msgid "Page"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:93
msgid ""
"A [Kirigami.Page](docs:kirigami;org.kde.kirigami.Page) shows Actions on the "
"right of the top header in desktop mode, and on a footer in mobile mode."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:99
msgid "Page actions on the desktop"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:101
msgid "Page actions on a mobile device"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:105
#: content/docs/getting-started/kirigami/components-drawers/index.md:14
#: content/docs/getting-started/kirigami/introduction-actions/index.md:100
#: content/docs/getting-started/kirigami/introduction-actions/index.md:137
msgid "Global drawer"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:107
msgid ""
"The [Kirigami.GlobalDrawer](docs:kirigami;org.kde.kirigami.GlobalDrawer) is "
"a menu-like sidebar that provides an action based navigation to your "
"application. This is where nested actions are useful because it is possible "
"to create nested navigation:"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:146
msgid "Global Drawer actions on the desktop"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:150
msgid ""
"You can read more about Global Drawers in the [documentation page for "
"drawers](../components-drawers#globaldrawer)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:152
msgid "Context drawer"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:154
msgid ""
"A [Kirigami.ContextDrawer](docs:kirigami;org.kde.kirigami.ContextDrawer) "
"consists of an additional set of actions that are hidden behind a three-dots "
"menu on the top right in desktop mode or on the bottom right in mobile mode "
"if there is no space. It is used to display actions that are only relevant "
"to a specific page. You can read more about them in our [Kirigami Drawers](/"
"docs/getting-started/kirigami/components-drawers) tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:165
msgid "ActionTextFields"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:167
msgid ""
"A [Kirigami.ActionTextField](docs:kirigami;org.kde.kirigami.ActionTextField) "
"is used to add some contextual actions to a text field, for example to clear "
"the text, or to search for the text."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:186
msgid ""
"In this example, we are creating a \"clear\" button for a search field that "
"is only visible when text is entered."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:188
msgid "![Search field with text: \"I want ](searchfield.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:192
msgid ""
"You should rarely use an ActionTextField directly. [SearchField](docs:"
"kirigami;org.kde.kirigami.SearchField) and [PasswordField](docs:kirigami;org."
"kde.kirigami.PasswordField) both inherit from `ActionTextField` and are "
"likely to cover your desired use-case."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:196
msgid "SwipeListItem"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:198
msgid ""
"A [Kirigami.SwipeListItem](docs:kirigami;org.kde.kirigami.SwipeListItem) is "
"a delegate intended to support extra actions. When using a mouse, its "
"actions will always be shown. On a touch device, they can be shown by "
"dragging the item with the handle. In the following pictures, these are the "
"icons to the right."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:214
msgid "do something"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:221
msgid "SwipeListItem on a computer"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:223
msgid "SwipeListItem on a mobile device"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:225
msgid "ActionToolBar"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:227
msgid ""
"A [Kirigami.ActionToolBar](docs:kirigami;org.kde.kirigami.ActionToolBar) is "
"a toolbar built out of a list of actions. By default, each action that will "
"fit in the toolbar will be represented by a [ToolButton](docs:"
"qtquickcontrols;QtQuick.Controls.ToolButton), with those that do not fit "
"being moved into a menu at the end of the toolbar."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:230
msgid ""
"Like [ActionTextField](docs:kirigami;org.kde.kirigami.ActionTextField), you "
"may not need to use [ActionToolBar](docs:kirigami;org.kde.kirigami."
"ActionToolBar) directly as it is used by page headers and cards to provide "
"their action display."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:262
msgid "A horizontal toolbar being displayed at the top of the application"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:264
msgid ""
"You can read more about [ActionToolBar](docs:kirigami;org.kde.kirigami."
"ActionToolBar) components in their [dedicated documentation page](../"
"components-actiontoolbar/)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:266
#: content/docs/getting-started/kirigami/components-card/index.md:0
msgid "Cards"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:268
msgid ""
"A [Kirigami.Card](docs:kirigami;org.kde.kirigami.Card) is used to display a "
"collection of information or actions together. These actions can be added to "
"the `actions` group, similarly to previous components."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:304
msgid ""
"![Screenshot of a full-fledged Card with a banner background behind its "
"title, white background behind its text, and two actions with icons and a "
"hamburger menu at the bottom](card.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions/index.md:310
msgid ""
"For more information consult the [component page for Cards](../components-"
"card/)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:0
msgid "Action toolbars"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:0
msgid "Create your own customisable tool bars with the ActionToolBar component"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:10
msgid ""
"While Kirigami pages allow you to easily place a set of actions in the page "
"header, there are times when you might prefer to have something more "
"flexible."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:12
msgid ""
"Kirigami provides the component [Kirigami.ActionToolBar](docs:kirigami;org."
"kde.kirigami.ActionToolBar). It displays a list of [Kirigami.Action](docs:"
"kirigami;org.kde.kirigami.Action) objects and will display as many of them "
"as possible, providing an overflow menu for the ones that don't fit. The "
"ActionToolBar is dynamic and will move actions in and out of the overflow "
"menu depending on the size available to it."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:16
msgid ""
"This page assumes you are familiar with [Kirigami.Action](docs:kirigami;org."
"kde.kirigami.Action) objects. If you are not, you can learn all about them "
"in our beginner tutorial or in [the dedicated documentation page for them]"
"(../components-actions/)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:20
msgid "Creating our first ActionToolBar"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:22
msgid ""
"The layout and location of your [Kirigami.ActionToolBar](docs:kirigami;org."
"kde.kirigami.ActionToolBar) are really up to you, though for the sake of "
"user-friendliness it is usually a good idea to stick to UI conventions and "
"put your toolbar near the top or bottom of your page and to have it spread "
"width wise."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:24
msgid ""
"Like most other action-holding components, [Kirigami.ActionToolBar](docs:"
"kirigami;org.kde.kirigami.ActionToolBar) has an [actions](https://api-"
"staging.kde.org/qml-org-kde-kirigami-actiontoolbar.html#actions-prop) "
"property. We can assign an array of [Kirigami.Action](docs:kirigami;org.kde."
"kirigami.Action) components to this property."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:77
msgid "ActionToolBar with enough space for all children"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:79
msgid "ActionToolBar with overflow menu containing children"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:83
msgid "Alignment"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:85
msgid ""
"By default, actions in the [Kirigami.ActionToolBar](docs:kirigami;org.kde."
"kirigami.ActionToolBar) will be left aligned. This might not be desirable in "
"all situations. Thankfully we can change this with the [alignment](https://"
"api-staging.kde.org/qml-org-kde-kirigami-actiontoolbar.html#alignment-prop) "
"property. We can set this property to a range of values, but the three most "
"relevant ones are `Qt.AlignLeft`, `Qt.AlignCenter`, and `Qt.AlignRight` "
"(which deal with [horizontal alignment](docs:qtcore;Qt::Alignment))."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:131
#: content/docs/getting-started/kirigami/components-card/index.md:207
#: content/docs/getting-started/kirigami/components-controls/index.md:48
#: content/docs/getting-started/kirigami/components-controls/index.md:107
#: content/docs/getting-started/kirigami/components-controls/index.md:166
#: content/docs/getting-started/kirigami/components-controls/index.md:219
#: content/docs/getting-started/kirigami/components-controls/index.md:275
#: content/docs/getting-started/kirigami/components-controls/index.md:325
#: content/docs/getting-started/kirigami/components-controls/index.md:389
#: content/docs/getting-started/kirigami/components-controls/index.md:439
#: content/docs/getting-started/kirigami/components-controls/index.md:514
#: content/docs/getting-started/kirigami/components-dialogs/index.md:62
#: content/docs/getting-started/kirigami/components-dialogs/index.md:123
#: content/docs/getting-started/kirigami/components-dialogs/index.md:177
#: content/docs/getting-started/kirigami/components-dialogs/index.md:244
#: content/docs/getting-started/kirigami/components-dialogs/index.md:319
#: content/docs/getting-started/kirigami/components-drawers/index.md:65
#: content/docs/getting-started/kirigami/components-drawers/index.md:132
#: content/docs/getting-started/kirigami/components-progressbars/index.md:64
#: content/docs/getting-started/kirigami/introduction-actions/index.md:90
#: content/docs/getting-started/kirigami/style-colors/index.md:155
#: content/docs/getting-started/kirigami/style-typography/index.md:70
#: content/docs/getting-started/kirigami/style-typography/index.md:111
#: content/docs/getting-started/kirigami/style-typography/index.md:164
#: content/docs/getting-started/kirigami/style-typography/index.md:213
#: content/docs/getting-started/kirigami/style-typography/index.md:264
#: content/docs/getting-started/kirigami/style-typography/index.md:315
#: content/docs/getting-started/kirigami/style-typography/index.md:365
msgid "<br>\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar/index.md:133
msgid ""
"![ActionToolBar with children center-aligned](/docs/getting-started/kirigami/"
"components-actiontoolbar/ActionToolBar-aligned.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:0
msgid ""
"A card serves as an overview and entry point for more detailed information "
"and can offer direct access to the most important actions of an item.\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:11
msgid ""
"The Kirigami types [AbstractCard](docs:kirigami;org.kde.kirigami."
"AbstractCard) and [Card](docs:kirigami;org.kde.kirigami.Card) are used to "
"implement the popular card component used on many mobile and web platforms. "
"Cards can be used to display a collection of information or actions in an "
"attractive and distinctive way."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:13
msgid ""
"Kirigami also offers 3 kinds of [views](https://doc.qt.io/qt-6/qtquick-"
"modelviewsdata-modelview.html) and [positioners](https://doc.qt.io/qt-6/"
"qtquick-positioning-layouts.html) to aid you in presenting your cards with "
"beautiful and responsive layouts."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:15
msgid "AbstractCard"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:17
msgid ""
"A [Kirigami.AbstractCard](docs:kirigami;org.kde.kirigami.AbstractCard) is "
"the simplest type of card. It's just a rectangle with a shadow, which can "
"contain any [Item](docs:qtquick;QtQuick.Item) in it. It can also have Items "
"assigned to its [header](https://api-staging.kde.org/qml-org-kde-kirigami-"
"abstractcard.html#header-prop) or [footer](https://api-staging.kde.org/qml-"
"org-kde-kirigami-abstractcard.html#footer-prop) properties. In this case a "
"[Kirigami.Heading](docs:kirigami;org.kde.kirigami.Heading) is its `header` "
"and a [Controls.Label](docs:qtquickcontrols;QtQuick.Controls.Label) is the "
"card's [contentItem](https://doc.qt.io/Qt-6/qml-qtquick-controls-control."
"html#contentItem-prop)."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:41
msgid ""
"![Screenshot of an Abstract Card, a simple rectangular button with left-"
"aligned text](/docs/getting-started/kirigami/components-card/abstract-card."
"png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:48
msgid "Card"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:50
msgid ""
"A [Kirigami.Card](docs:kirigami;org.kde.kirigami.Card) inherits from "
"[AbstractCard](docs:kirigami;org.kde.kirigami.AbstractCard) and provides "
"more features out of the box. Cards inherit the same [header](https://api-"
"staging.kde.org/qml-org-kde-kirigami-abstractcard.html#header-prop) and "
"[footer](https://api-staging.kde.org/qml-org-kde-kirigami-abstractcard."
"html#footer-prop) from an Abstract Card, but you are encouraged to use a "
"[banner](https://api-staging.kde.org/qml-org-kde-kirigami-card.html#banner-"
"prop) and a set of [Kirigami.Action](docs:kirigami;org.kde.kirigami.Action) "
"in the `actions` group instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:72
msgid "The title can be positioned in the banner"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:87
msgid ""
"![Screenshot of a full-fledged Card with a banner background behind its "
"title, white background behind its text, and two actions with icons and a "
"hamburger menu at the bottom](/docs/getting-started/kirigami/components-card/"
"card1.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:93
msgid "CardsLayout"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:95
msgid ""
"A [Kirigami.CardsLayout](docs:kirigami;org.kde.kirigami.CardsLayout) is most "
"useful when the cards being presented are either not instantiated by a model "
"or are instantiated by a model that always has very few items. They are "
"presented as a grid of two columns which will remain centered if the "
"application is really wide, or become a single column if there is not enough "
"space for two columns, such as a mobile phone screen."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:99
msgid ""
"[`CardsListView`](docs:kirigami;org.kde.kirigami.CardsListView) is better "
"suited for larger models."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:103
msgid "Important"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:105
msgid ""
"A [CardsLayout](docs:kirigami;org.kde.kirigami.CardsLayout) should always be "
"contained within a [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-"
"columnlayout.html)."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:109
msgid ""
"A card can optionally be oriented horizontally. In this case it will be "
"wider than tall, and is better suited to being placed in a [ColumnLayout]"
"(https://doc.qt.io/qt-6/qml-qtquick-layouts-columnlayout.html). If you must "
"put it in a [CardsLayout](docs:kirigami;org.kde.kirigami.CardsLayout), it "
"will have a [maximumColumns](https://api-staging.kde.org/qml-org-kde-"
"kirigami-cardslayout.html#maximumColumns-prop) of `2` by default."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:145
msgid ""
"![Screenshot of a CardsLayout showing two side by side cards in portrait "
"orientation on top of a card in landscape orientation, all with different "
"components being used](/docs/getting-started/kirigami/components-card/"
"cardslayout.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:151
msgid "CardsListView"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:153
msgid ""
"A [Kirigami.CardsListView](docs:kirigami;org.kde.kirigami.CardsListView) is "
"a list view that can be used with [AbstractCard](docs:kirigami;org.kde."
"kirigami.AbstractCard) components."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:155
msgid ""
"A [CardsListView](docs:kirigami;org.kde.kirigami.CardsListView) will stretch "
"child cards to its own width. This component should therefore only be used "
"with cards which will look good at any horizontal size. Use of a [Card](docs:"
"kirigami;org.kde.kirigami.Card) component inside it is discouraged, unless "
"it has [Qt.Horizontal](docs:qtcore;Qt::Orientation) as its "
"[headerOrientation](https://api-staging.kde.org/qml-org-kde-kirigami-"
"abstractcard.html#headerOrientation-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:167
msgid "NOTE: never put a Layout as contentItem as it will cause binding loops"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:177
msgid "IMPORTANT: never put the bottom margin"
msgstr ""

#: content/docs/getting-started/kirigami/components-card/index.md:209
msgid ""
"![Screenshot of a CardsListView, which is a simple vertical list of cards in "
"landscape mode](/docs/getting-started/kirigami/components-card/cardslistview."
"png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:0
msgid "Chips"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:0
msgid "Chips are small elements typically used to list out related properties."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:9
msgid ""
"[Kirigami.Chip](docs:kirigami;org.kde.kirigami.Chip) components are small "
"elements inherited from [AbstractButton](https://doc.qt.io/qt-6/qml-qtquick-"
"controls2-abstractbutton.html) used for displaying common properties or "
"filters of something. These are typically text elements, which is also "
"interactable and comes with an optional delete button."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:14
msgid "![Example Chips in Kirigami Gallery](chips_kirigami_gallery.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:16
msgid "Quick Start"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:18
msgid ""
"Chips can easily be added using the `Kirigami.Chip` component. By assigning "
"a string to its `text` field, we give chips their name."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:55
msgid "![Declaring and Displaying Chips](chips_usage.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:57
msgid "{{< /section-right >}} {{< /sections >}}"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:60
msgid "With Repeaters (Recommended)"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:62
msgid ""
"Since chips are meant to be used more than once, you'll likely want to use "
"some kind of list data structure and iterate over them to display the chips. "
"To do this, we need a [ListModel](https://doc.qt.io/qt-6/qml-qtqml-models-"
"listmodel.html) and a [Repeater](https://doc.qt.io/qt-6/qml-qtquick-repeater."
"html) component."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:69
msgid ""
"The ListModel is used as storage for the chips. To populate the ListModel "
"(and therefore chips), we declare a couple of ListElement components, which "
"contains a field known as `text`. We can use this string assigned from here "
"to the `text` field for each repeated chip."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:74
msgid ""
"The Repeater is used for displaying the chips. First, we need to set the "
"`model` field of the Repeater to our ListModel, or create the ListModel "
"inside of repeater. Then, we declare the `Kirigami.Chip` component inside of "
"the Repeater, and assign its `text` field with the element's data using the "
"`modelData` property."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:114
msgid ""
"You can dynamically append and remove data from the ListModel, and the "
"Repeater will automatically make those changes. However, simply changing a "
"specific item from either the Repeater or ListModel does not affect the "
"other, and requires the changing of both, unless something like "
"[QAbstractListModel](https://doc.qt.io/qt-6/qabstractlistmodel.html) is "
"used. See [Example Application](#example-application) for more information."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:123
msgid "Example Application"
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:125
msgid ""
"The example application below showcases how chips can be used in programs "
"such as to-do lists."
msgstr ""

#: content/docs/getting-started/kirigami/components-chips/index.md:130
msgid "![Chips Example Application](chips_example_app.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:0
msgid "Controls and interactive elements"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:0
msgid ""
"Make your apps more interactive by using buttons, selection controls, "
"sliders, and text fields."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:11
msgid ""
"Kirigami makes use of a wide selection of different interactive elements "
"from Qt that you can use in your applications. Each different type has "
"slightly different interaction styles, visual styles, and functionality. "
"Using the right type of control in your application can help make your user "
"interface more responsive and intuitive."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:13
msgid "Buttons"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:15
msgid ""
"In Kirigami apps, we use buttons from QtQuick Controls. Using them is pretty "
"straightforward: we set the text to the [text](https://doc.qt.io/qt-6/qml-"
"qtquick-controls2-abstractbutton.html#text-prop) property and any action we "
"want it to perform is set to the [onClicked](docs:qtquickcontrols;QtQuick."
"Controls.AbstractButton::clicked) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:50
msgid ""
"![A window containing a button \"Beep\" in the center, which when clicked "
"shows a passive notification \"Boop\" at the bottom of the window](/docs/"
"getting-started/kirigami/components-controls/controls-button.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:56
msgid "Toggleable buttons"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:58
msgid ""
"The behavior of buttons can be changed to make them toggleable: in this "
"mode, they will stay pressed until clicked on once more. This mode can be "
"activated by setting their [checkable](https://doc.qt.io/qt-6/qml-qtquick-"
"controls2-abstractbutton.html#checkable-prop) property to `true`; we can "
"also set buttons to be toggled on by default by setting [checked](https://"
"doc.qt.io/qt-6/qml-qtquick-controls2-abstractbutton.html#checked-prop) to "
"`true`."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:60
msgid ""
"We can get the most out of toggleable buttons by using the "
"`onCheckedChanged` signal handler which is [automatically generated](https://"
"doc.qt.io/qt-6/qtqml-syntax-signals.html#property-change-signal-handlers) "
"from the [checked](https://doc.qt.io/qt-6/qml-qtquick-controls2-"
"abstractbutton.html#checked-prop) signal. It works similarly to `onClicked`, "
"except here the assigned action will be executed when the button's state "
"changes. It is a boolean property, which can come in handy for specific use "
"cases."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:62
msgid ""
"In this example, we set the visibility of an inline drawer according to the "
"status of a toggleable button:"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:109
msgid ""
"![A window containing a toggleable button \"Hide inline drawer\" in the "
"center which when toggled hides the \"Peekaboo\" inline drawer](/docs/"
"getting-started/kirigami/components-controls/controls-togglebutton.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:117
msgid ""
"With the default Breeze theme in KDE Plasma it can be hard to tell whether a "
"button is toggled, since buttons are coloured blue when they are clicked on. "
"Make sure you take this into account when creating your application: a "
"different control might be more user friendly."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:121
msgid "Toolbar buttons"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:123
msgid ""
"There is a specific button type meant for use in toolbars, [Controls."
"ToolButton](docs:qtquickcontrols;QtQuick.Controls.ToolButton). The most "
"obvious difference between this and a conventional [Button](docs:"
"qtquickcontrols;QtQuick.Controls.Button) is the styling, with toolbuttons "
"being flat (though this is alterable with the boolean property [flat]"
"(https://doc.qt.io/qt-6/qml-qtquick-controls2-button.html#flat-prop))."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:168
msgid ""
"![A window showing a custom toolbar in the window header simulating a "
"Kirigami.globalToolBar, with a left menu icon that shows a passive "
"notification \"Kirigami Pages and Actions are better!\" and a right "
"toolbutton \"Beep\" which is completely flat simulating a Kirigami.Action](/"
"docs/getting-started/kirigami/components-controls/controls-toolbutton.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:174
msgid "Selection controls"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:176
msgid ""
"Selection controls let users make a choice or pick an option. There are "
"different types that are best suited to different situations."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:178
msgid "Checkboxes"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:180
msgid ""
"A [Controls.CheckBox](docs:qtquickcontrols;QtQuick.Controls.CheckBox) is "
"meant for options where the choices are non-exclusive and where each option "
"has a clear alternative."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:221
msgid ""
"![A window showing two checkboxes where more than one checkbox can be ticked "
"at the same time](/docs/getting-started/kirigami/components-controls/"
"controls-checkbox.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:227
msgid ""
"As you can see, they are simple to use. The [checked](https://doc.qt.io/qt-6/"
"qml-qtquick-controls2-abstractbutton.html#checked-prop) property holds a "
"boolean value determining whether or not they have been checked."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:229
msgid "Radio buttons"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:231
msgid ""
"A [Controls.RadioButton](docs:qtquickcontrols;QtQuick.Controls.RadioButton) "
"is designed for situations where the user must choose one option from a set "
"of several options."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:233
msgid ""
"Radio buttons are exclusive by default: only one button can be checked in "
"the same parent item."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:235
msgid ""
"Like checkboxes, they can be set to be checked or unchecked by default with "
"the [checked](https://doc.qt.io/qt-6/qml-qtquick-controls2-abstractbutton."
"html#checked-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:277
msgid ""
"![A window showing two radio buttons where only one radio button can be "
"ticked at the same time](/docs/getting-started/kirigami/components-controls/"
"controls-radiobutton.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:283
msgid "Switches"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:285
msgid ""
"On the desktop, changing settings usually involves changing the setting and "
"then applying it by clicking on an \"Apply\" or \"OK\" button. On mobile, we "
"can use a [Controls.Switch](docs:qtquickcontrols;QtQuick.Controls.Switch) "
"instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:287
msgid ""
"Switches can be toggled between an on and off state. They can be toggled by "
"clicking or tapping on them, or they can be dragged towards the on or off "
"position. Once again, switches can be set to be on or off by default with "
"the [checked](https://doc.qt.io/qt-6/qml-qtquick-controls2-abstractbutton."
"html#checked-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:327
msgid ""
"![A window showing two evenly-spaced switches that function as toggles](/"
"docs/getting-started/kirigami/components-controls/controls-switch.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:333
msgid "Sliders"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:335
msgid ""
"Sliders allow users to select certain values by sliding a handle along a "
"track. There are several types that you can choose from depending on the "
"values you'd like your users to choose in your application."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:337
msgid "Standard and tickmarked sliders"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:339
msgid ""
"A standard [Controls.Slider](docs:qtquickcontrols;QtQuick.Controls.Slider) "
"provides the user with very fine control over the selection they wish to "
"make."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:341
msgid ""
"In Left to Right mode, sliders go left to right to increase when in "
"horizontal orientation, while in Right to Left mode they go in the reverse "
"direction. In both modes, sliders in vertical orientation go from the bottom "
"up."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:343
msgid ""
"The coloration provides a visual indicator of how large the value you are "
"selecting is."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:345
msgid "Sliders have a few important properties we must pay attention to:"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:347
msgid ""
"[value](https://doc.qt.io/qt-6/qml-qtquick-controls2-slider.html#value-"
"prop): contains the value at which the handle is placed, and can also be set "
"manually to provide a default starting value"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:348
msgid ""
"[to](https://doc.qt.io/qt-6/qml-qtquick-controls2-slider.html#to-prop): "
"defines the range of the slider by specifying the maximum value it can go to"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:349
msgid ""
"[orientation](https://doc.qt.io/qt-6/qml-qtquick-controls2-slider."
"html#orientation-prop): allows the slider to be set to a vertical "
"orientation with [Qt.Vertical](https://doc.qt.io/qt-6/qt.html#Orientation-"
"enum)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:391
msgid ""
"![A window showing a vertical slider with its current value underneath it](/"
"docs/getting-started/kirigami/components-controls/controls-slider.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:397
msgid ""
"Another useful property we can use is [stepSize](https://doc.qt.io/qt-6/qml-"
"qtquick-controls2-slider.html#stepSize-prop). Setting this to a numerical "
"value allows us to create a slider that snaps onto values that are multiples "
"of the specified `stepSize`, with these multiples being indicated by "
"tickmarks. Therefore if we set this property to `2.0`, when the user drags "
"the slider handle, they will only be able to select `0.0`, `2.0`, `4.0`, "
"etc. up to the value specified in the `to` property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:441
msgid ""
"![A window showing a set of tickmarked sliders that are symmetrically "
"divided, with each division being called a step](/docs/getting-started/"
"kirigami/components-controls/controls-slidersteps.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:447
msgid "Range sliders"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:449
msgid ""
"QtQuick Controls also provides [Controls.RangeSliders](docs:qtquickcontrols;"
"QtQuick.Controls.RangeSlider). These have two handles, hence allowing you to "
"define a range of numbers between the two handles."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:451
msgid ""
"Two new properties are important to keep in mind: [first.value](https://doc."
"qt.io/qt-6/qml-qtquick-controls2-rangeslider.html#first-prop) and [second."
"value](https://doc.qt.io/qt-6/qml-qtquick-controls2-rangeslider.html#second-"
"prop), which hold the values of the two handles. Like the [value](https://"
"doc.qt.io/qt-6/qml-qtquick-controls2-slider.html#value-prop) property of the "
"standard sliders, these can be pre-set."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls/index.md:516
msgid ""
"![A window showing a range slider, followed by a few labels underneath and a "
"button with a checkmark icon](/docs/getting-started/kirigami/components-"
"controls/controls-rangeslider.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:0
msgid "Dialog types"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:0
msgid "Various ways to serve and input data."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:10
msgid ""
"A [Kirigami.Dialog](docs:kirigami;org.kde.kirigami.dialogs.Dialog) is a "
"simple component that you can use to supplement the content being displayed "
"on an application's page. It can display non-interactive content (only text) "
"and interactive content (forms, listviews and buttons)."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:12
msgid ""
"They can be dismissed by clicking or tapping outside of their area or by "
"clicking the close button on the header."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:14
msgid "Dialog"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:16
msgid ""
"A standard Kirigami.Dialog is used to create custom dialogs. They are very "
"easy to extend:"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:64
msgid "![Simple dialog containing only text](dialog.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:70
msgid ""
"As shown in the [introduction tutorial about dialogs](/docs/getting-started/"
"kirigami/introduction-dialogs), it is also possible to capture a "
"`standardButton(button)` to assign some behavior to it, like a binding to "
"enable it only under certain conditions."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:72
msgid ""
"This type of dialog is generic and applies to most use cases, and it works "
"well with complex interactive content (especially views):"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:101
msgid "hints for the dialog dimensions"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:125
msgid "![A simple scrollable dialog](scrollabledialog.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:131
msgid ""
"In most cases however you will likely want to use one of its derived dialog "
"types, [Kirigami.PromptDialog](docs:kirigami;org.kde.kirigami.dialogs."
"PromptDialog) or [Kirigami.MenuDialog](docs:;org.kde.kirigami.dialogs."
"MenuDialog)."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:133
msgid "PromptDialog"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:135
msgid ""
"A [Kirigami.PromptDialog](docs:kirigami;org.kde.kirigami.dialogs."
"PromptDialog) is essentially a dialog with a built-in label and default "
"[contentPadding](https://api-staging.kde.org/qml-org-kde-kirigami-dialogs-"
"promptdialog.html#contentPadding-prop) that is used to prompt the user for "
"some information. This type of dialog is supposed to be used only for simple "
"yes/no prompts or brief requests for user input."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:137
msgid ""
"Its main property is [Kirigami.Dialog.subtitle](https://api-staging.kde.org/"
"qml-org-kde-kirigami-dialogs-promptdialog.html#subtitle-prop), to which you "
"would add text. If any QML component is added as a child of the prompt "
"dialog, that component will take the place of the subtitle instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:179
msgid "![A simple prompt dialog containing only text](promptdialog.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:246
msgid "![A PromptDialog with a custom TextField](promptdialogtextfield.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:252
msgid "MenuDialog"
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:254
msgid ""
"The [Kirigami.MenuDialog](docs:kirigami;org.kde.kirigami.dialogs.MenuDialog) "
"is a specialized dialog that is used to list a selection of clickable "
"options for the user using its [actions](https://api-staging.kde.org/qml-org-"
"kde-kirigami-dialogs-menudialog.html#actions-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-dialogs/index.md:321
msgid ""
"![A simple MenuDialog listing actions like Play and Pause for media]"
"(menudialog.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:0
msgid "Drawers"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:0
msgid ""
"Drawers provide applications with quick access to controls and pages of your "
"application."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:10
msgid ""
"Drawers are panels that slide out of the sides of the application window. "
"They can be populated with interactive elements such as Kirigami Actions, "
"buttons, text, and more."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:12
msgid ""
"Drawers come in different types, shapes, and forms. In this page we will go "
"over each type and provide an overview of their characteristics."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:16
msgid ""
"The global drawer is a standard feature in KDE's mobile applications and can "
"sometimes be found in their desktop incarnations too. It contains an "
"application's main menu: included here are any functions that are not "
"specific to the current page but still significant to general navigation or "
"interaction within the application."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:18
msgid ""
"It can be activated by tapping the hamburger menu or by swiping from the "
"left edge to the middle of the screen in Left to Right mode or from the "
"right edge in Right to Left mode."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:20
msgid ""
"[Kirigami.GlobalDrawer](docs:kirigami;org.kde.kirigami.GlobalDrawer) "
"components are what we use to create such drawers. These are set to the "
"[globalDrawer](https://api-staging.kde.org/qml-org-kde-kirigami-"
"abstractapplicationwindow.html#globalDrawer-prop) property of the [Kirigami."
"ApplicationWindow](docs:kirigami;org.kde.kirigami.ApplicationWindow) that "
"forms the basis of our Kirigami application."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:67
msgid ""
"![Screenshot of a global drawer in desktop mode that looks like a sidebar](/"
"docs/getting-started/kirigami/components-drawers/globaldrawer_simple.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:75
msgid ""
"The [titleIcon](https://api-staging.kde.org/qml-org-kde-kirigami-"
"globaldrawer.html#titleIcon-prop) property takes names for system-wide icons "
"according to the FreeDesktop specification. These icons and icon names can "
"be viewed with KDE's CuttleFish application which comes with [plasma-sdk]"
"(https://invent.kde.org/plasma/plasma-sdk), or by visiting [FreeDesktop's "
"icon naming specification](https://specifications.freedesktop.org/icon-"
"naming-spec/icon-naming-spec-latest.html)."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:79
msgid "Header"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:81
msgid ""
"Headers can be used to place sticky components at the top of your global "
"drawer. Header components will stay in place even if your global drawer "
"contains nested Kirigami actions that replace the current layer on the "
"global drawer."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:83
msgid ""
"Your chosen header component can be set with the global drawer's `header` "
"property, and it will replace the global drawer's title. This is useful to "
"add a `Kirigami.SearchField`, for example:"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:134
msgid ""
"Our global drawer now shows the search bar component we set as the header"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:141
msgid "Adapting for the desktop"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:143
msgid ""
"While panel-style global drawers can be useful in mobile environments, they "
"might be too large on the desktop, especially when the application has few "
"actions."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:145
msgid ""
"Thankfully, Kirigami global drawers provide an [isMenu](https://api-staging."
"kde.org/qml-org-kde-kirigami-globaldrawer.html#isMenu-prop) property. When "
"set to `true`, they turn into more traditional menus only on the desktop."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:149
msgid "In this menu mode, headers and banners are not visible."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:162
msgid "Kirigami Actions here..."
msgstr "Kirigami Eylemleri burada..."

#: content/docs/getting-started/kirigami/components-drawers/index.md:171
msgid "Global drawer in menu mode, without a header or banner"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:177
msgid "Context Drawers"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:179
msgid ""
"While a [Kirigami.GlobalDrawer](docs:kirigami;org.kde.kirigami.GlobalDrawer) "
"displays global actions available throughout your application, a [Kirigami."
"ContextDrawer](docs:kirigami;org.kde.kirigami.ContextDrawer) should be used "
"to display actions that are only relevant in certain contexts. This is "
"usually used in separate [pages](/docs/getting-started/kirigami/introduction-"
"pages)."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:181
msgid "<!-- TODO: mention actions -->\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:183
msgid ""
"A context drawer will behave differently depending on whether it is being "
"used on a mobile platform or on a desktop."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:185
msgid ""
"On a desktop, when a window has enough space, contextual actions show up as "
"part of the `actions` group in the top toolbar. When space is limited, such "
"as on a mobile device or in a narrow window, contextual actions are hidden "
"behind a hamburger menu on the right side. This is different from other "
"actions in the `actions` group, namely `actions.main`, `actions.left` and "
"`actions.right`; these do not get hidden in space-constrained windows, and "
"are instead collapsed into their respective icons."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:191
msgid "Context drawer with contextual actions hidden"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:193
msgid "Context drawer showing all contextual actions"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:197
msgid ""
"On mobile, the drawer always consists of actions hidden behind a hamburger "
"menu. It can be activated by tapping the hamburger menu or by swiping from "
"the right edge to the middle of the screen in Left to Right mode or from the "
"left edge in Right to Left mode."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:201
msgid "Same example above, running in mobile mode"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:203
msgid "Context drawer open in mobile mode"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:207
msgid "Modal and Inline drawers"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:209
msgid ""
"Kirigami offers two additional types of drawers, modal drawers and inline "
"drawers. They are quite similar to each other: both span the entirety of the "
"application's width or height and can be placed on the edges of the app "
"window. However, they do react differently to user interaction."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:211
msgid ""
"Modal drawers are hidden by default and darken the rest of the application, "
"being dismissed when clicking on a darkened area."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:212
msgid ""
"Inline drawers are shown by default and allow the user to still interact "
"with the rest of the application without being dismissed, and do not darken "
"other areas."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:214
msgid ""
"This kind of drawer is open ended and flexible, but generally, you may want "
"to use this kind of drawer when you want a small list of options to appear "
"on a long press or right click."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:216
msgid ""
"These two drawers are so similar because they can, in fact, be implemented "
"using the same Kirigami component: [Kirigami.OverlayDrawer](docs:kirigami;"
"org.kde.kirigami.OverlayDrawer). Here are a few important inherited "
"properties of this component to keep in mind:"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:218
msgid ""
"[Popup.modal](https://doc.qt.io/qt-6/qml-qtquick-controls2-popup.html#modal-"
"prop) controls whether the drawer will be modal or inline depending on a "
"boolean value."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:219
msgid ""
"[Drawer.edge](https://doc.qt.io/qt-6/qml-qtquick-controls2-drawer.html#edge-"
"prop) controls which edge of the application window the drawer will appear "
"on; options for this property are part of the [Edge enum](docs:qtcore;Qt::"
"RightEdge), namely `Qt.TopEdge`, `Qt.RightEdge`, `Qt.BottomEdge`, and `Qt."
"LeftEdge`."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:220
msgid ""
"[Popup.contentItem](https://doc.qt.io/qt-6/qml-qtquick-controls2-popup."
"html#contentItem-prop) contains the component that will form the content of "
"your drawer."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:243
msgid "Set modal to false to make this drawer inline!"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:264
msgid "Modal drawer not visible"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers/index.md:266
msgid "Modal drawer at the bottom edge of the screen"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:0
msgid "Form layouts"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:0
msgid "Easily create attractive interaction areas with Kirigami FormLayouts"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:10
msgid ""
"[Kirigami.FormLayout](docs:kirigami;org.kde.kirigami.layouts.FormLayout) "
"components make it easy for you to create forms that conform to the [KDE "
"Human Interface Guidelines](https://develop.kde.org/hig/). They are optimal "
"for settings dialogs and for large groups of controls and input fields that "
"are related to each other."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:12
msgid ""
"When provided with enough space, form layouts will take up two columns. The "
"column on the left will be occupied by the labels provided for the form's "
"children components, while the right will be taken up by the children "
"components themselves. In more space-constrained windows (or on mobile), "
"forms will consist of a single vertical column with the labels of children "
"components being placed above their respective component."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:14
msgid "Simple form"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:16
msgid ""
"[Kirigami.FormLayout](docs:kirigami;org.kde.kirigami.layouts.FormLayout) "
"components are similar in use to [QtQuick Layout](https://doc.qt.io/qt-6/"
"qtquicklayouts-index.html) components such as [ColumnLayout](https://doc.qt."
"io/qt-6/qml-qtquick-layouts-columnlayout.html) or [RowLayout](https://doc.qt."
"io/qt-6/qml-qtquick-layouts-rowlayout.html). The child components will be "
"automatically arranged according to the size available to the form layout."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:18
msgid ""
"Children of a [Kirigami.FormLayout](docs:kirigami;org.kde.kirigami.layouts."
"FormLayout) have a property named [Kirigami.FormData.label](https://api-"
"staging.kde.org/qml-org-kde-kirigami-layouts-formdata.html#label-attached-"
"prop). This property lets you set the label that will be provided for the "
"child component in question."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:54
msgid "A simple form layout in desktop mode"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:60
msgid "Sections and separators"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:62
msgid ""
"FormLayouts can also be divided into sections. Setting where a section "
"starts is as easy as setting a child component's [Kirigami.FormData."
"isSection](https://api-staging.kde.org/qml-org-kde-kirigami-layouts-formdata."
"html#isSection-attached-prop) to true. This will provide the component with "
"some extra margin at the top to demarcate the start of the new section."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:64
msgid ""
"[Kirigami.Separator](docs:kirigami;org.kde.kirigami.primitives.Separator) "
"components are best suited for starting new sections. Separators are used to "
"draw a thin horizontal line, demarcating the end of a section. If you would "
"rather not have a line drawn between sections, you can use a standard QML "
"[Item](docs:qtquick;QtQuick.Item) property. Alternatively you could use the "
"[Kirigami.FormData.isSection](https://api-staging.kde.org/qml-org-kde-"
"kirigami-layouts-formdata.html#isSection-attached-prop) property on any "
"other component."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:66
msgid ""
"However, this is not recommended. On components where [Kirigami.FormData."
"isSection](https://api-staging.kde.org/qml-org-kde-kirigami-layouts-formdata."
"html#isSection-attached-prop) is set to `true`, the label text provided for "
"this component's [Kirigami.FormData.label](https://api-staging.kde.org/qml-"
"org-kde-kirigami-layouts-formdata.html#label-attached-prop) property will be "
"displayed as the section's header text."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:68
#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:28
msgid "Warning"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:70
msgid ""
"This does not apply to every component, hence the recommendation that you "
"use [Kirigami.Separator](docs:kirigami;org.kde.kirigami.primitives."
"Separator) or [Item](docs:qtquick;QtQuick.Item) components in places where "
"you would like to use a header text."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:74
msgid ""
"This header text is larger than the normal label text, and provides users "
"with a nice visual cue of what the form layout section is about."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:130
msgid "A form layout with sections"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:137
msgid "Checkable children"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:139
msgid ""
"A handy feature of [Kirigami.FormLayout](docs:kirigami;org.kde.kirigami."
"layouts.FormLayout) is that you can add checkboxes to its children. This can "
"be useful in settings pages where you might want to let the user enable or "
"disable a setting, and also want the user to provide some extra information "
"in a component such as a textfield."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:167
msgid "A form layout with checkable label."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:173
msgid "Forcing a desktop or mobile layout"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:175
msgid ""
"If you would rather have your form layout stay consistent regardless of your "
"application's environment, you can use the [wideMode](https://api-staging."
"kde.org/qml-org-kde-kirigami-layouts-formlayout.html#wideMode-prop) property "
"of the [Kirigami.FormLayout](docs:kirigami;org.kde.kirigami.layouts."
"FormLayout) component:"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:177
msgid ""
"When set to `true`, the form layout will be structured in a desktop-"
"optimized widescreen (double-column) layout"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:178
msgid ""
"When set to `false`, the form layout will be structured in a mobile layout "
"(single column)"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:205
msgid "A form layout with forced mobile layout"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:211
msgid "Aligning your labels"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:213
msgid ""
"There are instances when you want a label to be assigned to components that "
"have more than one line or to a list of components. This can be achieved by "
"putting the [Kirigami.FormData.label](https://api-staging.kde.org/qml-org-"
"kde-kirigami-layouts-formdata.html#label-attached-prop) in the [ColumnLayout]"
"(https://doc.qt.io/qt-6/qml-qtquick-layouts-columnlayout.html), as you might "
"have noticed in [Sections and Separators](#sections-and-separators). By "
"default the label is positioned in the vertical center of the layout, which "
"is not always desirable. We can change this with help of [Kirigami.FormData."
"labelAlignment](https://api-staging.kde.org/qml-org-kde-kirigami-layouts-"
"formdata.html#labelAlignment-attached-prop)."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:239
msgid "A form layout with top-aligned label"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:245
msgid ""
"Setting the label alignment is particularly convenient to manage components "
"or lists of components whose size you do not know beforehand. [Elisa]"
"(https://apps.kde.org/elisa) is a very good example of this:"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:247
msgid ""
"The Comment label is only top aligned when its corresponding component has "
"more than one line"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts/index.md:249
msgid "We can do something similar to this with a JavaScript ternary operator:"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:0
msgid "Inline messages"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:0
msgid "Display messages related to the content in your application"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:10
msgid ""
"Inline messages provide an immediate way for you to notify your users about "
"something that happened while using the application."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:12
msgid "Basic inline message"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:14
msgid ""
"[Kirigami.InlineMessage](docs:kirigami;org.kde.kirigami.InlineMessage) "
"components have two important properties to be mindful of:"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:15
msgid ""
"[visible](https://doc.qt.io/qt-6/qml-qtquick-item.html#visible-prop): by "
"default this is set to false, so that the message only appears when you "
"explicitly want it to. This can be overridden if you wish by setting it to "
"true. When a hidden inline message is set to be visible, you get a nice "
"animation."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:16
msgid ""
"[text](https://api-staging.kde.org/qml-org-kde-kirigami-inlinemessage."
"html#text-prop): here is where you set the text of your inline message."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:49
msgid ""
"![A window showing a button which when clicked makes an inline message with "
"light blue background pop up with text above it, near the top of the "
"application](/docs/getting-started/kirigami/components-inlinemessages/"
"inlinemessages-simple.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:55
msgid "Different types"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:57
msgid ""
"Standard inline messages are like the ones above: they have a blue "
"background and a default icon. We can change that with the [type](https://"
"api-staging.kde.org/qml-org-kde-kirigami-inlinemessage.html#type-prop) "
"property, which lets us set our inline message to a different type. There "
"are four types we can choose from:"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:59
msgid ""
"**Information** (`Kirigami.MessageType.Information`): the default. Has a "
"blue background, an 'i' icon, and is used to announce a result or tell the "
"user something general. It is not necessary to manually set it."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:60
msgid ""
"**Positive** (`Kirigami.MessageType.Positive`): has a green background, tick "
"icon, and indicates that something went well."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:61
msgid ""
"**Warning** (`Kirigami.MessageType.Warning`): has an orange background, an "
"exclamation-mark icon, and can be used to warn the user about something they "
"should be mindful of."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:62
msgid ""
"**Error** (`Kirigami.MessageType.Error`): has a red background, a cross "
"icon, and can be used to tell the user that something has gone wrong."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:105
msgid ""
"![A window showcasing all four inline message types in blue, green, orange "
"and red](/docs/getting-started/kirigami/components-inlinemessages/"
"inlinemessages-types.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:111
msgid "Customising text and icons"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:113
msgid ""
"Inline messages support rich text, which can be defined with simple HTML-"
"like markup. This allows you to add some formatting to your inline message's "
"text or even include an external web link if you want to."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:122
msgid "Note that when you use quotes in a string you will have to escape them!"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:133
msgid ""
"![An inline message with rich text and a hyperlink](/docs/getting-started/"
"kirigami/components-inlinemessages/inlinemessages-richtext.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:139
msgid ""
"You can also customise the icon that appears on the top left of your message "
"by providing a system icon name for the [icon.source](https://api-staging."
"kde.org/qml-org-kde-kirigami-inlinemessage.html#icon.source-prop) property. "
"These icon names should correspond to icons installed on your system; you "
"can use an application such as Cuttlefish provided by [plasma-sdk](https://"
"invent.kde.org/plasma/plasma-sdk) to browse and search the icons available "
"on your system, and see what their names are."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:158
msgid ""
"![An inline message with a custom icon](/docs/getting-started/kirigami/"
"components-inlinemessages/inlinemessages-icon.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:164
msgid "Using actions in inline messages"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:166
msgid ""
"If your messages need to be interactive, you can attach Kirigami actions to "
"your inline messages. Like with pages, you can do this by setting the "
"[InlineMessage.actions](https://api-staging.kde.org/qml-org-kde-kirigami-"
"inlinemessage.html#actions-prop) property to either a [Kirigami.Action](docs:"
"kirigami;org.kde.kirigami.Action) or an array containing [Kirigami.Action]"
"(docs:kirigami;org.kde.kirigami.Action) components."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:207
msgid ""
"![An inline message with two actions](/docs/getting-started/kirigami/"
"components-inlinemessages/inlinemessages-actions.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:213
msgid "Close buttons"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:215
msgid ""
"Inline messages provide a close button that can be used to easily dismiss "
"them."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:217
msgid ""
"By default, this close button is hidden, but this can be overridden by "
"setting the [showCloseButton](https://api-staging.kde.org/qml-org-kde-"
"kirigami-inlinemessage.html#showCloseButton-prop) property to `true`."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages/index.md:236
msgid ""
"![An inline message with close button to its right side](/docs/getting-"
"started/kirigami/components-inlinemessages/inlinemessages-closebutton.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:0
msgid "List views"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:0
msgid "A list view can help you easily display many components dynamically.\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:11
msgid ""
"[Listviews](docs:qtquick;QtQuick.ListView) can help you display objects from "
"a model in an attractive way. To use a list view, you have to keep track of "
"three things:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:13
msgid ""
"The **model**, which contains the data you want your list view to display"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:14
msgid ""
"The **delegate**, which defines how each element in the model will be "
"displayed"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:15
msgid ""
"The **list view** itself, which will display information from the model "
"according to the delegate"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:17
msgid ""
"If you would like further clarification, the Qt documentation has [an "
"informative page](https://doc.qt.io/qt-6/qtquick-modelviewsdata-modelview."
"html) on the topic."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:19
msgid "Essentials of models and views"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:21
msgid "A list view has two essential properties we must pay attention to:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:23
msgid ""
"[model](https://doc.qt.io/qt-6/qml-qtquick-listview.html#model-prop), which "
"accepts the data or the `id` of the object that holds the data"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:24
msgid ""
"[delegate](https://doc.qt.io/qt-6/qml-qtquick-listview.html#delegate-prop), "
"which accepts the component we will use to display the data in the model"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:26
msgid ""
"The model is not visible, as it only contains data. Typically the delegate "
"will be wrapped in a Component so that it is reusable: it serves as a "
"blueprint for how to instantiate each delegate."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:28
msgid ""
"Here is an example that contains exactly one list view, one model and one "
"delegate, using a [Kirigami.SubtitleDelegate](docs:kirigami;org.kde.kirigami."
"delegates.SubtitleDelegate):"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:62
msgid "And the exact same example, inline:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:92
msgid "Understanding models"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:94
msgid ""
"The model contains the data that will be used to populate the list view. "
"Different ways to use models have different ways to access the data:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:96
msgid "WAY TO USE"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:96
msgid "HOW TO ACCESS"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:96
msgid "WHEN TO USE"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:98
msgid "Qt models with more than one role"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:98
msgid "model.index, model.somerole"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:98
msgid "In most cases"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:99
msgid "Qt models with one role"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:99
msgid "model.index, model.somerole, model.modelData"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:99
msgid "In most cases, for prototyping"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:100
msgid "JavaScript array model"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:100
#: content/docs/getting-started/kirigami/components-listview/index.md:101
msgid "model.index, model.modelData"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:100
#: content/docs/getting-started/kirigami/components-listview/index.md:101
msgid "For prototyping"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:101
msgid "Integer model"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:103
msgid ""
"You can read about [other ways to use models in the Qt documentation]"
"(https://doc.qt.io/qt-6/qtquick-modelviewsdata-modelview.html)."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:105
msgid ""
"In the table above, \"Qt models\" refers to both C++-specific models like "
"[QAbstractListModel](https://doc.qt.io/qt-6/qabstractlistmodel.html) and QML-"
"specific models like ListModel. This tutorial page will only focus on QML-"
"specific models. Farther ahead we provide a tutorial for [Connecting C++ "
"models to QML using QAbstractListModel](/docs/getting-started/kirigami/"
"advanced-connect_models)."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:107
msgid ""
"The `model.index` property is made available to every model and contains the "
"index (the position) of each delegate. It can be shortened to `index` for "
"convenience."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:109
msgid ""
"The `model.somerole` property mentioned above is just a placeholder, it is "
"not a specific property that comes from QML: `somerole` can be any role that "
"is defined by the model. In the first code example of this page shown above "
"the table, the `plasmaProductsModel` model has the `product` and `target` "
"roles, which can be accessed with `model.product` and `model.target`, "
"respectively."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:111
msgid ""
"Just as `model.index` can be shortened to `index`, each `model.somerole` "
"property can be shorted to just `somerole` (like `product`) for convenience, "
"but it is recommended that they be turned into required properties:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:148
msgid ""
"Additionally, if the model contains only one role or has no role at all, its "
"data can also be accessed with the property `model.modelData`, which can "
"also be shortened to `modelData` (and as such would also need to be a "
"required property):"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:179
msgid "This matches model.software"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:186
msgid ""
"For comparison, here is how the above code would look like with a "
"[JavaScript array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/"
"Reference/Global_Objects/Array), with no role:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:215
msgid ""
"Using an integer for the model can be useful for very specific cases, namely "
"prototyping and tests:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:244
msgid "Understanding views and delegates"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:246
msgid "Let's go back to the original example:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:259
#: content/docs/getting-started/kirigami/components-listview/index.md:391
msgid "anchors.fill: parent"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:280
msgid ""
"Unlike the model (which merely contains data) and a delegate [Component]"
"(docs:qtqml;QtQml.Component) (which only appears when instantiated), the "
"view is a visual component immediately instantiated and so it needs to "
"either have its dimensions set or use anchors or Layouts."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:282
msgid ""
"As views are commonly lists of content the user would want to scroll "
"through, when they are added to a [Kirigami.ScrollablePage](docs:kirigami;"
"org.kde.kirigami.ScrollablePage), views become the main content with little "
"padding around them, and there is no need to make it fill the page. When the "
"view is added to a simple [Kirigami.Page](docs:kirigami;org.kde.kirigami."
"Page), it will require to set its dimensions properly before it will show "
"up. In other words: in the scrollable page above, `anchors.fill: parent` is "
"not required; if a simple page was used, it would be required."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:284
msgid ""
"There are multiple views APIs can be used, some from Qt and some from "
"Kirigami. Here are the most commonly used ones:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:286
msgid "Qt's [ListView](docs:qtquick;QtQuick.ListView)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:287
msgid "Qt's [GridView](docs:qtquick;QtQuick.GridView)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:288
msgid "Qt's [TableView](docs:qtquick;QtQuick.TableView)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:289
msgid "Qt's [TreeView](docs:qtquick;QtQuick.TreeView)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:290
msgid ""
"Kirigami's [CardsListView](docs:kirigami;org.kde.kirigami.CardsListView)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:291
msgid ""
"Kirigami's [ColumnView](docs:kirigami;org.kde.kirigami.layouts.ColumnView)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:293
msgid ""
"The delegate on the other hand always need to have its dimensions set. "
"Generally its dimensions are set to use only the full width of the view."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:295
msgid "Common mistakes"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:297
msgid ""
"The above means that delegates should not have bottom anchors, since the "
"delegate doesn't need to have the same height as the view. In other words, "
"you will probably never want to use `anchors.fill: parent`."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:299
msgid ""
"Additionally, while it is possible to set its dimensions using the parent "
"and anchors, which is usually the view's contentItem, like so:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:309
msgid ""
"It is not guaranteed that the delegate's parent will be a view, and so it "
"should be avoided. Instead, use the [ListView.view](https://doc.qt.io/qt-6/"
"qml-qtquick-listview.html#view-attached-prop) attached property to point to "
"the delegate's parent view:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:320
msgid ""
"The most common use of a delegate is within a [Component](docs:qtqml;QtQml."
"Component), which does not instantiate the delegate immediately. When a view "
"is constructed, the delegate is then used as a blueprint to make each item "
"in the view."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:322
msgid ""
"While you can make your own custom components to be used as delegates "
"without delegate-specific Qt APIs (for example, a Layout containing a few "
"Items), QtQuick Controls does provide delegate APIs that are simpler to use:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:324
msgid ""
"[ItemDelegate](docs:qtquickcontrols;QtQuick.Controls.ItemDelegate) "
"(delegates with only text)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:325
msgid ""
"[CheckDelegate](docs:qtquickcontrols;QtQuick.Controls.CheckDelegate) "
"(delegates with a checkbox)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:326
msgid ""
"[RadioDelegate](docs:qtquickcontrols;QtQuick.Controls.RadioDelegate) "
"(delegates with a radio)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:327
msgid ""
"[SwitchDelegate](docs:qtquickcontrols;QtQuick.Controls.SwitchDelegate) "
"(delegates with a switch)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:328
msgid ""
"[SwipeDelegate](docs:qtquickcontrols;QtQuick.Controls.SwipeDelegate) "
"(delegates that can be swiped)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:330
msgid "You should prefer using the upstream Qt delegates where possible."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:332
msgid ""
"On top of these Qt delegates, Kirigami provides its own equivalents, with "
"the added functionality of subtitles and icons:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:334
msgid "[TitleSubtitle](docs:kirigami;org.kde.kirigami.delegates.TitleSubtitle)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:335
msgid ""
"[IconTitleSubtitle](docs:kirigami;org.kde.kirigami.delegates."
"IconTitleSubtitle)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:336
msgid ""
"[SubtitleDelegate](docs:kirigami;org.kde.kirigami.delegates.SubtitleDelegate)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:337
msgid ""
"[CheckSubtitleDelegate](docs:kirigami;org.kde.kirigami.delegates."
"CheckSubtitleDelegate)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:338
msgid ""
"[RadioSubtitleDelegate](docs:kirigami;org.kde.kirigami.delegates."
"RadioSubtitleDelegate)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:339
msgid ""
"[SwitchSubtitleDelegate](docs:kirigami;org.kde.kirigami.delegates."
"SwitchSubtitleDelegate)"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:341
msgid ""
"The API ending with \"Delegate\" can be set as a direct delegate of the "
"view, just like the previous examples that used Controls.ItemDelegate:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:377
msgid ""
"Both TitleSubtitle and IconTitleSubtitle are expected to be used to override "
"a Qt delegate's contentItem, for example:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview/index.md:417
msgid ""
"A practical example of using Kirigami delegates can be seen in the "
"[ListItemTest file in the Kirigami Repository](https://invent.kde.org/"
"frameworks/kirigami/-/blob/master/tests/ListItemTest.qml)."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:0
msgid "Page rows and page stacks"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:0
msgid ""
"Add flow to your application: Add, remove and replace pages in different ways"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:10
msgid "A row of pages"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:12
msgid ""
"We have seen so far that one of the core components of a Kirigami window is "
"a [Kirigami.Page](docs:kirigami;org.kde.kirigami.Page). A single page can "
"envelop the whole screen of the application, or it can be shown together "
"with other pages at the same time, if there is space."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:14
msgid ""
"Whenever a page gets added, or *pushed*, it appears to the right of the "
"existing page(s), forming a row. This row of pages can be managed with the "
"fittingly named [Kirigami.PageRow](docs:kirigami;org.kde.kirigami.PageRow)."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:16
msgid "A minimal page row with a single page could look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:42
msgid "A single page with light blue color to show the page's dimensions"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:44
msgid ""
"There are two improvements that can be done here. The first is that, with "
"[initialPage](https://api-staging.kde.org/qml-org-kde-kirigami-pagerow."
"html#initialPage-prop), we can both set `mainPage` to be the first page that "
"appears in the page row, and have its dimensions be managed by the page row "
"instead of via manual [anchors](https://doc.qt.io/qt-6/qtquick-positioning-"
"anchors.html), [positioners](https://doc.qt.io/qt-6/qtquick-positioning-"
"layouts.html) or [layouts](https://doc.qt.io/qt-6/layout.html). The second "
"is to have a toolbar, which can be set by defining a toolbar style with "
"[globalToolBar.style](https://api-staging.kde.org/qml-org-kde-kirigami-"
"pagerow.html#globalToolBar-prop). There are a few styles we can choose from, "
"but we'll go with `Kirigami.ApplicationHeaderStyle.Auto` for now."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:46
msgid ""
"<!-- TODO: investigate why Kirigami.ApplicationHeaderStyle doesn't show up "
"in the tag file. -->\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:69
msgid ""
"A single page with toolbar and light blue color to show the page's dimensions"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:71
msgid ""
"There are only two ways of adding pages to a page row: by setting its "
"[initialPage](https://api-staging.kde.org/qml-org-kde-kirigami-pagerow."
"html#initialPage-prop) (which can optionally take an array of pages) or by "
"using [push()](docs:kirigami;org.kde.kirigami.PageRow::push). To delete a "
"page from the page row, you should use [pop()](docs:kirigami;org.kde."
"kirigami.PageRow::pop), whereas [goBack()](docs:kirigami;org.kde.kirigami."
"PageRow::goBack) or [goForward()](docs:kirigami;org.kde.kirigami.PageRow::"
"goForward) can be used to navigate between pages."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:117
msgid "Initial page with light blue color"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:119
msgid ""
"Upon clicking \\\"Push!\\\", a second page with light green color shows up"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:121
msgid "The application's stack of pages"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:123
msgid ""
"If a [Kirigami.PageRow](docs:kirigami;org.kde.kirigami.PageRow) with a "
"toolbar looks familiar to you, that is because you have seen it before. An "
"[ApplicationWindow.pageStack](https://api-staging.kde.org/qml-org-kde-"
"kirigami-abstractapplicationwindow.html#pageStack-prop) is nothing more than "
"a very convenient, global page row. Every function available to a `PageRow` "
"is also available to the `pageStack`."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:125
msgid ""
"The previous example can be reduced significantly with a `pageStack`, with "
"the added bonus of navigation actions:"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:173
msgid ""
"In general you'll want to use a `pageStack` rather than implement your own "
"[PageRow](docs:kirigami;org.kde.kirigami.PageRow), especially when your "
"application gets bigger and you need your components living in separate "
"files. If you create your window in your `Main.qml` using a [Kirigami."
"ApplicationWindow](docs:kirigami;org.kde.kirigami.ApplicationWindow), a "
"component residing in another file can still directly invoke the global "
"`pageStack` by means of a call to the [applicationWindow()](docs:kirigami;"
"org.kde.kirigami.AbstractApplicationWindow::applicationWindow):"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:176
msgid "\"Main.qml\""
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:187
msgid "and"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:190
msgid "\"BasicPage.qml\""
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack/index.md:216
msgid "Clicking the button pushes a new page with help of applicationWindow"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:0
msgid "Progress bars and indicators"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:0
msgid "Provide your users with loading state information using progress bars."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:10
msgid ""
"Whenever your application does something that takes a noticeable amount of "
"time, you will want to use a visual element that tells the user that "
"something is happening in the background."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:12
msgid ""
"QtQuick Controls provides two useful components that you can use to this end."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:14
msgid "Progress bar"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:16
msgid ""
"[Controls.ProgressBar](docs:qtquickcontrols;QtQuick.Controls.ProgressBar) is "
"a component that lets you easily include progress bars in your application. "
"There are four main properties you will need to use:"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:18
msgid ""
"[from](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar.html#from-"
"prop): the minimum value represented by the start of the progress bar"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:19
msgid ""
"[to](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar.html#to-prop): "
"the maximum value represented by the end of the progress bar"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:20
msgid ""
"[value](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar.html#value-"
"prop): the current value of the action that is in progress (e.g. 50% loaded)"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:21
msgid ""
"[indeterminate](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar."
"html#indeterminate-prop): if the action that is in process currently has no "
"clear progress value, you can set this property to `true` to show the user "
"that something is happening but its progress is not yet clear (but will be "
"soon)."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:52
msgid "value: 50"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:66
msgid "Above: progress bar at 50%; below: indeterminate progress bar"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:72
msgid "Busy indicator"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:74
msgid ""
"In cases where loading times are shorter or measuring progress is not "
"feasible, you can instead use [Controls.BusyIndicator](docs:qtquickcontrols;"
"QtQuick.Controls.BusyIndicator). This component provides a simple spinning "
"wheel that shows users that something is happening."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars/index.md:76
msgid ""
"If you want the indicator to stop running, you can do so by setting the "
"[running](https://doc.qt.io/qt-6/qml-qtquick-controls2-busyindicator."
"html#running-prop) property to false, in which case the ."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:0
msgid "Scrollable pages and list views"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:0
msgid ""
"Scrollable pages are useful when combined with vertical components or "
"dynamic components such as List Views."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:10
msgid "Kirigami.ScrollablePage"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:12
msgid ""
"A [Kirigami.ScrollablePage](docs:kirigami;org.kde.kirigami.ScrollablePage) "
"is a page that holds scrollable content, such as a [ListView](docs:qtquick;"
"QtQuick.ListView). Scrolling, as well as scrolling indicators, are "
"automatically managed."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:18
msgid "The rectangle will automatically be scrollable"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:26
msgid ""
"In almost every other way, a scrollable page is the same as a normal page."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:30
msgid ""
"Do not put a [ScrollView](docs:qtquickcontrols;QtQuick.Controls.ScrollView) "
"inside of a [Kirigami.ScrollablePage](docs:kirigami;org.kde.kirigami."
"ScrollablePage); children of a `Kirigami.ScrollablePage` are already inside "
"a `ScrollView`."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:35
msgid "ListView in a ScrollablePage"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:37
msgid ""
"When the direct children of a [Kirigami.ScrollablePage](docs:kirigami;org."
"kde.kirigami.ScrollablePage) extend vertically beyond the size of the page "
"itself, a scrollbar appears at the right edge of the page and the page will "
"be scrollable."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:41
msgid ""
"Two scrollable pages, both containing a ListView with custom contents "
"(screenshot of NeoChat)"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:43
msgid ""
"Often you have more than one child in your [Kirigami.ScrollablePage](docs:"
"kirigami;org.kde.kirigami.ScrollablePage), and positioning items can be "
"tricky—especially in combination with a [ListView](docs:qtquick;QtQuick."
"ListView)."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:46
msgid ""
"For non-visual components, having them inside the [ListView](docs:qtquick;"
"QtQuick.ListView) component won't change the visuals of the page, so we can "
"move them inside the scope of the list view. Same for elements anchored to "
"the center of the page, such as placeholder messages for empty list views."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:49
msgid ""
"For other items, it might make sense to move them to the header or footer of "
"the [Kirigami.ScrollablePage](docs:kirigami;org.kde.kirigami."
"ScrollablePage). This is often the case for search bars."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:52
msgid "PlaceholderMessage"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:54
msgid ""
"It is possible to add a [Kirigami.PlaceholderMessage](docs:kirigami;org.kde."
"kirigami.PlaceholderMessage) with some instructions in case the list view is "
"empty."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:68
msgid "More code..."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:71
msgid "Model code..."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:76
msgid "Search in the ListView"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:78
msgid ""
"A search field is often added to a [Kirigami.ScrollablePage](docs:kirigami;"
"org.kde.kirigami.ScrollablePage) to filter the [ListView](docs:qtquick;"
"QtQuick.ListView). This can be done by changing the default [titleDelegate]"
"(https://api-staging.kde.org/qml-org-kde-kirigami-page.html#titleDelegate-"
"prop) to use a [Kirigami.SearchField](docs:kirigami;org.kde.kirigami."
"SearchField) instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:95
msgid "Rest of listview code..."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:100
msgid "Hint"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:102
msgid ""
"You can use [KSortFilterProxyModel](https://api-staging.kde.org/qml-org-kde-"
"kitemmodels-ksortfilterproxymodel.html) from [KItemModel](docs:kitemmodels;"
"kitemmodels-index.html) to easily add filtering capability directly in QML "
"without any need for C++ code."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:108
msgid "Pull to refresh"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:110
msgid ""
"Another function provided by this component is a \"pull-to-refresh\" action. "
"To use this, activate it as follows:"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:123
msgid ""
"NOTE: MyModel doesn't come from the components, it's purely an example on "
"how it can be used together with some application logic that can update the "
"list model and signals when it's done."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews/index.md:135
msgid ""
"By pulling down, you can also activate a special mode with a larger top "
"margin which makes single-handed use of the application easier."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:0
msgid "Adding actions"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:0
msgid ""
"Learning more about Kirigami's Actions will help us make our application "
"more useful.\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:10
msgid "Recap"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:12
msgid ""
"So far, we built a simple app that can display cards. However, there is "
"currently no way for the user to add new cards to the card view."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:14
msgid ""
"In this tutorial, we'll be looking at Kirigami actions. These will help us "
"add interactivity to our app in a consistent, fast, and accessible way."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:18
msgid ""
"A [Kirigami.Action](docs:kirigami;org.kde.kirigami.Action) encapsulates a "
"user interface action. We can use these to provide our applications with "
"easy-to-reach actions that are essential to their functionality."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:20
msgid ""
"If you have used Kirigami apps before, you have certainly interacted with "
"Kirigami actions. In this image, we can see actions to the right of the page "
"title with various icons. Kirigami actions can be displayed in several ways "
"and can do a wide variety of things."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:30
msgid "Adding countdowns"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:32
msgid ""
"A countdown app is pretty useless without the ability to add countdowns. "
"Let's create an action that'll let us do this."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:40
msgid "Other page properties..."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:58
msgid ""
"We are placing our [Kirigami.Action](docs:kirigami;org.kde.kirigami.Action) "
"within our main page from the previous tutorials. If we wanted to, we could "
"add more actions to our page (and even nest actions within actions!)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:60
msgid ""
"The brackets `[]` used above are similar to [JavaScript arrays](https://www."
"w3schools.com/js/js_arrays.asp), which means you can pass one or more things "
"to them, separated by comma:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:63
msgid "General JavaScript array of components:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:65
msgid "Passing an array of Kirigami actions to QML:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:69
msgid ""
"The `id` and `text` properties should be familiar from previous tutorials. "
"However, the inherited [Action.icon](https://doc.qt.io/qt-6/qml-qtquick-"
"controls2-action.html#icon-prop) property should be interesting: it is an "
"object with several properties letting you display certain icons for your "
"actions. Fortunately, to use KDE icons all we need to do is provide the name "
"property for the icon property, `icon.name`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:71
msgid "Viewing the available icons"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:73
msgid ""
"<details>\n"
"<summary>Click here to see how to check the available icons on your system</"
"summary>\n"
"<br>\n"
"Icon Explorer is a KDE application that lets you view all the icons that you "
"can use for your application. It offers a number of useful features such as "
"previews of their appearance across different installed themes, previews at "
"different sizes, and more. You might find it a useful tool when deciding on "
"which icons to use in your application.<br><br>\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:78
msgid ""
"Many of KDE's icons follow the FreeDesktop Icon Naming specification. "
"Therefore, you might also find it useful to consult The FreeDesktop "
"project's website, [which lists all cross-desktop compatible icon names]"
"(https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-"
"latest.html)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:84
msgid ""
"The [onTriggered](docs:qtquickcontrols;QtQuick.Controls.Action::triggered) "
"signal handler is the most important. This is what our action will do when "
"it is used. You'll notice that in our example we're using the method "
"[kountdownModel.append](https://doc.qt.io/qt-6/qml-qtqml-models-listmodel."
"html#append-method) of the `kountdownModel` we created in our previous "
"tutorial. This method lets us append a new element to our list model. We are "
"providing it with an object (indicated by curly braces `{}`) that has the "
"relevant properties for our countdowns (`name`, `description`, and a "
"placeholder `date`)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:92
msgid ""
"Each time we click our \\\"Add kountdown\\\" button on the top right, our "
"custom countdown is added"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:94
msgid "Mobile version"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:106
msgid ""
"The next component is a [Kirigami.GlobalDrawer](docs:kirigami;org.kde."
"kirigami.GlobalDrawer). It shows up as a [hamburger menu](https://en."
"wikipedia.org/wiki/Hamburger_button). By default it opens a sidebar, which "
"is especially useful on mobile, as the user can just swipe in a side of the "
"screen to open it. Global drawers are useful for global navigation and "
"actions. We are going to create a simple global drawer that includes a \"quit"
"\" button."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:111
msgid "Other window properties..."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:128
msgid ""
"Here, we put our global drawer inside our application window. The main "
"property we need to pay attention to is [GlobalDrawer.actions](https://api-"
"staging.kde.org/qml-org-kde-kirigami-globaldrawer.html#actions-prop), which "
"takes the form of an array of [Kirigami.Action](docs:kirigami;org.kde."
"kirigami.Action) components. This action has an appropriate icon and "
"executes the [Qt.quit()](docs:qtqml;QtQml.Qt::quit) function when triggered, "
"closing the application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:131
msgid ""
"Since we are keeping our global drawer simple for now, we are setting the "
"[GlobalDrawer.isMenu](https://api-staging.kde.org/qml-org-kde-kirigami-"
"globaldrawer.html#isMenu-prop) property to `true`. This displays our global "
"drawer as a normal application menu, taking up less space than the default "
"global drawer pane."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:139
msgid "Global drawer as a menu"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:147
msgid ""
"The [Actions based components](/docs/getting-started/kirigami/components-"
"actions/) page of these docs provides further detail on Kirigami Actions and "
"how they can be used."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:151
msgid "Actions are contextual"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:153
msgid ""
"Kirigami components are designed in such a way that the place where you put "
"Kirigami Actions is relevant. As seen above, if you add actions to a "
"[Kirigami.Page](docs:kirigami;org.kde.kirigami.Page), [Kirigami."
"ScrollablePage](docs:kirigami;org.kde.kirigami.ScrollablePage) or any other "
"derivative Page component, they will show up on the right side of the header "
"in desktop mode, and on the bottom in mobile mode."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:155
msgid ""
"Similarly, if Kirigami Actions are added to a [Kirigami.GlobalDrawer](docs:"
"kirigami;org.kde.kirigami.GlobalDrawer), they will show up in the resulting "
"drawer or menu."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:157
msgid ""
"Other examples of Kirigami Actions showing up differently depending on their "
"parent component are:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:159
msgid ""
"[Kirigami.ContextDrawer](docs:kirigami;org.kde.kirigami.ContextDrawer) - "
"[ContextDrawer tutorial here](/docs/getting-started/kirigami/components-"
"drawers#context-drawers)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:160
msgid ""
"[Kirigami.AbstractCard](docs:kirigami;org.kde.kirigami.AbstractCard) and "
"derivatives - [Card tutorial here](/docs/getting-started/kirigami/components-"
"card)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:161
msgid ""
"[Kirigami.Dialog](docs:kirigami;org.kde.kirigami.Dialog) and derivatives - "
"[Dialog tutorial here](/docs/getting-started/kirigami/components-dialogs)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:162
msgid ""
"[Kirigami.ActionToolBar](docs:kirigami;org.kde.kirigami.ActionToolBar) - "
"[ActionToolBar tutorial here](/docs/getting-started/kirigami/components-"
"actions#actiontoolbar)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:164
msgid "Among other Kirigami components."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:166
#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:200
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:257
msgid "Our app so far"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions/index.md:168
#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:202
#: content/docs/getting-started/kirigami/introduction-listviews/index.md:259
msgid ""
"<details>\n"
"<summary><b>Main.qml:</b></summary>\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:0
msgid "Adding a dialog"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:0
msgid "Getting to grips with Kirigami dialogs.\n"
msgstr "Kirigami iletişim kutularının nasıl çalıştığını öğrenmek.\n"

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:11
msgid "Making our app useful"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:13
msgid ""
"We have a window, we have cards, and we have actions. Yet, we still need to "
"find some way of inputting a name, description, and date of our choice."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:15
msgid ""
"One way we could do this is by creating a new page where we place the "
"required input elements. However, a whole page dedicated to providing a "
"name, description, and date seems a bit excessive."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:17
msgid "Instead, we'll be using a dialog."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:19
msgid "![Dialog appearing in the middle of the application](dialog.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:21
msgid "Opening the dialog"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:37
msgid ""
"First we edit the action from the previous tutorial: just a [Kirigami.Action]"
"(docs:kirigami;org.kde.kirigami.Action) that triggers the dialog's [open()]"
"(docs:qtquickcontrols;QtQuick.Controls.Popup::open) function."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:39
msgid "Countdown-adding dialogs"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:41
msgid ""
"The new component we add is a [Kirigami.Dialog](docs:kirigami;org.kde."
"kirigami.dialogs.Dialog). Dialogs appear at the center of the window and can "
"be used to provide extra information relevant to the current content. They "
"can't be moved, but they adapt their own size to the window."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:53
msgid "Form layouts help align and structure a layout with several inputs"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:55
msgid "Textfields let you input text in a thin textbox"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:58
msgid "Provides a label attached to the textfield"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:60
msgid ""
"What to do after input is accepted (i.e. pressed Enter) In this case, it "
"moves the focus to the next field"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:68
msgid "Again, it moves the focus to the next field"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:74
msgid ""
"D means a required number between 1-9, 9 means a required number between 0-9"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:77
msgid "Here we confirm the operation just like clicking the OK button"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:85
msgid "The dialog logic goes here"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:91
msgid ""
"Dialogs by default have a [header](https://doc.qt.io/qt-6/qml-qtquick-"
"controls-dialog.html#header-prop) and a [footer](https://doc.qt.io/qt-6/qml-"
"qtquick-controls-dialog.html#footer-prop), both inherited from [Controls."
"Dialog](docs:qtquickcontrols;QtQuick.Controls.Dialog)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:93
msgid ""
"The header by default includes a [title](https://doc.qt.io/qt-6/qml-qtquick-"
"controls-dialog.html#title-prop) and a close button that can be disabled "
"with [showCloseButton](https://api-staging.kde.org/qml-org-kde-kirigami-"
"dialogs-dialog.html#showCloseButton-prop). The footer by default includes a "
"close button, and it can be overridden with [standardButtons](https://doc.qt."
"io/qt-6/qml-qtquick-controls-dialog.html#standardButtons-prop)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:95
msgid ""
"We first set it to show an \"Ok\" button and a \"Cancel\" button, add some "
"padding, and add a reasonable [preferredWidth](https://api-staging.kde.org/"
"qml-org-kde-kirigami-dialogs-dialog.html#preferredWidth-prop). The preferred "
"width is the default expected size of the dialog, which can increase if "
"needed. We can use standard [Kirigami.Units](https://api-staging.kde.org/qml-"
"org-kde-kirigami-platform-units.html) that we will revisit later on."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:97
msgid ""
"Then we come to a [Kirigami.FormLayout](docs:kirigami;org.kde.kirigami."
"layouts.FormLayout). Unlike a [ColumnLayout](https://doc.qt.io/qt-6/qml-"
"qtquick-layouts-columnlayout.html), the layout of its child components is "
"automatic and centered, with optional labels. As the name implies, it is "
"used to create input forms."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:99
msgid ""
"These form layouts are designed to work with a variety of different input "
"types, though we're sticking to simple [Controls.Textfield](docs:"
"qtquickcontrols;QtQuick.Controls.TextField) inputs that give us simple text "
"boxes to write things in."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:101
msgid "We have created Textfield elements that act as:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:103
msgid "Input for the name of our countdown"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:104
msgid "Input for the description of our countdown"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:105
msgid ""
"Input for the date we are counting down towards, which must be provided in a "
"`YYYY-MM-DD` format"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:107
msgid ""
"Within each of these [Controls.Textfield](docs:qtquickcontrols;QtQuick."
"Controls.TextField) elements, we are setting a [Kirigami.FormData.label]"
"(https://api-staging.kde.org/qml-org-kde-kirigami-layouts-formdata."
"html#label-attached-prop) property that lets us define labels for them. The "
"form will present the correct labels to the left of each of these text input "
"fields."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:109
msgid ""
"Finally, we are also setting the [onAccepted](https://doc.qt.io/qt-6/qml-"
"qtquick-textinput.html#accepted-signal) property to trigger the "
"[forceActiveFocus()](https://doc.qt.io/qt-6/qml-qtquick-item."
"html#forceActiveFocus-method) method of the following field; this will "
"switch the active field once the user hits the ENTER key, improving the "
"usability of the form."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:111
msgid ""
"We have also set a property called [inputMask](https://doc.qt.io/qt-6/qml-"
"qtquick-textinput.html#inputMask-prop) on the text field for our date. "
"Setting this to `D999-99-99` prevents users from entering something that "
"might break the functionality of the application (such as text), restricting "
"them to only entering digits which we can then try to parse into a date "
"object."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:113
msgid ""
"Once the user interface for the dialog is done, we need to change how it "
"behaves. For this we need three things:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:115
msgid "Show the Ok button only when the required fields are filled"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:116
msgid "Add the input information to the model"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:117
msgid "Clear the input form"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:121
msgid ""
"... Once the Kirigami.Dialog is initialized, we want to create a custom "
"binding to only make the Ok button visible if the required text fields are "
"filled. For this we use Kirigami.Dialog.standardButton(button):"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:129
msgid "() => is a JavaScript arrow function"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:133
msgid ""
"The binding is created, but we still need to make it unclickable unless the "
"fields are filled"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:142
msgid ""
"The first thing that needs to be done is create a binding between the OK "
"button's [enabled](https://doc.qt.io/qt-6/qml-qtquick-controls-popup."
"html#enabled-prop) property and a check on whether the fields are filled, "
"which in this case needs to be done with [Qt.binding()](https://doc.qt.io/"
"qt-6/qtqml-syntax-propertybinding.html#creating-property-bindings-from-"
"javascript) in JavaScript. In effect, the line:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:148
msgid ""
"is similar to the QML bindings we have seen so far, like in the following "
"pseudo-code:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:154
msgid ""
"The signal handler that triggers the Ok button is [onAccepted](https://doc."
"qt.io/qt-6/qml-qtquick-controls-dialog.html#accepted-signal). It remains "
"empty and without doing anything if the required fields are filled; "
"otherwise, it will add the input to the model and clear the dialog for the "
"next time it is opened."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:158
msgid ""
"... We check that the nameField is not empty and that the dateField (which "
"has an inputMask) is completely filled"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:180
msgid ""
"For our required name field, all we need to do is to check whether the field "
"text is an empty string. For the date field, because it has an input mask, "
"we need to use [acceptableInput](https://doc.qt.io/qt-6/qml-qtquick-"
"textinput.html#acceptableInput-prop) instead, which only becomes true once "
"the whole field is filled and contains only acceptable characters."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:182
msgid ""
"Then, the [append()](https://doc.qt.io/qt-6/qml-qtqml-models-listmodel."
"html#append-method) method of our `kountdownModel` list model adds a "
"JavaScript object including the properties we have provided."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:184
msgid ""
"Lastly, we make sure to clear the text fields by setting their [text]"
"(https://doc.qt.io/qt-6/qml-qtquick-textinput.html#text-prop) properties to "
"an empty string, then [close()](docs:qtquickcontrols;QtQuick.Controls.Popup::"
"close) it."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:186
msgid ""
"Once we save our files and build our program, we'll be able to add our own "
"custom countdowns! We can make one last touch to improve the interface, "
"namely remove the dummy countdown we had in the previous lessons:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:190
msgid ""
"Secondly now that we have an actual date to play around with, we can "
"calculate the time until said date:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:194
msgid ""
"And thirdly increase the window size so that we have more room for our new "
"cards:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:198
msgid "Much nicer."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-dialogs/index.md:209
msgid ""
"![Screenshot of the application with four example cards](addedKountdowns."
"webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:0
msgid "Layouts, ListViews, and Cards"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:0
msgid "Figuring out the different ways of placing things on a page"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:9
#: content/docs/getting-started/kirigami/style-typography/index.md:0
msgid "Laying out your content"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:11
msgid ""
"Now that we understand how pages work, it is time to add stuff to them. We "
"will be going through a number of important layout components and elements "
"that will be useful when designing our app."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:13
msgid "By the end of this section you'll have a neat-looking app."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:15
msgid "ListViews"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:17
msgid ""
"If you've ever used [Discover](https://apps.kde.org/discover/), [NeoChat]"
"(https://apps.kde.org/neochat/), or Plasma's System Settings, you will have "
"come across a [ListView](https://doc.qt.io/qt-6/qml-qtquick-listview.html). "
"Quite simply, it lets you display data on a list."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:30
msgid "That seems cryptic, but don't worry. Let's start from the beginning."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:32
msgid ""
"We add this component inside our [Kirigami.ScrollablePage](docs:kirigami;org."
"kde.kirigami.ScrollablePage) from the last tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:34
msgid ""
"We're using [Kirigami.CardsListView](docs:kirigami;org.kde.kirigami."
"CardsListView), which is a [ListView](https://doc.qt.io/qt-6/qml-qtquick-"
"listview.html) that allows us to easily display cards in a list. However, "
"ListViews are made to show data taken from a model - to automatically "
"populate itself from a set of data that we point it to. That's where the "
"`model` property comes in: in this example, it's pointing to "
"`kountdownModel`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:36
msgid "Model"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:43
msgid "Each ListElement is an element on the list, containing information"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:54
msgid ""
"We add our `kountdownModel` inside the [Kirigami.ApplicationWindow](docs:"
"kirigami;org.kde.kirigami.ApplicationWindow) from the last tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:56
msgid ""
"A model defines the way that a data entry is structured. Our "
"`kountdownModel` will consist of only one element for now. By looking at our "
"[ListElement](https://doc.qt.io/qt-6/qml-qtqml-models-listelement.html) "
"above, we can see how the data of our `kountdownModel` are structured: it "
"contains a name, a description, and a date. This isn't set in stone, and you "
"may have different sorts of data in your model. The first two are just "
"strings, and the third is a number we're using as a placeholder."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:60
msgid ""
"Since QML is built on top of JavaScript, many of this language's features "
"are available for use in QML files. However, QML variables have to be "
"prefixed with `property`, unless it is inside a JS code block. You can read "
"more about it in [this page](https://doc.qt.io/qt-6/qtqml-javascript-topic."
"html)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:64
msgid ""
"Models are also useful in how they can be modified through the use of "
"several methods. Some important ones are:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:65
msgid ""
"[ListModel.append(yourobject: jsobject)](https://doc.qt.io/qt-6/qml-qtqml-"
"models-listmodel.html#append-method) adds a JavaScript object (JSObject) "
"`yourobject` to the ListModel and places it after the last item in the "
"model. For this to happen correctly, you must provide a JSObject with the "
"correct properties and corresponding datatypes."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:66
msgid ""
"[ListModel.get(index: int)](https://doc.qt.io/qt-6/qml-qtqml-models-"
"listmodel.html#get-method) returns the JSObject at the index location you "
"provide."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:67
msgid ""
"[ListModel.remove(index: int, count: int)](https://doc.qt.io/qt-6/qml-qtqml-"
"models-listmodel.html#remove-method) removes the JSObject at the provided "
"`index` location, and as many after that index location as you put in "
"`count` (1 includes only the JSObject at the provided index)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:68
msgid ""
"[ListModel.set(index: int, yourobject: jsobject)](https://doc.qt.io/qt-6/qml-"
"qtqml-models-listmodel.html#set-method) changes the item at the provided "
"`index` location with the values provided in `yourobject`. Same rules as "
"with `append()`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:70
msgid "Delegates"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:72
msgid ""
"While our `kountdownModel` contains the data that will be displayed, our "
"`kountdownDelegate` will handle how the data will be displayed in the "
"[ListView](https://doc.qt.io/qt-6/qml-qtquick-listview.html). For that we "
"use a [Kirigami.CardsListView](docs:kirigami;org.kde.kirigami.CardsListView) "
"designed to display card-type delegates, and those delegates will be "
"visually represented by means of a [Kirigami.AbstractCard](docs:kirigami;org."
"kde.kirigami.AbstractCard)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:74
msgid ""
"Delegates automatically receive the properties of the [ListElements](https://"
"doc.qt.io/qt-6/qml-qtqml-models-listelement.html) that we have specified in "
"our model. We can therefore just refer to their `name`, `description`, and "
"`date` properties as if they were conventional variables within our delegate."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:76
msgid "Building the delegate card"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:78
msgid ""
"The [Component](docs:qtqml;QtQml.Component) that will represent our delegate "
"can be added inside our [Kirigami.ApplicationWindow](docs:kirigami;org.kde."
"kirigami.ApplicationWindow). We will then check what each part of our "
"delegate component does."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:87
msgid ""
"implicitWidth/Height define the natural width/height of an item if no width "
"or height is specified. The setting below defines a component's preferred "
"size based on its content"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:129
msgid "onClicked: to be done... soon!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:139
msgid "implicitWidth and implicitHeight"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:141
msgid ""
"The first part we will take a look at is how to manage the width and height "
"of our component:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:156
msgid ""
"Looking at our [Kirigami.AbstractCard](docs:kirigami;org.kde.kirigami."
"AbstractCard), the first properties we set are [implicitWidth](https://doc."
"qt.io/qt-6/qml-qtquick-item.html#implicitWidth-prop) and [implicitHeight]"
"(https://doc.qt.io/qt-6/qml-qtquick-item.html#implicitHeight-prop). We have "
"set these to the `delegateLayout.implicitWidth` and `delegateLayout."
"implicitHeight`, i.e. the `implicitWidth` and `implicitHeight` of the "
"`GridLayout` element."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:158
msgid ""
"Implicit widths and heights are properties available in any [Item](docs:"
"qtquick;QtQuick.Item) that function as hints and are set as a default, or as "
"a fallback, if there is no explicit width or height set for these "
"components. These values default to 0x0, so it is very important that you "
"define those in raw Item components as done above."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:160
msgid ""
"Here we have set the `implicitWidth` and `implicitHeight` of our [Kirigami."
"AbstractCard](docs:kirigami;org.kde.kirigami.AbstractCard) to that of the "
"[GridLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-gridlayout.html) "
"below to ensure it does not spill out of the card. This way, the card takes "
"as much space is necessary for its contents."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:162
msgid "Layouts"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:164
msgid ""
"The [GridLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-gridlayout.html) "
"is inside the [Item](https://doc.qt.io/qt-6/qml-qtquick-item.html) component "
"we have provided for the property [contentItem](https://doc.qt.io/qt-6/qml-"
"qtquick-controls2-control.html#contentItem-prop). This is the [Item](https://"
"doc.qt.io/qt-6/qml-qtquick-item.html) that contains what will be displayed "
"in your card."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:166
msgid ""
"We also need to choose a [layout](https://doc.qt.io/qt-6/qtquicklayouts-"
"index.html) for our components so that they don't just pile on top of each "
"other. There are three main types that we can choose from:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:167
msgid ""
"[ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-columnlayout.html) "
"lays out your components vertically, in a single column"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:168
msgid ""
"[RowLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-rowlayout.html) lays "
"out your components horizontally, in a single row"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:169
msgid ""
"[GridLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-gridlayout.html) "
"lays out your components in a grid with a composition of your choosing"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:171
msgid ""
"With [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-columnlayout."
"html) and [RowLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-rowlayout."
"html), all we have to do is write our components inside the Layout "
"component. As you can see, we went with a [GridLayout](https://doc.qt.io/"
"qt-6/qml-qtquick-layouts-gridlayout.html), which entails a bit more "
"handiwork."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:190
msgid ""
"The first thing you see is our `anchors`. [QtQuick's anchoring system]"
"(https://doc.qt.io/qt-6/qtquick-positioning-anchors.html) provides a useful "
"way of making sure your components are positioned in certain parts of a "
"parent component. We have anchored our [GridLayout](https://doc.qt.io/qt-6/"
"qml-qtquick-layouts-gridlayout.html) to the left, top, and right of the "
"parent card, ensuring our content stretches across the whole card."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:192
msgid ""
"Next we specify the spacing between the rows and columns within our grid, so "
"that our components don't bunch up. Kirigami provides a number of handy "
"[predefined units](https://api-staging.kde.org/qml-org-kde-kirigami-platform-"
"units.html) to use for this purpose:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:194
msgid "Kirigami Unit"
msgstr "Kirigami Birimi"

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:194
msgid "Pixels"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:196
msgid "smallSpacing"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:196
msgid "4px"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:197
msgid "largeSpacing"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:197
msgid "8px"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:198
msgid "gridUnit"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:198
msgid "18px"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:202
msgid ""
"KDE's Visual Design Group (VDG) has a lot more information about the "
"different units defined within Plasma and Kirigami on the [Human Interface "
"Guidelines](/hig/layout/units/)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:206
msgid ""
"As you might remember, `root` is the id of our [Kirigami.ApplicationWindow]"
"(docs:kirigami;org.kde.kirigami.ApplicationWindow). It provides the "
"[wideScreen](https://api-staging.kde.org/qml-org-kde-kirigami-"
"abstractapplicationwindow.html#wideScreen-prop) property, used to determine "
"whether the current device screen is a widescreen (i.e. a computer monitor "
"or a phone in landscape). We use a [ternary conditional](https://developer."
"mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/"
"Conditional_operator) here to vary the number of columns in our grid "
"depending on the screen we are using: if it's a widescreen, the grid will "
"have 4 columns, else it will have 2."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:208
msgid "Inner components"
msgstr "İç bileşenler"

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:210
msgid ""
"We could just create three labels within our delegate component and call it "
"a day, but that wouldn't look particularly nice. We'll make use of a few "
"more convenient components:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:249
msgid "How the custom Card looks like"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:251
msgid ""
"Left, [Kirigami.Heading](docs:kirigami;org.kde.kirigami.Heading): uses the "
"`ListElement`'s `date` as a level 1 heading."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:253
msgid ""
"Middle, [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-"
"columnlayout.html): has a [Kirigami.Heading](docs:kirigami2;Heading) that "
"displays the task name; a [Kirigami.Separator](docs:kirigami;org.kde."
"kirigami.Separator), which provides the horizontal line; and a [Controls."
"Label](docs:qtquickcontrols;QtQuick.Controls.Label), that displays a task's "
"optional description. The latter two components have a [visible](https://doc."
"qt.io/qt-6/qml-qtquick-item.html#visible-prop) property, which checks if the "
"description is empty or not and displays the components depending on the "
"result of `description.length > 0`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:255
msgid ""
"Right, [Controls.Button](docs:qtquickcontrols;QtQuick.Controls.Button): a "
"button that will do something... soon!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:266
msgid ""
"![Screenshot of the app appearance after completing this lesson](Screenshot."
"webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:268
msgid "So there is our basic card!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews/index.md:270
msgid ""
"With these steps, we have now laid the basic groundwork for adding all the "
"functionality to our app."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:0
msgid "Next steps"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:0
msgid "What to do after finishing your first simple Kirigami application\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:11
msgid "What we have built"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:13
msgid ""
"Over the past few tutorials you have built a basic but functional Kirigami "
"application that lets you add, edit, and delete date countdowns. In doing so "
"we have learned about Kirigami and QtQuick components, some of how QML "
"works, basic application layouts, and more. Not bad at all!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:15
msgid ""
"You now have a grasp of the basics that make up many of KDE's most popular "
"applications. You might be asking yourself: what now?"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:17
msgid ""
"Well, don't worry: we have taken the time to provide some pointers as to "
"where you can go from here."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:19
msgid "Contributing to KDE projects"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:21
msgid ""
"One of the best ways to improve your development skills is by putting them "
"into practice. KDE's community is welcoming and always looking for more "
"passionate developers!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:23
msgid ""
"We have several pieces of documentation that can help guide you towards "
"becoming a contributor. We recommend you take a look at the developer-"
"specific section of our [Development Guide](/docs/getting-started/building/"
"help-dependencies) which can help you learn more about the KDE Community's "
"development workflow. We also recommend you take a look at our documentation "
"for KDE's GitLab instance, called [Invent](https://community.kde.org/"
"Infrastructure/GitLab), as you will likely need to interact with it during "
"the development process. The KDE Community interacts mainly through Matrix, "
"and we also have [a page on the community wiki](https://community.kde.org/"
"Matrix) that will guide you through setting up with your very own account."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:27
msgid ""
"While interacting with others in the KDE Community, please make sure you "
"abide by the [Code of Conduct](https://kde.org/code-of-conduct/)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:31
msgid ""
"With your newfound skills you are in a good position to begin contributing "
"to Kirigami projects. Thankfully, many of KDE's most popular applications "
"and components are built with this framework. Here are a list of projects "
"you are welcome to help with."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:33
msgid "Beginner-friendly Kirigami projects"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:35
#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:45
msgid "Project"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:35
#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:45
msgid "What it is"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:35
#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:45
msgid "Links"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:37
msgid ""
"<img src=\"org.kde.calindori.png\" width=\"50\" height=\"50\"><br />Calindori"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:37
msgid "A touch friendly calendar application designed for mobile devices."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:37
msgid ""
"[KDE Apps page](https://apps.kde.org/en/calindori)<br />[KDE Invent page]"
"(https://invent.kde.org/plasma-mobile/calindori)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:38
msgid "<img src=\"org.kde.koko.png\" width=\"50\" height=\"50\"><br />Koko"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:38
msgid "An image viewer designed for desktop and touch devices."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:38
msgid ""
"[Userbase page](https://userbase.kde.org/Koko)<br />[KDE Invent page]"
"(https://invent.kde.org/graphics/koko)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:39
msgid ""
"<img src=\"org.kde.kontrast.png\" width=\"50\" height=\"50\"><br />Kontrast"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:39
msgid ""
"A color contrast checker that tells you if your color combinations are "
"accessible for people with color vision deficiencies."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:39
msgid ""
"[KDE Apps page](https://apps.kde.org/en/kontrast)<br />[KDE Invent page]"
"(https://invent.kde.org/accessibility/kontrast)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:40
msgid ""
"<img src=\"org.kde.licentia.png\" width=\"50\" height=\"50\"><br />Licentia"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:40
msgid "An app to help you choose the license to go with your project."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:40
msgid ""
"[KDE Apps page](https://apps.kde.org/licentia/)<br />[KDE Invent page]"
"(https://invent.kde.org/sdk/licentia)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:41
msgid ""
"<img src=\"start-here-kde.png\" width=\"50\" height=\"50\"><br />Plasma "
"Welcome"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:41
msgid ""
"A welcome app for the Plasma desktop that lets you create new pages with QML."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:41
msgid "[KDE Invent page](https://invent.kde.org/plasma/plasma-welcome)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:43
msgid "More complex Kirigami projects"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:47
msgid ""
"<img src=\"org.kde.discover.png\" width=\"50\" height=\"50\"><br />Discover"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:47
msgid ""
"An application that helps you find and install applications, games, and "
"tools."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:47
msgid ""
"[KDE Apps page](https://apps.kde.org/en/discover)<br />[KDE Userbase page]"
"(https://userbase.kde.org/Discover)<br />[KDE Invent page](https://invent."
"kde.org/plasma/discover)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:48
msgid "<img src=\"org.kde.elisa.png\" width=\"50\" height=\"50\"><br />Elisa"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:48
msgid "A music player that strives to be simple and nice to use."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:48
msgid ""
"[Home page](https://elisa.kde.org/)<br />[KDE Apps page](https://apps.kde."
"org/en/elisa)<br />[KDE Community Wiki page](https://community.kde.org/"
"KDEConnect)<br />[KDE Invent page](https://invent.kde.org/multimedia/elisa)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:49
msgid ""
"<img src=\"org.kde.kdeconnect.png\" width=\"50\" height=\"50\"><br />KDE "
"Connect"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:49
msgid ""
"A multi-platform app that allows your devices to communicate (eg: your phone "
"and your computer)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:49
msgid ""
"[Home page](https://kdeconnect.kde.org/)<br />[KDE Community Wiki page]"
"(https://community.kde.org/KDEConnect)<br />[KDE Invent page](https://invent."
"kde.org/network/kdeconnect-kde)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:50
msgid ""
"<img src=\"org.kde.kongress.png\" width=\"50\" height=\"50\"><br />Kongress"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:50
msgid "A companion application for conference attendees."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:50
msgid "[KDE Invent page](https://invent.kde.org/utilities/kongress)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:51
msgid ""
"<img src=\"org.kde.neochat.png\" width=\"50\" height=\"50\"><br />NeoChat"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:51
msgid ""
"A client for Matrix, the decentralized communication protocol for instant "
"messaging."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:51
msgid ""
"[KDE Apps page](https://apps.kde.org/en/neochat)<br />[KDE Invent page]"
"(https://invent.kde.org/network/neochat)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:53
msgid "Learning more"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:55
msgid "Not feeling quite ready yet? That's okay too."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:57
msgid ""
"Many of the projects listed above are invaluable learning resources. You can "
"poke through the code and see how experienced developers have created fully-"
"featured applications, and use these techniques yourself."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:59
msgid ""
"If you feel you need a more gentle approach, we have also compiled some "
"resources we think you might find useful."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:61
msgid "The backend and C++"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:63
msgid ""
"While we have learned a lot about QML, we haven't really touched upon how to "
"handle backend code all that much. This is, however, an essential facet of "
"KDE application development."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:65
msgid "C++/Qt with Kirigami"
msgstr "Kirigami ile C++/Qt"

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:67
msgid ""
"In the advanced section of this Kirigami documentation we have some pages "
"that can help you get started:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:69
#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:80
msgid "Topic"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:71
msgid ""
"[Understanding CMakeLists](/docs/getting-started/kirigami/advanced-"
"understanding_cmakelists)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:71
msgid "Learn all about CMake and how to compile your applications."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:72
msgid ""
"[Figuring out main.cpp](/docs/getting-started/kirigami/advanced-maincpp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:72
msgid ""
"Getting to grips with the central C++ file that handles your application's "
"initialisation."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:73
msgid ""
"[Connect logic to your QML user interface](/docs/getting-started/kirigami/"
"advanced-connect_backend)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:73
msgid ""
"Add advanced functionality to your Kirigami application and connect it to "
"your UI."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:74
msgid "[About Page](/docs/getting-started/kirigami/advanced-add_about_page)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:74
msgid "Add an \"About Page\" to your UI."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:76
msgid "Beginner C++ resources"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:78
msgid ""
"If you are completely new to C++, there are numerous resources available "
"throughout the web. Here are some that may be useful."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:80
msgid "Resource"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:82
msgid "[Wikibooks C++](https://en.wikibooks.org/wiki/C%2B%2B_Programming)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:82
msgid "A comprehensive wikibook with C++ lessons and exercises"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:83
msgid "[W3Schools C++](https://www.w3schools.com/cpp/cpp_intro.asp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:83
msgid "A set of C++ tutorials and other resources aimed at beginners"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:84
msgid "[LearnCpp](https://www.learncpp.com/)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:84
msgid "Tutorials to get to grips with C++"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:85
msgid "[cppreference](https://en.cppreference.com/w/)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:85
msgid "A reference site for C++"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:87
msgid ""
"We also provide a list of continuously updated resources to learn C++ in "
"[this wiki page](https://community.kde.org/Get_Involved/development/"
"Learn#C_and_C++)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:89
msgid "Creating classic KDE applications using QtWidgets"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:91
msgid ""
"If you'd like to work on KDE applications such as Dolphin, Kontact, or Kate, "
"you will need to learn how to use QtWidgets, which uses a completely "
"different way of developing user interfaces with Qt. More complex KDE "
"applications or applications that follow a traditional design tend to be "
"built with QtWidgets."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:93
msgid ""
"QtWidgets is somewhat more daunting to work with than QML (and *much* more C+"
"+ intensive!). Luckily, we have [a set of tutorials](/docs/getting-started/"
"kxmlgui) in the KDE Docs that will help you become more familiar with them."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:95
msgid "More QML and QtQuick"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:97
msgid ""
"The Qt project is extensive, and so are QML and QtQuick. There is a lot of "
"functionality we haven't covered, but there is a lot of documentation we can "
"pull from to find out more."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:99
msgid ""
"If you want to look up what specific components do, look no further than "
"[Qt's official QML documentation.](https://doc.qt.io/qt-6/qtquick-index.html)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:100
msgid ""
"If you are looking for a more guided approach to learning, [the QMLBook]"
"(https://qmlbook.github.io/) is a great place to start."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:102
msgid "More Kirigami"
msgstr "Daha Fazla Kirigami"

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:104
msgid ""
"This documentation includes a lot more about Kirigami. You can poke through "
"some of the Components pages to find out more about some of the QML "
"components that Kirigami provides for you to use."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:106
msgid ""
"We recommend you also take a look at [Kirigami Gallery](https://apps.kde.org/"
"kirigami2.gallery/), an application designed by KDE developers to "
"demonstrate Kirigami's tools and capabilities. It provides both interactive "
"examples of Kirigami components as well as links to the source code of these "
"examples so you can see how they were built."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:108
msgid "The sky is the limit!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:110
msgid ""
"Don't be intimidated by all the material on here! No one starts off being "
"able to create something like Plasma from scratch. But KDE is no multi-"
"billion dollar company with a high barrier for entry (we have no five-round "
"coding interviews!) and as long as you are nice, you will be welcomed."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps/index.md:112
msgid "Good luck!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:0
msgid "Explaining pages"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:0
msgid "Pages allow you to organize your application content"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:9
msgid "Our app"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:11
msgid ""
"In the previous tutorial, we managed to set up, build, and compile our first "
"Kirigami application. With the basics in place, we can begin our journey "
"towards creating a fully-featured application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:13
msgid ""
"These tutorials will focus on creating an application that lets the user see "
"how many days are left until an event of their choice."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:15
msgid ""
"We also recommend you check out the [Kirigami Gallery](https://apps.kde.org/"
"en/kirigami2.gallery), which provides a number of useful UI examples."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:17
msgid ""
"In this section we'll be focusing on pages, one of the key structural "
"elements of any Kirigami application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:19
msgid "Pages"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:21
msgid ""
"Kirigami apps are typically organized in pages by using [Kirigami.Page](docs:"
"kirigami;org.kde.kirigami.Page). Pages are the different \"screens\" of an "
"app. You will want to have a page dedicated to specific aspects of your "
"app's interaction, and to make things easier you can create different QML "
"files for each page."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:23
msgid ""
"Pages are organized in a [page stack](https://api-staging.kde.org/qml-org-"
"kde-kirigami-abstractapplicationwindow.html#pageStack-prop) where they can "
"be pushed and popped. On a phone only the top-most page is shown, whereas on "
"a larger screen (desktop or tablet), if desired, multiple pages can be shown "
"next to each other."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:27
msgid "A single page on the phone"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:29
msgid "Two pages next to each other on the desktop"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:35
msgid ""
"A [Kirigami.Page](docs:kirigami;org.kde.kirigami.Page) inherits from a "
"[Controls.Page](docs:qtquickcontrols;QtQuick.Controls.Page), and as such you "
"can use the latter's properties as well."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:37
msgid ""
"When looking through QML API documentation, make sure to look into the "
"functions and properties inherited by the API you are looking at as well."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:41
msgid ""
"Let's go back to the `Main.qml` file we created in our previous tutorial:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:45
msgid ""
"We make our application start to our [Kirigami.Page](docs:kirigami;org.kde."
"kirigami.Page). All we have included in it is a label containing \"Hello "
"World\", but we're going to spruce things up a little."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:47
msgid ""
"The idea behind our app is that we're going to be able to display a bunch of "
"countdowns to the user. The problem with a normal [Kirigami.Page](docs:"
"kirigami;org.kde.kirigami.Page) is that it has a fixed vertical size, so "
"instead we can use a [Kirigami.ScrollablePage](docs:kirigami;org.kde."
"kirigami.ScrollablePage), which already comes with its own built-in "
"scrollbar."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:51
msgid ""
"Kirigami pages also feature neat titles placed within the toolbar, quickly "
"indicating to the user which page they are on. All we need to do is to set a "
"page title using the `title` property of [Kirigami.ScrollablePage](docs:"
"kirigami;org.kde.kirigami.ScrollablePage). In this case, we used one of the "
"`i18nc()` functions we explored in our previous tutorial to this end."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:55
msgid ""
"You could also choose to define your page within its own QML document. To do "
"so, you'd create the new QML file, for example `kirigami-tutorial/src/qml/"
"StartPage.qml`, add it to your `kirigami-tutorial/src/CMakeLists.txt` file, "
"and set the window's first page to load it, like so:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:61
msgid ""
"`pageStack.initialPage` sets the initial Page of the application's page "
"stack, and [Qt.resolvedUrl](docs:qtqml;QtQml.Qt::resolvedUrl) converts the "
"relative URL of the QML file into an absolute one."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages/index.md:63
msgid ""
"There is further information about alternative page structures [within our "
"Kirigami documentation](/docs/getting-started/kirigami/components-"
"pagerow_pagestack)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:0
msgid "Using separate files in a C++ project"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:0
msgid ""
"Separating unwieldy code into different files, and attach signals to your "
"components.\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:11
msgid "Why and how"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:13
msgid ""
"For the first time, we will be separating some of our components into their "
"own QML files. If we keep adding things to `Main.qml`, it's going to quickly "
"become hard to tell what does what, and we risk muddying our code."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:15
msgid ""
"In this tutorial, we will be splitting the code in `Main.qml` into `Main."
"qml`, `AddDialog.qml` and `KountdownDelegate.qml`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:17
msgid ""
"Additionally, even when spreading code between multiple QML files, the "
"amount of files in real-life projects can get out of hand. A common solution "
"to this problem is to logically separate files into different folders. We "
"will take a brief look at three common approaches seen in real projects, and "
"implement one of them:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:19
msgid "storing QML files together with C++ files"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:20
msgid "storing QML files in a different directory under the same module"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:21
msgid "storing QML files in a different directory under a different module"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:23
msgid ""
"After the split, we will have [separation of concerns](https://en.wikipedia."
"org/wiki/Separation_of_concerns) between each file, and [implementation "
"details will be abstracted](https://en.wikipedia.org/wiki/"
"Abstraction_(computer_science)), making the code more readable."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:25
msgid "Storing QML files together with C++ files"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:27
msgid ""
"This consists of keeping the project's QML files together with C++ files in "
"`src/`. This sort of structure would look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:41
msgid ""
"This is what we did previously. In the above case, you would just need to "
"keep adding QML files to the existing `kirigami-tutorial/src/CMakeLists."
"txt`. There's no logical separation at all, and once the project gets more "
"than a couple of QML files (and C++ files that create types to be used in "
"QML), the folder can quickly become crowded."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:43
msgid "Storing QML files in a different directory under the same module"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:45
msgid ""
"This consists of keeping all QML files in a separate folder, usually `src/"
"qml/`. This sort of structure would look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:60
msgid ""
"This structure is very common in KDE projects, mostly to avoid having an "
"extra CMakeLists.txt file for the `src/qml/` directory and creating a "
"separate module. This method keeps the files themselves in a separate "
"folder, but you would also need to add them in `kirigami-tutorial/src/"
"CMakeLists.txt`. All created QML files would then belong to the same QML "
"module as `Main.qml`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:62
msgid ""
"In practice, once the project gets more than a dozen QML files, while it "
"won't crowd the `src/` directory, it will crowd the `src/CMakeLists.txt` "
"file. It will become difficult to differentiate between traditional C++ "
"files and C++ files that have types exposed to QML."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:64
msgid ""
"It will also break the concept of locality (localisation of dependency "
"details), where you would keep the description of your dependencies in the "
"same place as the dependencies themselves."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:66
msgid "Storing QML files in a different directory under a different module"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:68
msgid ""
"This consists of keeping all QML files in a separate folder with its own "
"CMakeLists.txt and own separate QML module. This sort of structure would "
"look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:84
msgid ""
"This structure is not as common in KDE projects and requires writing an "
"additional CMakeLists.txt, but it is the most flexible. In our case, we name "
"our folder \"components\" since we are creating two new QML components out "
"of our previous `Main.qml` file, and keep information about them in "
"`kirigami-tutorial/src/components/CMakeLists.txt`. The `Main.qml` file "
"itself stays in `src/` so it's automatically used when running the "
"executable, as before."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:86
msgid ""
"Later on, it would be possible to create more folders with multiple QML "
"files, all grouped together by function, such as \"models\" and \"settings"
"\", and C++ files that have types exposed to QML (like models) could be kept "
"together with other QML files where it makes sense."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:88
msgid "We will be using this structure in this tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:90
msgid "Preparing CMake for the new files"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:92
msgid ""
"First, create the file `kirigami-tutorial/src/components/CMakeLists.txt` "
"with the following contents:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:98
msgid ""
"Because the target is different from the executable, it will function as a "
"different QML module, in which case we will need to do two things: make it "
"*generate* code for it to work as a Qt plugin with [GENERATE_PLUGIN_SOURCE]"
"(https://api.kde.org/ecm/module/ECMQmlModule.html), and *finalize* it with "
"[ecm_finalize_qml_module()](https://api.kde.org/ecm/module/ECMQmlModule."
"html). We then install it exactly like in previous lessons."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:100
msgid ""
"We needed to use [add_library()](https://cmake.org/cmake/help/latest/command/"
"add_library.html) so that we can link `kirigami-hello-components` to the "
"executable in the [target_link_libraries()](https://cmake.org/cmake/help/"
"latest/command/target_link_libraries.html) call in `kirigami-tutorial/src/"
"CMakeLists.txt`:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:104
msgid ""
"We also need to use [add_subdirectory()](https://cmake.org/cmake/help/latest/"
"command/add_subdirectory.html) so CMake will find the `kirigami-tutorial/src/"
"components/` directory."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:106
msgid ""
"In the previous lessons, we did not need to add the `org.kde.tutorial` "
"import to our `Main.qml` because it was not needed: being the entrypoint for "
"the application, the executable would run the file immediately anyway. Since "
"our components are in a separate QML module, the a new import in `kirigami-"
"tutorial/src/Main.qml` is necessary, the same one defined earlier, `org.kde."
"tutorial.components`:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:115
msgid "The rest of the code..."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:118
msgid "And we are ready to go."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:120
msgid "Splitting Main.qml"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:122
msgid "Let's take a look once again at the original `Main.qml`:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:126
msgid ""
"The custom delegate with `id: kountdownDelegate` can be split completely "
"because it is already enveloped in a [QML Component type](docs:qtqml;QtQml."
"Component). We use a Component to be able to define it without needing to "
"instantiate it; separate QML files work the same way."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:128
msgid ""
"If we move the code to a separate files, then, there is no point in leaving "
"it enveloped in a Component: we can split just the [Kirigami.AbstractCard]"
"(docs:kirigami;org.kde.kirigami.AbstractCard) in the separate file. Here is "
"the resulting `KountdownDelegate.qml`:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:132
msgid ""
"Our dialog with `id: addDialog` is not enveloped in a Component, and it is "
"not a component that is visible by default, so the code can be copied as is "
"into the `AddDialog.qml`:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:136
msgid "With the code split, `Main.qml` thus becomes much shorter:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:140
msgid ""
"We now have two extra QML files, `AddDialog.qml` and `KountdownDelegate`, "
"and we need to find some way of using them in `Main.qml`. The way to add the "
"contents of the new files to `Main.qml` is by *instantiating* them."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:142
msgid "`AddDialog.qml` becomes `AddDialog {}`:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:146
msgid "`KountdownDelegate.qml` becomes `KountdownDelegate {}`:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:150
msgid ""
"Most cases you have seen of a component started with uppercase and followed "
"by brackets were instantiations of a QML component. This is why our new QML "
"files need to start with an uppercase letter."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles/index.md:152
msgid ""
"Compile the project and run it, and you should have a functional window that "
"behaves exactly the same as before, but with the code split into separate "
"parts, making things much more manageable."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:0
msgid "Kirigami with C++"
msgstr "C++ ile Kirigami"

#: content/docs/getting-started/kirigami/setup-cpp/index.md:0
msgid "Create your first Kirigami application with C++\n"
msgstr "C++ ile ilk Kirigami uygulamanızı oluşturun.\n"

#: content/docs/getting-started/kirigami/setup-cpp/index.md:12
#: content/docs/getting-started/kirigami/setup-rust/index.md:11
msgid "Installing Kirigami"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:14
msgid ""
"Before getting started, we will need to install Kirigami on our machine. "
"There are three ways to do so:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:16
msgid ""
"[Installing Kirigami from the repositories in your Linux distribution]"
"(#linux)"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:17
msgid "[Using kde-builder](#kde-builder)"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:18
msgid "[Installing Kirigami with Craft](#craft)"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:20
msgid ""
"If you are on a [sufficiently up-to-date distribution](docs/getting-started/"
"building#choosing) such as Debian Testing, latest non-LTS Ubuntu, Fedora, "
"openSUSE Tumbleweed, or Arch, you may [install Kirigami from your "
"distribution](#linux)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:22
msgid ""
"If you are on a [not up-to-date distribution](docs/getting-started/"
"building#choosing) such as Debian Stable or LTS Ubuntu, you should use [kde-"
"builder](#kde-builder) for this tutorial. It should use at most 2 GB of "
"storage."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:24
msgid "Installing Kirigami from the repositories in your Linux distribution"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:26
msgid ""
"We need a C++ compiler, Qt development packages, and Kirigami. Open a "
"terminal application and run one of the following, depending on which Linux "
"distribution you are using:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:34
#: content/docs/getting-started/kirigami/setup-rust/index.md:20
msgid ""
"Further information for other distributions can be found [here](/docs/"
"getting-started/building/help-dependencies)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:36
msgid "Using kde-builder"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:38
msgid ""
"[Set up your development environment with kde-builder](/docs/getting-started/"
"building/kde-builder-setup/). That will give you the necessary development "
"tools and underlying libraries, and build the KDE Frameworks from scratch."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:40
msgid ""
"Create a folder `~/kde/src/kirigami-tutorial`. In that folder you will place "
"the source code files from this tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:42
msgid "Add the following at the end of your `~/.config/kde-builder.yaml`:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:49
msgid "⏳ With kdesrc-build..."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:51
msgid ""
"<details>\n"
"<summary>Click here to know how this was done with kdesrc-build</summary></"
"br>\n"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:54
msgid ""
"This step used to be done by writing to `~/.config/kdesrc-buildrc` instead "
"with a different syntax:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:67
msgid "Installing Kirigami with Craft"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:69
msgid ""
"KDE has a custom tool to easily install most of its libraries and programs: "
"**Craft**. It can be used to install Kirigami on [Windows](https://community."
"kde.org/Guidelines_and_HOWTOs/Build_from_source/Windows), [Android](https://"
"community.kde.org/Craft/Android) and [macOS](https://community.kde.org/"
"Guidelines_and_HOWTOs/Build_from_source/Mac)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:71
msgid ""
"While Craft is also available for Linux and FreeBSD, its intended use is "
"only for AppImages and packaging."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:73
msgid ""
"You will need to follow the [setup instructions for Craft](https://community."
"kde.org/Craft). By the end of the setup, you should have run an environment "
"setup file (`craftenv.ps1` or `craftenv.sh`), which will give you a terminal "
"shell where you will be compiling your Kirigami application."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:75
msgid "After that, you may simply run the following on a terminal:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:81
msgid ""
"This will take a long while to finish on first run. If you close your "
"terminal, you can simply run the environment setup file again to compile "
"your app."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:83
#: content/docs/getting-started/kirigami/setup-python/index.md:23
#: content/docs/getting-started/kirigami/setup-rust/index.md:22
msgid "Project structure"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:85
msgid ""
"While there are tools that can easily set up our files, we are going to "
"create them manually. This will let us better understand the pieces that are "
"going to make up our new application."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:87
msgid ""
"First we create our project folder (you can use the commands below). We are "
"going to call ours `kirigami-tutorial/`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:99
msgid ""
"Within this folder we are going to create a `src/` folder and `CMakeLists."
"txt`. It is generally considered good practice to place all our main C++ "
"code files in a `src/` folder. We also put the `Main.qml` file in it since "
"it will be run together with the executable."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:115
msgid ""
"In case you want to automatically build the project with kde-builder, custom "
"module name should be the same as the project root folder (in our case it "
"will be \"kirigami-tutorial\"), otherwise you would need to customize the "
"`source-dir` or `dest-dir` for the module. We will assume the path to your "
"`main.cpp` will be `~/kde/src/kirigami-tutorial/src/main.cpp`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:119
msgid "Main.qml"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:123
#: content/docs/getting-started/kirigami/setup-python/index.md:118
#: content/docs/getting-started/kirigami/setup-rust/index.md:126
msgid "Here's where we will be handling our application's frontend."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:125
#: content/docs/getting-started/kirigami/setup-python/index.md:120
#: content/docs/getting-started/kirigami/setup-rust/index.md:128
msgid ""
"If you know some Javascript, then much of QML will seem familiar to you "
"(though it does have its own peculiarities). [Qt's documentation](https://"
"doc.qt.io/qt-6/qtqml-index.html) has an extensive amount of material on this "
"language if you feel like trying something on your own. Over the course of "
"these tutorials we will be focusing much of our attention on our QML code, "
"where we can use Kirigami to get the most out of it."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:127
#: content/docs/getting-started/kirigami/setup-python/index.md:122
#: content/docs/getting-started/kirigami/setup-rust/index.md:130
msgid ""
"For now, let's focus on `Main.qml`. First we [import](https://doc.qt.io/qt-6/"
"qtqml-syntax-imports.html) a number of important modules:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:129
#: content/docs/getting-started/kirigami/setup-python/index.md:124
#: content/docs/getting-started/kirigami/setup-rust/index.md:132
msgid ""
"[QtQuick](https://doc.qt.io/qt-6/qtquick-index.html), the standard library "
"used in QML applications."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:130
#: content/docs/getting-started/kirigami/setup-python/index.md:125
#: content/docs/getting-started/kirigami/setup-rust/index.md:133
msgid ""
"[QtQuick Controls](https://doc.qt.io/qt-6/qtquickcontrols-index.html), which "
"provides a number of standard controls we can use to make our applications "
"interactive."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:131
#: content/docs/getting-started/kirigami/setup-python/index.md:126
#: content/docs/getting-started/kirigami/setup-rust/index.md:134
msgid ""
"[QtQuick Layouts](https://doc.qt.io/qt-6/qtquicklayouts-index.html), which "
"provides tools for placing components within the application window."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:132
#: content/docs/getting-started/kirigami/setup-python/index.md:127
msgid ""
"[Kirigami](docs:kirigami;kirigami-index.html), which provides a number of "
"components suited for creating applications that work across devices of "
"different shapes and sizes."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:136
#: content/docs/getting-started/kirigami/setup-python/index.md:131
#: content/docs/getting-started/kirigami/setup-rust/index.md:139
msgid ""
"Putting the QtQuick Controls and Kirigami imports into separate namespaces "
"using the `as` keyword is a best practice that ensures no components with "
"the same name can conflict. You might see different names for QtQuick "
"Controls in the wild, such as \"QQC\" or \"QQC2\". We will be using "
"\"Controls\" in this tutorial for clarity."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:140
#: content/docs/getting-started/kirigami/setup-python/index.md:135
msgid ""
"We then come to our base element, [Kirigami.ApplicationWindow](docs:kirigami;"
"org.kde.kirigami.ApplicationWindow), which provides some basic features "
"needed for all Kirigami applications. This is the window that will contain "
"each of our pages, the main sections of our UI."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:142
#: content/docs/getting-started/kirigami/setup-python/index.md:137
#: content/docs/getting-started/kirigami/setup-rust/index.md:145
msgid ""
"We then set the window's `id` property to \"root\". IDs are useful because "
"they let us uniquely reference a component, even if we have several of the "
"same type."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:144
msgid ""
"We also set the window `title` property to \"Hello World\". You'll notice "
"that we have wrapped our \"Hello World\" string in a function called "
"`i18nc()`, where we detail the context of the string as well as the string "
"itself."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:148
msgid ""
"[i18n()](https://techbase.kde.org/Development/Tutorials/Localization/"
"i18n#Translatable_Code_Using_i18n()) functions make your app more easily "
"translatable, as they return a version of the provided string in the user's "
"language (as long as your app has been localised for that language). While "
"an English user might see our window title as \"Hello World\", a Spanish "
"user would see \"Hola Mundo\"."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:150
msgid ""
"[i18nc()](https://techbase.kde.org/Development/Tutorials/Localization/"
"i18n#Adding_Context_with_i18nc()) builds on the `i18n()` function by "
"allowing developers to provide some context to translators working on the "
"app. Here we clarify that the UI component is the title of the application "
"window, so we have included the string \"@title:window\" before \"Hello World"
"\". See the [Ki18n Programmer's guide](https://api.kde.org/frameworks/ki18n/"
"html/prg_guide.html#good_ctxt) for more details."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:154
#: content/docs/getting-started/kirigami/setup-python/index.md:141
msgid ""
"We then set the first page of our page stack. Most Kirigami applications are "
"organised as a stack of pages, each page containing related components "
"suited to a specific task. For now, we are keeping it simple, and sticking "
"to a single page. [pageStack](https://api-staging.kde.org/qml-org-kde-"
"kirigami-abstractapplicationwindow.html#pageStack-prop) is an initially "
"empty stack of pages provided by [Kirigami.ApplicationWindow](docs:kirigami;"
"org.kde.kirigami.ApplicationWindow), and with `pageStack.initialPage: "
"Kirigami.Page {...}` we set the first page presented upon loading the "
"application to a [Kirigami.Page](docs:kirigami;org.kde.kirigami.Page). This "
"page will contain all our content."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:156
msgid ""
"Finally, we include in our page a [Controls.Label](docs:qtquickcontrols;"
"QtQuick.Controls.Label) that lets us place text on our page. We use `anchors."
"centerIn: parent` to center our label horizontally and vertically within our "
"parent element. In this case, the parent component of our label is [Kirigami."
"Page](docs:kirigami;org.kde.kirigami.Page). The last thing we need to do is "
"set its text: `text: i18n(\"Hello World!\")`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:158
msgid "org.kde.tutorial.desktop"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:160
#: content/docs/getting-started/kirigami/setup-python/index.md:72
#: content/docs/getting-started/kirigami/setup-rust/index.md:58
msgid ""
"The primary purpose of [Desktop Entry files](https://specifications."
"freedesktop.org/desktop-entry-spec/latest/) is to show your app on the "
"application launcher on Linux. Another reason to have them is to have window "
"icons on Wayland, as they are required to tell the compositor \"this window "
"goes with this icon\"."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:162
msgid ""
"It must follow a [reverse-DNS naming scheme](https://en.wikipedia.org/wiki/"
"Reverse_domain_name_notation) followed by the `.desktop` extension such as "
"`org.kde.tutorial.desktop`:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:168
msgid ""
"Window and taskbar icons will work in a Wayland session only if apps' "
"desktop files are placed in `~/.local/share/applications` or `/usr/share/"
"applications`. To get icons working in this tutorial, either copy the app's "
"desktop file there or switch to a development session as instructed in [kde-"
"builder tutorial](/docs/getting-started/building/kde-builder-compile). Some "
"KDE applications might have working icons if they were already installed on "
"the system."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:172
#: content/docs/getting-started/kirigami/setup-rust/index.md:64
msgid "CMakeLists.txt"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:174
msgid ""
"`CMakeLists.txt` files are needed to use KDE's build system of choice, "
"[CMake](https://cmake.org/). Our `kirigami-tutorial/CMakeLists.txt` file is "
"going to specify some of our application's characteristics. It also includes "
"some of the dependencies we need in order to compile our project."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:178
msgid ""
"The `CMakeLists.txt` defines how to build your projects. Most of the content "
"here is just to bootstrap your project. You can read a line-by-line, in-"
"depth explanation of what this CMakeLists file does [here](/docs/getting-"
"started/kirigami/advanced-understanding_cmakelists/)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:180
msgid ""
"The most important thing to keep in mind is that the C++ build dependencies "
"of Qt and KDE Frameworks are managed with [find_package()](https://cmake.org/"
"cmake/help/latest/command/find_package.html) and QML runtime dependencies "
"are managed with [ecm_find_qml_module()](https://api.kde.org/ecm/module/"
"ECMFindQmlModule.html). You will have to modify these lines and include any "
"additional components that you decide to use during the development of your "
"application."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:182
msgid ""
"The line with `add_subdirectory(src)` points CMake to the `kirigami-tutorial/"
"src/` directory, where our source code is located."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:184
msgid ""
"The line with `install()` tells CMake where to install the desktop file."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:186
msgid ""
"Let's delve into the `kirigami-tutorial/src/CMakeLists.txt` file in there."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:190
msgid "This file consists of five steps:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:192
msgid "create an executable"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:193
msgid "change the executable into a QML module that accepts QML files"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:194
msgid "add C++ and QML files to the executable"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:195
msgid "link the libraries necessary for the executable to run"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:196
msgid "install the executable to the right place"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:198
msgid ""
"Next time you need to add more QML files, add them to the existing "
"`ecm_target_qml_sources()` call. C++ files that use the [QML_ELEMENT]"
"(https://doc.qt.io/qt-6/qtqml-cppintegration-definetypes.html) keyword which "
"we will see later in the tutorial can be added using `target_sources()`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:200
#: content/docs/getting-started/kirigami/setup-rust/index.md:82
msgid ""
"Now that CMake has been taken care of, let's look at the files we are going "
"to spend the majority of our time working with."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:204
msgid ""
"The file `kirigami-tutorial/src/main.cpp` handles the \"business logic\" of "
"our application. C++ is handy because it is flexible and fast, even if it is "
"more involved than other programming languages."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:206
msgid ""
"It also functions as the entrypoint to our application. The two parts of our "
"project, the backend and the user interface, are both set up and started "
"here."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:210
msgid ""
"For now, we don't need to go into too much detail regarding what our `main."
"cpp` code does, but its role will grow significantly more important once we "
"decide to add more complex functionality to our application in the future."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:212
msgid "Theming on Windows"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:214
msgid ""
"<details>\n"
"<summary>Click here to read more</summary>\n"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:217
msgid ""
"The application needs to set its icon theme, QStyle, and QtQuick Controls "
"style to Breeze in order to show up on Windows. To learn more about it, see "
"[Figuring out main.cpp](/docs/getting-started/kirigami/advanced-maincpp/)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:223
msgid ""
"If you want to get ahead, you can read more about how this `main.cpp` works "
"in [Figuring out main.cpp](/docs/getting-started/kirigami/advanced-maincpp)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:225
msgid ""
"If you want to see a few ways on how the C++ code can be improved, like "
"using [KAboutData](docs:kcoreaddons;KAboutData) for translatable application "
"metadata, be sure to check our [KXmlGui tutorial](/docs/getting-started/"
"kxmlgui)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:227
msgid "For now, the part that interests us is this line:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:233
msgid ""
"The first argument is the URI set in `kirigami-tutorial/src/CMakeLists.txt`, "
"and the second argument is the name of the QML module we want to use "
"(`Main`, coming from the name of our `Main.qml` file, which needs to start "
"with an uppercase letter)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:235
msgid "The old method"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:237
msgid ""
"<details>\n"
"<summary>You might encounter this alternative way to load QML files in real "
"code!</summary>\n"
"<br>\n"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:241
msgid ""
"The old method of loading QML files had some disadvantages and after Qt6 it "
"became excessively verbose:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:247
msgid ""
"This [Qt resource URI](https://doc.qt.io/qt-6/resources.html) above follows "
"the pattern `<resource_prefix><import_URI><optional_QML_dir><file>`. In this "
"case:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:249
msgid "resource prefix = default / in Qt5, /qt/qml in Qt6"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:250
msgid "import URI = /org/kde/tutorial, which matches the URI org.kde.tutorial"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:251
msgid ""
"optional QML dir = /qml, necessary if the QML files are stored in a "
"directory called qml/"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:252
msgid "file = the QML file"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:258
#: content/docs/getting-started/kirigami/setup-rust/index.md:153
msgid "Compiling and installing the application"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:260
msgid ""
"We are almost at the finish line. The last thing we need to do is build and "
"run our application. Doing so will depend on which platform you are on."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:262
msgid "Linux or FreeBSD"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:264
msgid "Compiling with kde-builder"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:266
msgid ""
"Make sure you have followed the instructions in [Using kde-builder](#kde-"
"builder)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:268
msgid ""
"Compile the necessary build dependencies with kde-builder, then compile "
"`kirigami-tutorial` by running the following commands in a terminal:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:275
msgid "Compiling manually"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:277
msgid ""
"Change directories to the project's root folder, then run the following "
"command in a terminal:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:285
msgid ""
"The program will be installed to `~/.local/bin` and its desktop entry to `~/."
"local/share/applications`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:287
msgid "Windows"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:289
msgid ""
"If you are compiling your project on Windows after having set up [Craft]"
"(#craft), CMake should automatically detect the right compiler:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:298
msgid ""
"Depending on how you installed the compiler, you might need to specify a "
"CMake Generator for the first step, depending on whether you are using "
"Visual Studio (msvc) or MinGW (make) to compile your projects."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:300
msgid ""
"If Visual Studio, depending on the compiler you chose to install, it might "
"be:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:306
msgid "Or:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:312
msgid "If MinGW:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:320
msgid "In both cases, the program will be installed to `C:\\CraftRoot\\bin`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:322
msgid ""
"If you ever get in doubt as to the name of the compiler that should be used "
"in the `cmake` call, run:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:328
msgid "It will list all available generators."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:332
msgid "You can then run the `kirigami-hello` program with:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:335
msgid "On Linux, manually"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:336
msgid "With kde-builder"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:337
msgid "With kdesrc-build"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:338
msgid "On Windows"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:341
#: content/docs/getting-started/kirigami/setup-python/index.md:185
msgid ""
"Voilà! Now you will see your very first Kirigami app appear before your very "
"own eyes."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:343
#: content/docs/getting-started/kirigami/setup-python/index.md:187
#: content/docs/getting-started/kirigami/setup-rust/index.md:173
msgid "![Screenshot of the generated Kirigami application](hello-kworld.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:345
#: content/docs/getting-started/kirigami/setup-python/index.md:179
#: content/docs/getting-started/kirigami/setup-rust/index.md:175
msgid ""
"To run the new QML application in mobile mode, you can use "
"`QT_QUICK_CONTROLS_MOBILE=1`:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:351
#: content/docs/getting-started/kirigami/setup-rust/index.md:181
msgid ""
"If you have compiled the project manually with CMake and for some reason "
"you'd like to uninstall the project, you can run:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:359
msgid ""
"Next time you want to create the files and folders needed, you can use "
"[KAppTemplate](https://apps.kde.org/kapptemplate) or [KDevelop](https://apps."
"kde.org/kdevelop/) to automatically generate a suitable project to start "
"from. They are available from each major distribution's repositories. These "
"applications will also generate files containing [AppStream](https://www."
"freedesktop.org/software/appstream/docs/sect-Metadata-Application.html) "
"metadata and a `.desktop` file that contains information about how the "
"application should be displayed in a linux application launcher."
msgstr ""

#: content/docs/getting-started/kirigami/setup-cpp/index.md:361
msgid ""
"Thanks to the magic of CMakeLists, you can also use IDEs such as KDevelop or "
"[QtCreator](https://www.qt.io/product/development-tools) to develop this "
"application within a comfortable environment with minimal effort."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:0
msgid "Kirigami with Python"
msgstr "Python ile Kirigami"

#: content/docs/getting-started/kirigami/setup-python/index.md:0
msgid "Create your first Kirigami application with PySide\n"
msgstr "PySide ile ilk Kirigami uygulamanızı oluşturun.\n"

#: content/docs/getting-started/kirigami/setup-python/index.md:12
msgid "Prerequisites"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:14
msgid ""
"Before getting started, we will need to install Kirigami and PySide on our "
"machine."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:21
msgid ""
"If you are on a distribution with old PySide6 or PyQt6 packages, this "
"tutorial works with [Building software with distrobox](/docs/getting-started/"
"building/containers-distrobox)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:25
msgid ""
"First we create our project folder (you can use the commands below). We are "
"going to call ours `kirigami_python/`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:31
msgid "To add our QML files"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:32
msgid "The main file to manage the project"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:35
msgid "To import the src/ directory as a package"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:36
msgid "To signal app as the entrypoint"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:42
msgid ""
"The package name is going to be `kirigami_python`, the \"executable"
"\" (console script) will be called `kirigami_hello`, and the entrypoint will "
"be `app`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:46
msgid ""
"To quickly generate this folder structure, just run: `mkdir -p "
"kirigami_python/src/qml/`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:50
msgid ""
"For a more comprehensive project that goes into further detail about this "
"file structure, see [Full project in Python + Kirigami](/docs/getting-"
"started/python/python-app)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:52
msgid "pyproject.toml"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:54
msgid ""
"Modern Python applications need only a single TOML file to specify all "
"metadata, package information and dependencies as of [PEP 621](https://peps."
"python.org/pep-0621/). The following serves as a good starter for an "
"application and can be extended later."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:56
msgid ""
"Most of the contents in this file are boilerplate, and a more complete "
"version of it can be seen in [Python with Kirigami: General Structure](/docs/"
"getting-started/python/python-package#general-structure)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:60
msgid ""
"Note the highlighted lines. As mentioned under [Project structure](#project-"
"structure), the name of the package is `kirigami_python`, the name of the "
"executable is `kirigami_hello`, and the name of the entrypoint is `app`. In "
"particular, the following should be noted:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:62
msgid ""
"The project script consists of an entrypoint script that will be generated "
"by setuptools for the application to run, in this case `kirigami_hello`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:63
msgid ""
"The generated project script `kirigami_hello` runs the `main()` function in "
"the `app.py` script in the `kirigami_python` package."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:64
msgid ""
"The default `package-dir` for Python projects is usually the root directory. "
"In this case, this is overridden with the `src/` subdirectory so it acts "
"like it is the root directory of the package."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:65
msgid ""
"The `package-dir` is why the generated project script does `kirigami_python "
"→ app` instead of `kirigami_python → src → app`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:66
msgid ""
"The `package-dir` is also why the `importlib.resources.files()` call in [app."
"py](#app-py) does `kirigami_python → qml → Main.qml` instead of "
"`kirigami_python → src → qml → Main.qml`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:68
msgid ""
"See [Running directly, as a module, and as a console script](/docs/getting-"
"started/python/python-package#running-directly-as-a-module-and-as-a-console-"
"script) for details."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:70
msgid "org.kde.kirigami_python.desktop"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:74
msgid ""
"It must follow a [reverse-DNS naming scheme](https://en.wikipedia.org/wiki/"
"Reverse_domain_name_notation) followed by the `.desktop` extension such as "
"`org.kde.kirigami_python.desktop`:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:80
msgid ""
"Window and taskbar icons will work in a Wayland session only if apps' "
"desktop files are placed in `~/.local/share/applications` or `/usr/share/"
"applications`. To get icons working in this tutorial, copy the app's desktop "
"file there."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:84
msgid "MANIFEST.in"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:86
msgid ""
"This file is simply a declaration of additional source code files that "
"should be present in the package when the application runs. Python by "
"default doesn't include QML files in packages, and they need to be available "
"in order for the application to run."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:90
msgid "src/app.py"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:94
msgid ""
"Since this is a GUI application, we want the main function to only run when "
"the script is run, not when it's imported, so we need the `if __name__ == "
"\"__main__\"` condition at the end of the file. See [Running directly, as a "
"module, and as a console script](/docs/getting-started/python/python-"
"package#running-directly-as-a-module-and-as-a-console-script) for details."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:96
msgid ""
"We create a QGuiApplication and initialize the QML engine, and with "
"`QGuiApplication.exec()` the application will keep running until closed. "
"Then `importlib.resources.files()` grabs the path to a file that is present "
"in the package, namely our `Main.qml`. With that path, we load the QML file "
"into the QML engine as the main entrypoint for the application interface."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:98
msgid "src/\\_\\_init\\_\\_.py"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:100
msgid ""
"Create an empty `kirigami_python/src/__init__.py` file. This file just needs "
"to be present in order to import a directory as a package."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:106
msgid "src/\\_\\_main\\_\\_.py"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:108
msgid "Create a `kirigami_python/src/__main__.py` with the following contents:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:112
msgid ""
"This simply adds the contents of the current directory (`src/`) and imports "
"it as a module named `app`, then immediately runs the `main()` function of "
"the application."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:114
#: content/docs/getting-started/kirigami/setup-rust/index.md:122
msgid "src/qml/Main.qml"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:139
#: content/docs/getting-started/kirigami/setup-rust/index.md:147
msgid "We also set the window `title` property to \"Hello World\"."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:143
msgid ""
"Finally, we include in our page a [Controls.Label](docs:qtquickcontrols;"
"QtQuick.Controls.Label) that lets us place text on our page. We use `anchors."
"centerIn: parent` to center our label horizontally and vertically within our "
"parent element. In this case, the parent component of our label is [Kirigami."
"Page](docs:kirigami;org.kde.kirigami.Page). The last thing we need to do is "
"set its text: `text: \"Hello World!\"`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:147
msgid ""
"You can run the `kirigami_hello` console script without needing to install "
"it first:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:153
msgid ""
"The flag `--system-site-packages` is needed to make Python have access to "
"the Python packages from your distribution. This is required because "
"Kirigami and PySide need to have been built against the same Qt version to "
"work, which is the case when both of them come from the distribution."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:155
msgid ""
"The flag `--spec` determines the path to the source code or wheel package "
"that has the program, and `kirigami_hello` is the executable script to be "
"run."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:157
msgid "To build and install the Python package, run:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:163
msgid ""
"The package will be installed to `~/.local/share/pipx/venvs/kirigami-"
"python`, and an executable script will be installed to `~/.local/bin/"
"kirigami_hello`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:165
msgid "Use of pipx versus pip"
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:167
msgid ""
"Unlike [Python with Kirigami: Creating a Python package](/docs/getting-"
"started/python/python-package), this tutorial used `pipx` to make the "
"project easier to run and install. The same steps can be done manually with "
"`venv`, `build` and `pip` as in the more complete tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:169
msgid ""
"`pipx` is useful and recommended as per [PEP 668](https://peps.python.org/"
"pep-0668/) for running Python applications, while `pip` is multi-purpose and "
"can also be used for importable Python modules."
msgstr ""

#: content/docs/getting-started/kirigami/setup-python/index.md:173
msgid "After this, the application can be launched by running:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:0
#, fuzzy
#| msgid "Kirigami with C++"
msgid "Kirigami with Rust"
msgstr "C++ ile Kirigami"

#: content/docs/getting-started/kirigami/setup-rust/index.md:0
#, fuzzy
#| msgid "Create your first Kirigami application with C++\n"
msgid "Create your first Kirigami application with Rust\n"
msgstr "C++ ile ilk Kirigami uygulamanızı oluşturun.\n"

#: content/docs/getting-started/kirigami/setup-rust/index.md:13
msgid ""
"Before getting started, we will need to install Kirigami and Rust on our "
"machine."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:24
msgid ""
"First we create our project folder (you can use the commands below). We are "
"going to call ours `kirigami_rust/`. This will be the project's structure:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:38
msgid ""
"This project will use CMake to call Cargo, which in turn will build the "
"project."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:40
msgid "About CMake and Cargo"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:42
msgid ""
"This is **not** the traditional way of building a Rust project: technically, "
"only Cargo is needed to build it, usually with `cargo build` and `cargo run`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:44
msgid ""
"For desktop applications however, CMake (or an equivalent like [Meson]"
"(https://mesonbuild.com/) used by GNOME or [Just](https://just.systems/man/"
"en/introduction.html) used by COSMIC) is needed to install because Cargo "
"lacks the necessary features to install GUI desktop applications."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:48
msgid ""
"The project will be called `kirigami_rust` and it will generate an "
"executable called `kirigami_hello`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:50
msgid "💡 Tip"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:52
msgid ""
"You can quickly create this file structure with: `mkdir -p kirigami_rust/src/"
"qml/`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:56
msgid "org.kde.kirigami_rust.desktop"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:60
msgid ""
"It must follow a [reverse-DNS naming scheme](https://en.wikipedia.org/wiki/"
"Reverse_domain_name_notation) followed by the `.desktop` extension such as "
"`org.kde.kirigami_rust.desktop`:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:66
msgid ""
"The `CMakeLists.txt` file is going to be used to run Cargo and to install "
"the necessary files together with our application. It also provides certain "
"quality of life features, such as making sure that Kirigami is installed "
"during compilation and to signal Linux distributions to install the "
"necessary dependencies with the application."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:70
msgid ""
"The first thing we do is add KDE's [Extra CMake Modules (ECM)](https://api."
"kde.org/ecm/manual/ecm.7.html) to our project so we can use "
"[ecm_find_qml_module](https://api.kde.org/ecm/module/ECMFindQmlModule.html) "
"to check that Kirigami is installed when trying to build the application, "
"and if it's not, fail immediately. Another useful ECM feature is "
"[ECMUninstallTarget](https://api.kde.org/ecm/module/ECMUninstallTarget."
"html), which allows to easily uninstall the application with CMake if "
"desired."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:72
msgid ""
"We also use CMake's [find_package()](https://cmake.org/cmake/help/latest/"
"command/find_package.html) to make sure we have [qqc2-desktop-style](https://"
"invent.kde.org/frameworks/qqc2-desktop-style), KDE's QML style for the "
"desktop. This is one of the two reasons we use CMake in this tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:74
msgid ""
"Typically Rust projects are built with Cargo, and it won't be different "
"here. We create a target that will simply run Cargo when run, and mark it "
"with `ALL` so it builds by default. Cargo will build the executable inside "
"CMake's binary directory (typically `build/`)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:76
msgid ""
"For more information about CMake, targets, and the binary directory, see "
"[Building KDE software manually](/docs/getting-started/building/cmake-build)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:78
msgid ""
"After this, we simply install the `kirigami_rust` executable generated by "
"Cargo in the binary directory and install it to the `BINDIR`, which is "
"usually `/usr/bin`, `/usr/local/bin` or `~/.local/bin`. We also install the "
"necessary desktop file to `APPDIR`, which is usually `/usr/share/"
"applications` or `~/.local/share/applications`. This is the second reason we "
"use CMake in this tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:80
msgid ""
"For more information about where KDE software is installed, see [Building "
"KDE software manually: The install step](/docs/getting-started/building/"
"cmake-build/#install)."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:84
msgid "Cargo.toml"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:86
msgid "Next we have a very straightforward `Cargo.toml`:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:90
msgid ""
"It consists of project metadata and a list of dependencies that will be "
"pulled automatically by Cargo, namely `cxx` and `cxx-qt`, which are "
"necessary to run Qt applications written in Rust."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:92
msgid "build.rs"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:94
msgid ""
"Where in C++ you'd typically register QML elements with [QML_ELEMENT]"
"(https://doc.qt.io/qt-6/qtqml-cppintegration-definetypes.html) and "
"[ecm_add_qml_module](https://api.kde.org/ecm/module/ECMQmlModule.html) using "
"[declarative registration](https://www.qt.io/blog/qml-type-registration-in-"
"qt-5.15), with Rust you'll need to declare it in a [build script build.rs]"
"(https://doc.rust-lang.org/cargo/reference/build-scripts.html) file:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:98
msgid ""
"This is necessary to make the QML file available in the entrypoint for our "
"application, `main.rs`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:100
msgid "src/main.rs"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:102
msgid ""
"The file `kirigami_rust/src/main.rs` initializes the project and then loads "
"the QML file, which will consist of the user interface for the application."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:106
msgid ""
"The first part that is marked with the [#[cxx_qt::bridge]](https://kdab."
"github.io/cxx-qt/book/bridge/index.html) Rust macro just creates a dummy "
"QObject out of a dummy Rust struct. This is needed just to complete the use "
"of [QmlModule](https://docs.rs/cxx-qt-build/latest/cxx_qt_build/struct."
"QmlModule.html) in the previous build script `build.rs`. This will play a "
"larger part in a future tutorial teaching how to expose Rust code to QML, "
"but for now you can ignore it."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:108
msgid "After this starts the important part:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:110
msgid "Lines 12-13 import the needed Qt libraries exposed through cxx-qt."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:112
msgid ""
"We first create a new instance of a `QApplication`, then perform a few "
"integrations in lines 20-26."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:114
msgid "Then comes the part that actually creates the application window:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:118
msgid ""
"The long URL `qrc:/qt/qml/org/kde/tutorial/src/qml/Main.qml` corresponds to "
"the `Main.qml` file according to the [Qt Resource System](https://doc.qt.io/"
"qt-6/resources.html), and it follows this scheme: "
"`<resource_prefix><import_URI><QML_dir><file>`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:120
msgid ""
"In other words: the default resource prefix `qrc:/qt/qml/` + the import URI "
"`org/kde/tutorial` (set in `build.rs`, separated by slashes instead of dots) "
"+ the QML dir `src/qml/` + the QML file `Main.qml`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:135
msgid ""
"[Kirigami](docs:kirigami2), which provides a number of components suited for "
"creating applications that work across devices of different shapes and sizes."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:143
msgid ""
"We then come to our base element, [Kirigami.ApplicationWindow](docs:"
"kirigami2;ApplicationWindow), which provides some basic features needed for "
"all Kirigami applications. This is the window that will contain each of our "
"pages, the main sections of our UI."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:149
msgid ""
"We then set the first page of our page stack. Most Kirigami applications are "
"organised as a stack of pages, each page containing related components "
"suited to a specific task. For now, we are keeping it simple, and sticking "
"to a single page. [pageStack](docs:kirigami2;AbstractApplicationWindow::"
"pageStack) is an initially empty stack of pages provided by [Kirigami."
"ApplicationWindow](docs:kirigami2;ApplicationWindow), and with `pageStack."
"initialPage: Kirigami.Page {...}` we set the first page presented upon "
"loading the application to a [Kirigami.Page](docs:kirigami2;Page). This page "
"will contain all our content."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:151
msgid ""
"Finally, we include in our page a [Controls.Label](docs:qtquickcontrols;"
"QtQuick.Controls.Label) that lets us place text on our page. We use `anchors."
"centerIn: parent` to center our label horizontally and vertically within our "
"parent element. In this case, the parent component of our label is [Kirigami."
"Page](docs:kirigami2;Page). The last thing we need to do is set its text: "
"`text: \"Hello World!\"`."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:155
msgid ""
"You should find the generated executable `kirigami_hello` under `build/debug/"
"kirigami_hello` and you may run it directly or with `cargo run`, but it will "
"lack a Window icon. To address this, we'll install the application first."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:157
msgid "Run the following:"
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:165
msgid ""
"With the first command, CMake will search for Kirigami and qqc2-desktop-"
"style."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:167
msgid ""
"With the second command, CMake will build the `kirigami_rust` target, which "
"just calls `cargo build --target-dir build/`. This step will take a while to "
"complete, but the next time you repeat the second CMake command it will be "
"faster or you will not need to compile at all."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:169
msgid ""
"In the third step, CMake will install the executable `kirigami_hello` under "
"`~/.local/bin/kirigami_hello` and the desktop file under `~/.local/share/"
"applications`, and a new entry named \"Kirigami Tutorial in Rust\" will "
"appear on your menu."
msgstr ""

#: content/docs/getting-started/kirigami/setup-rust/index.md:171
msgid ""
"Open the menu entry and voilà! Now you will see your very first Kirigami app "
"appear before your very own eyes."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:0
msgid "Colors and themes in Kirigami"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:0
msgid "Colors "
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:0
msgid "Make your app follow your user color scheme\n"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:12
msgid ""
"Kirigami has a color palette that follows the system colors to better "
"integrate with the platform it is running on (i.e. Plasma Desktop, Plasma "
"Mobile, GNOME, Android, etc.)."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:16
msgid ""
"All of the QML components of Kirigami and QtQuick Controls should already "
"follow this palette by default, so usually no custom coloring should be "
"needed for these controls."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:20
msgid ""
"Primitive components such as [Rectangle](docs:qtquick;QtQuick.Rectangle) "
"should always be colored with the color palette provided by Kirigami via the "
"[Kirigami.Theme](https://api-staging.kde.org/qml-org-kde-kirigami-platform-"
"theme.html) attached property."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:23
msgid ""
"Hardcoded colors in QML, such as `#32b2fa` or `red`, should usually be "
"avoided; if it is really necessary to have elements with custom colors, it "
"should be an area where only custom colors are used (usually in the content "
"area of the app, and never in chrome areas such as toolbars or dialogs). For "
"instance, a hardcoded `black` foreground cannot be used over a [Kirigami."
"Theme.backgroundColor](https://api-staging.kde.org/qml-org-kde-kirigami-"
"platform-theme.html#backgroundColor-attached-prop) background, because if "
"the platform uses a dark color scheme the result will have poor contrast "
"with black over almost black. This is an accessibility issue and should be "
"avoided."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:30
msgid ""
"If you really need to use custom colors, check out [Kontrast](https://apps."
"kde.org/kontrast/) to ensure that the colors you choose have good contrast "
"and are [WCAG compliant](https://en.wikipedia.org/wiki/"
"Web_Content_Accessibility_Guidelines)."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:34
#: content/docs/getting-started/kirigami/style-typography/index.md:373
msgid "Theme"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:36
msgid ""
"[Kirigami.Theme](https://api-staging.kde.org/qml-org-kde-kirigami-platform-"
"theme.html) is an attached property, and therefore it is available to use "
"for any QML item. Its properties include all the colors available in the "
"palette, and what palette to use, such as the [colorSet](https://api-staging."
"kde.org/qml-org-kde-kirigami-platform-theme.html#colorSet-attached-prop) "
"property."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:58
msgid ""
"[Kirigami Gallery](https://apps.kde.org/kirigami2.gallery/) provides a code "
"example showcasing [all colors available for Kirigami](https://invent.kde."
"org/sdk/kirigami-gallery/-/blob/master/src/data/contents/ui/gallery/"
"ColorsGallery.qml) through [Kirigami.Theme](https://api-staging.kde.org/qml-"
"org-kde-kirigami-platform-theme.html). This includes all their states: if "
"you click outside the window, the colors change to their inactive state, and "
"if you switch your system to a dark theme, the dark variants of the colors "
"should show up in real time."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:60
msgid "The Colors component in Kirigami Gallery"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:62
msgid "Color Set"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:64
msgid ""
"Depending on where a control is located, it should use a different color "
"set: for instance, when the Breeze Light color scheme is used in [Views]"
"(https://doc.qt.io/qt-6/qtquick-modelviewsdata-modelview.html), the normal "
"background is almost white, while in other regions, such as toolbars or "
"dialogs, the normal background color is gray."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:67
msgid ""
"If you define a color set for an item, all of its child items will "
"recursively inherit it automatically (unless the property [inherit](https://"
"api-staging.kde.org/qml-org-kde-kirigami-platform-theme.html#inherit-"
"attached-prop) has explicitly been set to `false`, which should always be "
"done when the developer wants to force a specific color set) so it is easy "
"to change colors for an entire hierarchy of items without touching any of "
"the items themselves."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:72
msgid ""
"[Kirigami.Theme](https://api-staging.kde.org/qml-org-kde-kirigami-platform-"
"theme.html) supports 5 different color sets:"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:74
msgid ""
"View: Color set for item views, usually the lightest of all (in light color "
"themes)"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:76
msgid ""
"Window: Color set for windows and chrome areas (this is also the default "
"color set)"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:77
msgid "Button: Color set used by buttons"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:78
msgid "Selection: Color set used by selected areas"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:79
msgid "Tooltip: Color set used by tooltips"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:80
msgid ""
"Complementary: Color set meant to be complementary to Window: usually dark "
"even in light themes. May be used for emphasis in small areas of the "
"application"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:84
msgid ""
"Here is an example showcasing how color sets are inherited and can be used "
"to distinguish different components. A large border has been added to "
"contrast colors."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:92
msgid "How color sets differ in Breeze"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:98
msgid "How color sets differ in Breeze Dark"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:104
msgid "Using Custom Colors"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:106
msgid ""
"Although it's discouraged to use hardcoded colors, Kirigami offers a more "
"maintainable way to assign a custom hardcoded palette to an item and all its "
"children, which allows to define such custom colors in one place and one "
"only:"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:127
msgid ""
"NOTE: regardless of the color set used, it is recommended to replace all "
"available colors in Theme, to avoid badly contrasting colors"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:135
msgid "Redefine all the other colors you want"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:137
msgid "This will be \"#b9d795\""
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:141
msgid "This will be \"#465c2b\""
msgstr ""

#: content/docs/getting-started/kirigami/style-colors/index.md:157
msgid "Example with custom colors"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:0
msgid "Typography"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:12
msgid ""
"For demonstrative purposes, this tutorial uses an AbstractCard to make the "
"text examples clearer. A better way to achieve the same results would be to "
"use a [Kirigami Addons FormCard](/docs/getting-started/kirigami/addons-"
"introduction)."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:16
msgid "Headings"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:18
msgid ""
"Kirigami provides a [Heading](docs:kirigami;org.kde.kirigami.Heading) that "
"can be used for page or section titles."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:72
msgid "Five headings with different levels for size comparison"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:78
msgid "Labels"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:80
msgid ""
"Text elements should use the [Label](docs:qtquickcontrols;QtQuick.Controls."
"Label) component from QtQuick Controls 2."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:119
msgid "Text Alignment"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:121
msgid ""
"You can align your text elements using the [horizontalAlignment](https://doc."
"qt.io/qt-6/qml-qtquick-text.html#horizontalAlignment-prop) and "
"[verticalAlignment](https://doc.qt.io/qt-6/qml-qtquick-text."
"html#verticalAlignment-prop) properties."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:166
msgid "Heading and lorem ipsum text aligned to the horizontal center"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:215
msgid "Heading and lorem ipsum text using right-aligned text"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:266
msgid ""
"Heading with bottom vertical alignment and lorem ipsum text with top "
"vertical alignment"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:317
msgid ""
"Heading with top vertical alignment and lorem ipsum text with bottom "
"vertical alignment"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:323
msgid "Rich Text"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:325
msgid ""
"QML allows you to display (and edit) rich text. The behavior can be "
"controlled via the [textFormat](https://doc.qt.io/qt-6/qml-qtquick-text."
"html#textFormat-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:367
msgid ""
"A Label containing a list of fruits using HTML tags like paragraph, "
"unordered lists and bold fonts"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography/index.md:375
msgid ""
"The font size of the [Kirigami.Theme](https://api-staging.kde.org/qml-org-"
"kde-kirigami-platform-theme.html) is available as `Kirigami.Theme."
"defaultFont.pointSize` in your application."
msgstr ""
