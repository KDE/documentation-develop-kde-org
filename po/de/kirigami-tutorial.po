#
# Burkhard Lück <lueck@hube-lueck.de>, 2021.
msgid ""
msgstr ""
"Project-Id-Version: documentation-develop-kde-org 1.0\n"
"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
"POT-Creation-Date: 2023-03-23 00:40+0000\n"
"PO-Revision-Date: 2021-06-30 09:49+0200\n"
"Last-Translator: Burkhard Lück <lueck@hube-lueck.de>\n"
"Language-Team: German <kde-i18n-de@kde.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Getting started with Kirigami"
msgstr "Einführung zu Kirigami"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Kirigami"
msgstr "Kirigami"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Introduction"
msgstr "Einführung"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Style"
msgstr "Stil"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Components"
msgstr "Komponenten"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Advanced"
msgstr "Erweitert"

#: content/docs/getting-started/kirigami/_index.md:0
msgid "Learning to create your first applications using Kirigami\n"
msgstr ""

#: content/docs/getting-started/kirigami/_index.md:22
msgid ""
"This tutorial will guide you through the process of creating your own "
"convergent application using the [Kirigami framework](/frameworks/kirigami). "
"A *convergent application*, in this context, means people can use the "
"program easily regardless of the device it is running on. If it is on a "
"desktop computer, it will adapt to a large screen and a mouse and keyboard; "
"if it is being used on a mobile device, it will accept input from a "
"touchscreen and adapt to a smaller portrait screen. And so on."
msgstr ""

#: content/docs/getting-started/kirigami/_index.md:30
msgid ""
"Kirigami is built on top of the QML language and Qt Quick Controls 2 "
"components provided by the Qt project. QML has built in support for touch "
"systems, which makes it ideal for mobile apps. Qt Quick components are "
"reusable visual items we can use when building our applications' interfaces. "
"Kirigami is a set of Qt Quick components designed for creating convergent "
"applications."
msgstr ""

#: content/docs/getting-started/kirigami/_index.md:36
msgid ""
"While you will use QML to create the visual part of your application, the "
"business logic—the code that does the heavy lifting for your application's "
"functionality—is usually created in C++ for performance reasons. We will "
"also explore how to integrate our business logic with our UI in the "
"tutorials below."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:0
msgid "About Page"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:0
msgid "Informations about your application"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:10
msgid ""
"[Kirigami.AboutPage](docs:kirigami2;AboutPage) allows you to have a page "
"that shows the copyright notice of the application together with the list of "
"contributors and some information of which platform it's running on."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:12
msgid ""
"First, we are going to edit our `main.cpp` file from previous tutorials."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:14
#: content/docs/getting-started/kirigami/introduction-getting_started.md:101
#, fuzzy
#| msgid "main.qml"
msgid "main.cpp"
msgstr "main.qml"

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:18
msgid ""
"In the `main.cpp` file we include [KAboutData](docs:kcoreaddons;KAboutData), "
"a core KDE frameworks component that lets us store information about our "
"application. This information can then be reused by many other KDE "
"Frameworks components. We instantiate a new `aboutData` object with its "
"fairly complete default constructor and add author information."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:20
msgid ""
"After all the required information has been set, we call [KAboutData::"
"setApplicationData](docs:kcoreaddons;KAboutData::setApplicationData) to "
"initialize the properties of the [QApplication ](docs:qtwidgets;"
"QApplication) object."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:22
msgid ""
"We then create a [qmlRegisterSingletonType()](docs:qtqml;QQmlEngine::"
"qmlRegisterSingletonType). This is used to allow us to import the C++ code "
"as a module in our `main.qml` with `import org.kde.example 1.0`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:24
msgid ""
"Its first argument is the URI that will be used for the import, the second "
"and third arguments are major and minor versions respectively, the fourth is "
"the type name, the name that we will call when accessing our `About` type, "
"and the last is a reference to the C++ object that is exposed to QML. In the "
"latter's case, we use a [lambda](https://en.cppreference.com/w/cpp/language/"
"lambda) to instantiate the `aboutData` of our application in place."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:26
#: content/docs/getting-started/kirigami/introduction-getting_started.md:62
#: content/docs/getting-started/kirigami/introduction-separatefiles.md:41
msgid "main.qml"
msgstr "main.qml"

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:30
msgid ""
"First, we use the import we defined in the `main.cpp` file, namely `org.kde."
"example`. We then add a [Kirigami.Action](docs:kirigami2;Action) to our "
"[global drawer](docs:kirigami2;GlobalDrawer) that will send us to the About "
"page, and create a component with a [Kirigami.AboutPage](docs:kirigami2;"
"AboutPage) in it, which expects a [KAboutData::applicationData()](docs:"
"kcoreaddons;KAboutData::applicationData) object. We exposed precisely that "
"in our `main.cpp` and called it `About`, so we can pass it here."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:33
msgid "CMakeLists"
msgstr "CMakeLists"

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:37
msgid ""
"In the `CMakeLists.txt` file in our top-level folder, be sure to have "
"`CoreAddons` in your [find_package()](https://cmake.org/cmake/help/latest/"
"command/find_package.html) call. It is needed for [KAboutData](docs:"
"kcoreaddons;KAboutData)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:41
msgid ""
"In the `CMakeLists.txt` file in the `src/` directory, nothing is needed "
"since we instantiated out `aboutData` in place."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:44
msgid "Running the application"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:46
msgid ""
"Now if you run your application and trigger the \"About\" action in the "
"global drawer you should see our about page."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-add_about_page.md:48
msgid "![Screenshot of the Kirigami About Page](about-page.png)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:0
msgid "Connect logic to your QML user interface"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:0
msgid ""
"Connect a backend to do calculations and supply your user interface with "
"data to display"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:10
msgid ""
"To integrate logic into the application, we need C++ backend classes that "
"can do the important calculations. Writing logic in the QML files is "
"discouraged, so try to move as much as possible to the backend, so QML is "
"purely used for displaying the user interface, which is what it is best at."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:12
msgid ""
"For your new backend class, create two new files called `backend.cpp` and "
"`backend.h`. Don't forget to add the new cpp file to the executable in `src/"
"CMakeLists.txt`, next to main.cpp."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:14
msgid "Add the following content to the new header file (`backend.h`):"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:29
msgid ""
"The `backend.cpp` file containing the definitions is similarly empty right "
"now, it should contain something like the following:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:40
msgid ""
"Currently the user interface doesn't know about your backend class. To "
"change that, we need to register the new type in `main.cpp`. The backend "
"will be created as a singleton, that means it will only be created once and "
"exist through the whole time from starting the application to closing it."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:42
msgid ""
"Right after creating the [QQmlApplicationEngine](docs:qtqml;"
"QQmlApplicationEngine), add the [type registration](https://doc.qt.io/qt-5/"
"qtqml-cppintegration-definetypes.html) to `main.cpp` as follows:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:48
msgid "Don't forget to include the new header file at the top of `main.cpp`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:50
msgid ""
"From now on, the backend will be known to QML as `Backend`. It is contained "
"in a module called `org.kde.example`. Since the module is part of the "
"application, you don't need to worry about versioning it, just stay with "
"`1.0` and use it consistently throughout the application."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:52
msgid "In `main.qml`, import the new module:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:57
msgid ""
"Now we have connected the class holding the future logic to the application, "
"but it still doesn't do anything. To change that, let's add a property to "
"the class. Properties are a lot more than a simple variable. They can inform "
"the UI about changes so it can update the right areas."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:59
msgid ""
"Right under the [Q_OBJECT](docs:qtcore;QObject::Q_OBJECT) macro, add a new "
"[Q_PROPERTY](docs:qtcore;QObject::Q_PROPERTY)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:65
msgid ""
"This may seem like a lot of code to just read and write some code from the "
"backend. However, a closer look reveals that reading the property from the "
"UI can already run some logic—same when it is written to. In this case, it "
"will automatically inform the frontend and backend of changes."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:67
msgid ""
"The reading and writing is based on the concept of [getter and setter "
"functions](https://www.w3schools.com/cpp/cpp_encapsulation.asp). Go ahead "
"and add a new private attribute to your class that holds the data, as well "
"as the relevant getter and setter functions."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:73
msgid "To the public section, add"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:80
msgid ""
"The first function is the getter, the second the setter, and the third a "
"signal that is emitted when the property is changed. The signal doesn't need "
"any implementation in `backend.cpp` file, since it doesn't do much more than "
"being emitted, but the getter and setter need to be implemented similar to "
"the following:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:94
msgid ""
"As you can see, when the setter is called, the signal will be emitted, and "
"inform the ui and backend of the change."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:96
msgid ""
"To display the text, add a heading to `main.qml` under the `title` property "
"of the [Kirigami.Page](docs:kirigami2;Page) element already contained in the "
"template."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:98
msgid "The resulting code in that part of the file should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:117
msgid "Now compile and start your program again."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:119
msgid "Congratulations, you learned:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:120
msgid "How to register backend types to QML"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:121
msgid "Add new elements to the QML file"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:122
msgid "Create new QObject subclasses"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:123
msgid "How to add properties and what they do"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:124
msgid "What signals are"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-connect_backend.md:126
msgid ""
"If you want to know more about the integration between QML and C++, we "
"recommend reading the [official Qt documentation](https://doc.qt.io/qt-5/"
"qtqml-cppintegration-definetypes.html)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:0
msgid "Figuring out main.cpp"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:0
msgid "Understanding the central file of our backend code\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:11
msgid "The role of main.cpp"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:13
msgid ""
"While QML is used for the front-end of Kirigami applications, the backend is "
"usually written in C++ thanks to this language's speed and flexibility. "
"While in previous pages we have covered QML in a lot of depth, we'll need to "
"gain an understanding of our backend C++ code in order to make applications "
"that are more useful than what we can achieve with pure QML."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:15
msgid ""
"Here, we'll be going over the `main.cpp` file we created in the 'Getting "
"Started' page so that we can better understand what is going on in the "
"central C++ file of our application. While this is a basic `main.cpp`, the "
"features we will go over will remain essential no matter what kind of "
"application you decide to create."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:17
msgid "What it does"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:21
msgid ""
"First we must include a number of Qt [header files](https://www.learncpp.com/"
"cpp-tutorial/header-files/), allowing us to use their functions. In this "
"case, we include a number of Qt headers that handle application logic, "
"reading QML files, and accessing files defined in `resources.qrc`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:23
msgid ""
"Enter our main function. Its first line `QGuiApplication::setAttribute(Qt::"
"AA_EnableHighDpiScaling);` enables High DPI scaling. This lets our "
"application scale properly across devices with different display pixel "
"densities."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:25
msgid ""
"We then create a [QApplication](docs:qtwidgets;QApplication) instance which "
"we call `app`. We then pass [argc and argv](https://www.learncpp.com/cpp-"
"tutorial/command-line-arguments/) to the constructor, letting Qt parse and "
"use arguments."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:27
msgid ""
"We also set some metadata relating to the application. These include the "
"organisation that created the application, the organisation's website, and "
"the name of the application. We set these properties by calling "
"[QApplication](docs:qtwidgets;QApplication), instantiating an object that "
"comes from [QCoreApplication](docs:qtcore;QCoreApplication) and provides the "
"[event loop](docs:qtcore;QCoreApplication::exec) for applications regardless "
"of whether they have a GUI or not (so if we ran our program without the GUI, "
"this metadata would still be set)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:29
msgid ""
"The [QQmlApplicationEngine](docs:qtqml;QQmlApplicationEngine) lets us load "
"an application from a QML file, which we do in the next line. In `engine."
"load(QUrl(QStringLiteral(\"qrc:/main.qml\")));` we load our QML from a URL "
"in our [Qt Resource File](https://doc.qt.io/qt-6/resources.html) (`resources."
"qrc`)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-maincpp.md:31
msgid ""
"Next, we check if our engine correctly loaded the QML file by checking that "
"the engine's [rootObjects()](docs:qtqml;QQmlApplicationEngine::rootObjects) "
"list is not empty. We can then run our application with [app.exec()](docs:"
"qtcore;QCoreApplication::exec)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:0
msgid "Understanding CMakeLists"
msgstr "CMakeLists verstehen"

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:0
msgid "Getting to grips with how CMakeLists.txt files work\n"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:11
msgid "CMake"
msgstr "CMake"

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:12
msgid ""
"In our introductory tutorial, we used [CMake](https://cmake.org/) as the "
"build system for our application, but we only really paid close attention to "
"one of our `CMakeLists.txt` files. Here, we're going to go over how it works "
"in a bit more detail."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:14
msgid ""
"CMake is useful because it allows us to automate much of the stuff that "
"needs to be done before compilation."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:16
#: content/docs/getting-started/kirigami/introduction-getting_started.md:121
msgid "CMakeLists.txt"
msgstr "CMakeLists.txt"

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:18
msgid "You might remember this `CMakeLists.txt` file from the first tutorial:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:22
msgid "The first line, `project(helloworld)` defines the name of the project."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:24
msgid ""
"After that, we set the versions of our needed tools. "
"`cmake_minimum_required(VERSION 3.16)` sets the version of CMake we will be "
"calling. We then use `set()` to define variables (`KF5_MIN_VERSION` and "
"`QT_MIN_VERSION`) containing the versions of KDE Frameworks and Qt."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:26
msgid ""
"Then we get to a section where we include a number of necessary CMake and "
"KDE settings by using [extra-cmake-modules](https://api.kde.org/ecm/). You "
"shouldn't worry too much about these lines for now and we won't need to "
"change them in this tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:28
msgid ""
"The following section is important, because it specifies which dependencies "
"we'll be bringing in at compile time. Let's look at the first line:"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:30
msgid ""
"`find_package(KF5 ${KF5_MIN_VERSION} COMPONENTS Kirigami2 I18n CoreAddons "
"WidgetsAddons)`"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:31
msgid ""
"[find_package()](https://cmake.org/cmake/help/latest/command/find_package."
"html) finds and loads the external component."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:32
msgid "The first word is the framework (`KF5`)."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:33
msgid ""
"Then we are calling the variable with the versions we set in the second line."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:34
msgid ""
"`COMPONENTS` is a parameter that precedes the specific components of the "
"framework we will include."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:35
msgid "Each word after `COMPONENTS` refers to a specific component."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:37
#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:55
#: content/docs/getting-started/kirigami/components-actions.md:14
#: content/docs/getting-started/kirigami/components-actions.md:36
#: content/docs/getting-started/kirigami/components-actions.md:192
#: content/docs/getting-started/kirigami/components-actiontoolbar.md:14
#: content/docs/getting-started/kirigami/components-card.md:97
#: content/docs/getting-started/kirigami/components-controls.md:88
#: content/docs/getting-started/kirigami/components-drawers.md:114
#: content/docs/getting-started/kirigami/components-drawers.md:201
#: content/docs/getting-started/kirigami/introduction-actions.md:61
#: content/docs/getting-started/kirigami/introduction-actions.md:128
#: content/docs/getting-started/kirigami/introduction-getting_started.md:77
#: content/docs/getting-started/kirigami/introduction-getting_started.md:89
#: content/docs/getting-started/kirigami/introduction-getting_started.md:140
#: content/docs/getting-started/kirigami/introduction-getting_started.md:167
#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:121
#: content/docs/getting-started/kirigami/introduction-listviews.md:51
#: content/docs/getting-started/kirigami/introduction-listviews.md:185
#: content/docs/getting-started/kirigami/introduction-next_steps.md:25
#: content/docs/getting-started/kirigami/introduction-pages.md:27
#: content/docs/getting-started/kirigami/introduction-pages.md:53
#: content/docs/getting-started/kirigami/style-colors.md:28
msgid "Note"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:39
msgid ""
"If you are looking to add any components listed in the [KDE API "
"documentation](https://api.kde.org/) to your application, you may check the "
"right sidebar for how to add the component with CMake. For instance, for "
"[Kirigami2](docs:kirigami2;), you will find something like "
"`find_package(KF5Kirigami2)`, which with the addition of [extra-cmake-"
"modules](https://api.kde.org/ecm/) becomes something like `find_package(KF5 "
"COMPONENTS Kirigami2)`."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:41
msgid ""
"Pay close attention to your included components, as omitting ones used in "
"our code will stop our application from compiling."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:45
msgid ""
"The final line, `add_subdirectory(src)`, points CMake into the `src/` "
"directory."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:49
msgid ""
"Since most of the heavy lifting is done by the first file, this one is a lot "
"shorter."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:51
msgid ""
"[set()](https://cmake.org/cmake/help/latest/command/set.html) is used to set "
"`helloworld_SRCS` to `main.cpp` and `resources.qrc` (if we decide to create "
"additional C++ files we'll need to add them here too)"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:52
msgid ""
"[add_executable()](https://cmake.org/cmake/help/latest/command/"
"add_executable.html) takes care of naming our executable and grabbing the "
"files needed to create it"
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:53
msgid ""
"[target_link_libraries](https://cmake.org/cmake/help/latest/command/"
"target_link_libraries.html) dynamically links the libraries used in our code "
"to our executable."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:57
msgid ""
"Note that these libraries should match the components that we included in "
"our previous `CMakeLists.txt` file - otherwise these components will not be "
"included and our application won't compile."
msgstr ""

#: content/docs/getting-started/kirigami/advanced-understanding_cmakelists.md:61
msgid "This setup will be useful when developing most Kirigami apps."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:0
#, fuzzy
#| msgid "Components"
msgid "Actions based components"
msgstr "Komponenten"

#: content/docs/getting-started/kirigami/components-actions.md:0
msgid "Kirigami's Actions are used to add functionality to components.\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:10
#: content/docs/getting-started/kirigami/introduction-actions.md:16
msgid "Actions"
msgstr "Aktionen"

#: content/docs/getting-started/kirigami/components-actions.md:12
#: content/docs/getting-started/kirigami/introduction-actions.md:18
msgid ""
"A [Kirigami.Action](docs:kirigami2;Action) encapsulates a user interface "
"action. We can use these to provide our applications with easy-to-reach "
"actions that are essential to their functionality."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:16
msgid ""
"Kirigami actions inherit from [QtQuick Controls Action](docs:qtquickcontrols;"
"QtQuick.Controls.Action) and can be assigned shortcuts."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:21
msgid ""
"Like [QtQuick Controls Actions](docs:qtquickcontrols;QtQuick.Controls."
"Action), they can be assigned to menu items and toolbar buttons, but also to "
"multiple other Kirigami components."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:38
msgid ""
"The [icon.name](https://doc.qt.io/qt-6/qml-qtquick-controls2-action."
"html#icon.name-prop) property takes names for system-wide icons following "
"the FreeDesktop specification. These icons and icon names can be viewed with "
"KDE's CuttleFish application which comes with [plasma-sdk](https://invent."
"kde.org/plasma/plasma-sdk), or by visiting [FreeDesktop's icon naming "
"specification](https://specifications.freedesktop.org/icon-naming-spec/icon-"
"naming-spec-latest.html)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:42
msgid ""
"One feature offered by Kirigami Actions on top of [QtQuick Actions](docs:"
"qtquickcontrols;QtQuick.Controls.Action) is the possibility to nest actions."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:62
msgid ""
"Another feature of Kirigami Actions is to provide various hints to items "
"using actions about how they should display the action. These are primarily "
"handled by the [displayHint](docs:kirigami2;Action::displayHint) and "
"[displayComponent](docs:kirigami2;Action::displayComponent) properties."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:66
msgid ""
"These properties will be respected by the item if possible. For example, the "
"following action will be displayed as a [TextField](docs:qtquickcontrols;"
"QtQuick.Controls.TextField) with the item trying its best to keep itself "
"visible as long as possible."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:83
#, fuzzy
#| msgid "Components"
msgid "Using actions in other components"
msgstr "Komponenten"

#: content/docs/getting-started/kirigami/components-actions.md:85
#: content/docs/getting-started/kirigami/introduction-next_steps.md:69
msgid "Page"
msgstr "Seite"

#: content/docs/getting-started/kirigami/components-actions.md:87
msgid ""
"One of [Kirigami.Page](docs:kirigami2;Page)'s features is that Actions can "
"be added to it."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:89
msgid ""
"You can add a `actions.main` action, a `actions.left` and `actions.right` "
"action and additional [context actions](../components-drawers#context-"
"drawers) that are displayed on the toolbar if there is enough place or in a "
"hamburger menu on smaller screens."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:97
#: content/docs/getting-started/kirigami/introduction-actions.md:22
msgid "Page actions on the desktop"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:99
msgid "Page actions on a mobile device"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:103
#: content/docs/getting-started/kirigami/components-formlayouts.md:68
#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:28
#: content/docs/getting-started/kirigami/introduction-pages.md:43
msgid "Warning"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:105
msgid ""
"To make the context actions work on mobile, you need to add a [ContextDrawer]"
"(docs:kirigami2;ContextDrawer) to your [Kirigami.ApplicationWindow](docs:"
"kirigami2;ApplicationWindow)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:120
#, fuzzy
#| msgid "![](global_drawer.png)"
msgid "Global Drawer"
msgstr "![](global_drawer.png)"

#: content/docs/getting-started/kirigami/components-actions.md:122
msgid ""
"The global drawer provides an action based navigation to your application. "
"This is where nested actions are useful because it is possible to create "
"nested navigation:"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:159
#, fuzzy
#| msgid "![](global_drawer.png)"
msgid "Global Drawer actions on the desktop"
msgstr "![](global_drawer.png)"

#: content/docs/getting-started/kirigami/components-actions.md:161
#, fuzzy
#| msgid "![](global_drawer.png)"
msgid "Global Drawer actions on a mobile device"
msgstr "![](global_drawer.png)"

#: content/docs/getting-started/kirigami/components-actions.md:165
msgid ""
"You can read more about Global Drawers in the [documentation page for "
"drawers](../components-drawers#globaldrawer)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:167
#, fuzzy
#| msgid "Actions"
msgid "ActionTextFields"
msgstr "Aktionen"

#: content/docs/getting-started/kirigami/components-actions.md:169
msgid ""
"A [Kirigami.ActionTextField](docs:kirigami2;ActionTextField) is used to add "
"some contextual actions to a text field, for example to clear the text, or "
"to search for the text."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:188
msgid ""
"In this example, we are creating a \"clear\" button for a search field that "
"is only visible when text is entered."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:190
msgid "![Search field with text: \"I want ](searchfield.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:194
msgid ""
"You should rarely use an ActionTextField directly. [SearchField](docs:"
"kirigami2;SearchField) and [PasswordField](docs:kirigami2;PasswordField) "
"both inherit from `ActionTextField` and are likely to cover your desired use-"
"case."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:198
msgid "SwipeListItem"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:200
msgid ""
"A [Kirigami.SwipeListItem](docs:kirigami2;SwipeListItem) is a delegate "
"intended to support extra actions. When using a mouse, its actions will "
"always be shown. On a touch device, they can be shown by dragging the item "
"with the handle. In the following pictures, these are the icons to the right."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:216
msgid "do something"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:223
msgid "SwipeListItem on a computer"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:225
msgid "SwipeListItem on a mobile device"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:227
#, fuzzy
#| msgid "Actions"
msgid "ActionToolBar"
msgstr "Aktionen"

#: content/docs/getting-started/kirigami/components-actions.md:229
msgid ""
"A [Kirigami.ActionToolBar](docs:kirigami2;ActionToolBar) is a toolbar built "
"out of a list of actions. By default, each action that will fit in the "
"toolbar will be represented by a [ToolButton](docs:qtquickcontrols;QtQuick."
"Controls.ToolButton), with those that do not fit being moved into a menu at "
"the end of the toolbar."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:232
msgid ""
"Like [ActionTextField](docs:kirigami2;ActionTextField), you may not need to "
"use [ActionToolBar](docs:kirigami2;ActionToolBar) directly as it is used by "
"page headers and cards to provide their action display."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:257
msgid "A horizontal toolbar being displayed at the top of the application"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:259
msgid ""
"You can read more about [ActionToolBar](docs:kirigami2;ActionToolBar) "
"components in their [dedicated documentation page](../components-"
"actiontoolbar/)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:261
#: content/docs/getting-started/kirigami/components-card.md:0
msgid "Cards"
msgstr "Karten"

#: content/docs/getting-started/kirigami/components-actions.md:263
msgid ""
"A [Kirigami.Card](docs:kirigami2;Card) is used to display a collection of "
"information or actions together. These actions can be added to the `actions` "
"group, similarly to previous components."
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:280
#: content/docs/getting-started/kirigami/components-card.md:67
msgid "..."
msgstr "..."

#: content/docs/getting-started/kirigami/components-actions.md:299
msgid ""
"![Screenshot of a full-fledged Card with a banner background behind its "
"title, white background behind its text, and two actions with icons and a "
"hamburger menu at the bottom](card.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-actions.md:305
msgid ""
"For more information consult the [component page for Cards](../components-"
"card/)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:0
#, fuzzy
#| msgid "Actions"
msgid "Action Tool Bars"
msgstr "Aktionen"

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:0
msgid "Create your own customisable tool bars with the ActionToolBar component"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:10
msgid ""
"While Kirigami pages allow you to easily place a set of actions in the page "
"header, there are times when you might prefer to have something more "
"flexible."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:12
msgid ""
"Kirigami provides the component [Kirigami.ActionToolBar](docs:kirigami2;"
"ActionToolBar). It displays a list of [Kirigami.Action](docs:kirigami2;"
"Action) objects and will display as many of them as possible, providing an "
"overflow menu for the ones that don't fit. The ActionToolBar is dynamic and "
"will move actions in and out of the overflow menu depending on the size "
"available to it."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:16
msgid ""
"This page assumes you are familiar with [Kirigami.Action](docs:kirigami2;"
"Action) objects. If you are not, you can learn all about them in our "
"beginner tutorial or in [the dedicated documentation page for them](../"
"components-actions/)."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:20
msgid "Creating our first ActionToolBar"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:22
msgid ""
"The layout and location of your [Kirigami.ActionToolBar](docs:kirigami2;"
"ActionToolBar) are really up to you, though for the sake of user-"
"friendliness it is usually a good idea to stick to UI conventions and put "
"your toolbar near the top or bottom of your page and to have it spread width "
"wise."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:24
msgid ""
"Like most other action-holding components, [Kirigami.ActionToolBar](docs:"
"kirigami2;ActionToolBar) has an [actions](docs:kirigami2;ActionToolBar::"
"actions) property. We can assign an array of [Kirigami.Action](docs:"
"kirigami2;Action) components to this property."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:70
msgid "ActionToolBar with enough space for all children"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:72
msgid "ActionToolBar with overflow menu containing children"
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:76
msgid "Alignment"
msgstr "Ausrichtung"

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:78
msgid ""
"By default, actions in the [ActionToolBar]([Kirigami.ActionToolBar](docs:"
"kirigami2;ActionToolBar)) will be left aligned. This might not be desirable "
"in all situations. Thankfully we can change this with the [alignment](docs:"
"kirigami2;ActionToolBar::alignment) property. We can set this property to a "
"range of values, but the three most relevant ones are `Qt.AlignLeft`, `Qt."
"AlignCenter`, and `Qt.AlignRight` (which deal with [horizontal alignment]"
"(docs:qtcore;Qt::Alignment))."
msgstr ""

#: content/docs/getting-started/kirigami/components-actiontoolbar.md:109
msgid ""
"![ActionToolBar with children center-aligned](/docs/getting-started/kirigami/"
"components-actiontoolbar/actiontoolbar-alignment.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:0
msgid ""
"A card serves as an overview and entry point for more detailed information "
"and can offer direct access to the most important actions of an item.\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:11
msgid ""
"The Kirigami types [AbstractCard](docs:kirigami2;AbstractCard) and [Card]"
"(docs:kirigami2;Card) are used to implement the popular card component used "
"on many mobile and web platforms. Cards can be used to display a collection "
"of information or actions in an attractive and distinctive way."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:13
msgid ""
"Kirigami also offers 3 kinds of [views](https://doc.qt.io/qt-6/qtquick-"
"modelviewsdata-modelview.html) and [positioners](https://doc.qt.io/qt-6/"
"qtquick-positioning-layouts.html) to aid you in presenting your cards with "
"beautiful and responsive layouts."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:15
msgid "AbstractCard"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:17
msgid ""
"A [Kirigami.AbstractCard](docs:kirigami2;AbstractCard) is the simplest type "
"of card. It's just a rectangle with a shadow, which can contain any [Item]"
"(docs:qtquick;QtQuick.Item) in it. It can also have Items assigned to its "
"[header](docs:kirigami2;templates::AbstractCard::header) or [footer](docs:"
"kirigami2;templates::AbstractCard::footer) properties. In this case a "
"[Kirigami.Heading](docs:kirigami2;Heading) is its `header` and a [Controls."
"Label](docs:qtquickcontrols;QtQuick.Controls.Label) is the card's "
"[contentItem](docs:qtquickcontrols;QtQuick.Controls.Item::contentItem)."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:41
msgid ""
"![Screenshot of an Abstract Card, a simple rectangular button with left-"
"aligned text](/docs/getting-started/kirigami/components-card/abstract-card."
"png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:48
msgid "Card"
msgstr "Karte"

#: content/docs/getting-started/kirigami/components-card.md:50
msgid ""
"A [Kirigami.Card](docs:kirigami2;Card) inherits from [AbstractCard](docs:"
"kirigami2;AbstractCard) and provides more features out of the box. Cards "
"inherit the same [header](docs:kirigami2;templates::AbstractCard::header) "
"and [footer](docs:kirigami2;templates::AbstractCard::footer) from an "
"Abstract Card, but you are encouraged to use a [banner](docs:kirigami2;Card::"
"banner) and a set of [Kirigami.Action](docs:kirigami2;Action) in the "
"`actions` group instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:72
msgid "The title can be positioned in the banner"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:87
msgid ""
"![Screenshot of a full-fledged Card with a banner background behind its "
"title, white background behind its text, and two actions with icons and a "
"hamburger menu at the bottom](/docs/getting-started/kirigami/components-card/"
"card1.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:93
#, fuzzy
#| msgid "Cards"
msgid "CardsLayout"
msgstr "Karten"

#: content/docs/getting-started/kirigami/components-card.md:95
msgid ""
"A [Kirigami.CardsLayout](docs:kirigami2;CardsLayout) is most useful when the "
"cards being presented are either not instantiated by a model or are "
"instantiated by a model that always has very few items. They are presented "
"as a grid of two columns which will remain centered if the application is "
"really wide, or become a single column if there is not enough space for two "
"columns, such as a mobile phone screen."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:99
msgid ""
"[`CardsListView`](docs:kirigami2;CardsListView) or [`CardsGridView`](docs:"
"kirigami2;CardsGridView) are better suited for larger models."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:103
msgid "Important"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:105
msgid ""
"A [CardsLayout](docs:kirigami2;CardsLayout) should always be contained "
"within a [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-"
"columnlayout.html)."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:109
msgid ""
"A card can optionally be oriented horizontally. In this case it will be "
"wider than tall, and is better suited to being placed in a [ColumnLayout]"
"(https://doc.qt.io/qt-6/qml-qtquick-layouts-columnlayout.html). If you must "
"put it in a [CardsLayout](docs:kirigami2;CardsLayout), it will have a "
"[maximumColumns](docs:kirigami2;CardsLayout::maximumColumns) of `2` by "
"default."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:145
msgid ""
"![Screenshot of a CardsLayout showing two side by side cards in portrait "
"orientation on top of a card in landscape orientation, all with different "
"components being used](/docs/getting-started/kirigami/components-card/"
"cardslayout.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:151
#, fuzzy
#| msgid "List views"
msgid "CardsListView"
msgstr "Listenansichten"

#: content/docs/getting-started/kirigami/components-card.md:153
msgid ""
"A [Kirigami.CardsListView](docs:kirigami2;CardsListView) is a list view that "
"can be used with [AbstractCard](docs:kirigami2;AbstractCard) components."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:155
msgid ""
"A [CardsListView](docs:kirigami2;CardsListView) will stretch child cards to "
"its own width. This component should therefore only be used with cards which "
"will look good at any horizontal size. Use of a [Card](docs:kirigami2;Card) "
"component inside it is discouraged, unless it has [Qt.Horizontal](docs:"
"qtcore;Qt::Orientation) as its [headerOrientation](docs:kirigami2;templates::"
"AbstractCard::headerOrientation) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:157
msgid ""
"The choice between using this view with [AbstractCard](docs:kirigami2;"
"AbstractCard) components or a conventional [ListView](docs:qtquick;QtQuick."
"ListView) with [AbstractListItem](docs:kirigami2;AbstractListItem)/"
"[BasicListItem](docs:kirigami2;BasicListItem) components is purely an "
"aesthetic one."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:169
msgid "NOTE: never put a Layout as contentItem as it will cause binding loops"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:179
msgid "IMPORTANT: never put the bottom margin"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:209
msgid ""
"![Screenshot of a CardsListView, which is a simple vertical list of cards in "
"landscape mode](/docs/getting-started/kirigami/components-card/cardslistview."
"png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:215
#, fuzzy
#| msgid "List views"
msgid "CardsGridView"
msgstr "Listenansichten"

#: content/docs/getting-started/kirigami/components-card.md:217
msgid ""
"Use a [Kirigami.CardsGridView](docs:kirigami2;CardsGridView) to display "
"cards in a grid."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:219
msgid ""
"Its behavior is the same as a [CardsLayout](docs:kirigami2;CardsLayout), and "
"it allows cards to be put in one or two columns depending on the available "
"width."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:221
msgid ""
"[CardsGridView](docs:kirigami2;CardsGridView) has the limitation that every "
"card must have the same exact height, so [cellHeight](https://doc.qt.io/qt-6/"
"qml-qtquick-gridview.html#cellHeight-prop) must be manually set to a value "
"for which the content must fit for every child card."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:223
msgid ""
"If possible use [CardsGridView](docs:kirigami2;CardsGridView) only when you "
"need to instantiate many cards. If you are only going to instantiate a few "
"cards, opt for a [CardsLayout](docs:kirigami2;CardsLayout) with a [Repeater]"
"(docs:qtquick;QtQuick.Repeater) instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:234
msgid "Model with the following roles: text, actions and image"
msgstr ""

#: content/docs/getting-started/kirigami/components-card.md:266
msgid ""
"![Screenshot of a CardsGridView where each card occupies the same amount of "
"space in a grid](/docs/getting-started/kirigami/components-card/"
"cardsgridview.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:0
msgid "Controls and interactive elements"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:0
msgid ""
"Make your apps more interactive by using buttons, selection controls, "
"sliders, and text fields."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:11
msgid ""
"Kirigami offers a wide selection of different interactive elements that you "
"can use in your applications. Each different type has slightly different "
"interaction styles, visual styles, and functionality. Using the right type "
"of control in your application can help make your user interface more "
"responsive and intuitive."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:13
msgid "Buttons"
msgstr "Knöpfe"

#: content/docs/getting-started/kirigami/components-controls.md:15
msgid ""
"In Kirigami apps, we use buttons from QtQuick Controls. Using them is pretty "
"straightforward: we set the text to the [text](https://doc.qt.io/qt-6/qml-"
"qtquick-controls2-abstractbutton.html#text-prop) property and any action we "
"want it to perform is set to the [onClicked](docs:qtquickcontrols;QtQuick."
"Controls.AbstractButton::clicked) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:41
msgid ""
"![A window containing a button \"Beep\" on the upper left side, which when "
"clicked shows a passive notification \"Boop\" at the bottom of the window](/"
"docs/getting-started/kirigami/components-controls/controls-button.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:47
#, fuzzy
#| msgid "Toolbar buttons"
msgid "Toggleable buttons"
msgstr "Knöpfe in der Werkzeugleiste"

#: content/docs/getting-started/kirigami/components-controls.md:49
msgid ""
"The behavior of buttons can be changed to make them toggleable: in this "
"mode, they will stay pressed until clicked on once more. This mode can be "
"activated by setting their [checkable](https://doc.qt.io/qt-6/qml-qtquick-"
"controls2-abstractbutton.html#checkable-prop) property to `true`; we can "
"also set buttons to be toggled on by default by setting [checked](https://"
"doc.qt.io/qt-5/qml-qtquick-controls2-abstractbutton.html#checked-prop) to "
"`true`."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:51
msgid ""
"We can get the most out of toggleable buttons by using the "
"`onCheckedChanged` signal handler which is [automatically generated](https://"
"doc.qt.io/qt-6/qtqml-syntax-signals.html#property-change-signal-handlers) "
"from the [checked](https://doc.qt.io/qt-5/qml-qtquick-controls2-"
"abstractbutton.html#checked-prop) signal. It works similarly to `onClicked`, "
"except here the assigned action will be executed when the button's state "
"changes. It is a boolean property, which can come in handy for specific use "
"cases."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:53
msgid ""
"In this example, we set the visibility of an inline drawer according to the "
"status of a toggleable button:"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:82
msgid ""
"![A window containing a toggleable button \"Toggle\" which when toggled "
"displays \"Peekaboo\" in the contentItem area like a status bar](/docs/"
"getting-started/kirigami/components-controls/controls-togglebutton.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:90
msgid ""
"With the default Breeze theme in KDE Plasma it can be hard to tell whether a "
"button is toggled, since buttons are coloured blue when they are clicked on. "
"Make sure you take this into account when creating your application: a "
"different control might be more user friendly."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:94
msgid "Toolbar buttons"
msgstr "Knöpfe in der Werkzeugleiste"

#: content/docs/getting-started/kirigami/components-controls.md:96
msgid ""
"There is a specific button type meant for use in toolbars, [Controls."
"ToolButton](docs:qtquickcontrols;QtQuick.Controls.ToolButton). The most "
"obvious difference between this and a conventional [Button](docs:"
"qtquickcontrols;QtQuick.Controls.Button) is the styling, with toolbuttons "
"being flat (though this is alterable with the boolean property [flat]"
"(https://doc.qt.io/qt-6/qml-qtquick-controls2-button.html#flat-prop))."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:113
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a tool button \"Tool beep\" which is completely flat](/"
"docs/getting-started/kirigami/components-controls/controls-toolbutton.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-controls.md:119
msgid "Selection controls"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:121
msgid ""
"Selection controls let users make a choice or pick an option. There are "
"different types that are best suited to different situations."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:123
msgid "Checkboxes"
msgstr "Ankreuzfelder"

#: content/docs/getting-started/kirigami/components-controls.md:125
msgid ""
"A [Controls.CheckBox](docs:qtquickcontrols;QtQuick.Controls.CheckBox) is "
"meant for options where the choices are non-exclusive and where each option "
"has a clear alternative."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:146
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a set of checkboxes where more than one checkbox can be "
"ticked at the same time](/docs/getting-started/kirigami/components-controls/"
"controls-checkbox.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-controls.md:152
msgid ""
"As you can see, they are simple to use. The [checked](https://doc.qt.io/qt-6/"
"qml-qtquick-controls2-abstractbutton.html#checked-prop) property holds a "
"boolean value determining whether or not they have been checked."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:154
msgid "Radio buttons"
msgstr "Auswahlknöpfe"

#: content/docs/getting-started/kirigami/components-controls.md:156
msgid ""
"A [Controls.RadioButton](docs:qtquickcontrols;QtQuick.Controls.RadioButton) "
"is designed for situations where the user must choose one option from a set "
"of several options."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:158
msgid ""
"Radio buttons are exclusive by default: only one button can be checked in "
"the same parent item."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:160
msgid ""
"Like checkboxes, they can be set to be checked or unchecked by default with "
"the [checked](https://doc.qt.io/qt-6/qml-qtquick-controls2-abstractbutton."
"html#checked-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:183
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a set of radio buttons where only one radio button can be "
"ticked at the same time](/docs/getting-started/kirigami/components-controls/"
"controls-radiobutton.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-controls.md:189
msgid "Switches"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:191
msgid ""
"On the desktop, changing settings usually involves changing the setting and "
"then applying it by clicking on an \"Apply\" or \"OK\" button. On mobile, we "
"can use a [Controls.Switch](docs:qtquickcontrols;QtQuick.Controls.Switch) "
"instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:193
msgid ""
"Switches can be toggled between an on and off state. They can be toggled by "
"clicking or tapping on them, or they can be dragged towards the on or off "
"position. Once again, switches can be set to be on or off by default with "
"the [checked](https://doc.qt.io/qt-6/qml-qtquick-controls2-abstractbutton."
"html#checked-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:214
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a set of switches that function as toggles](/docs/getting-"
"started/kirigami/components-controls/controls-switch.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-controls.md:220
msgid "Sliders"
msgstr "Schieberegler"

#: content/docs/getting-started/kirigami/components-controls.md:222
msgid ""
"Sliders allow users to select certain values by sliding a handle along a "
"track. There are several types that you can choose from depending on the "
"values you'd like your users to choose in your application."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:224
msgid "Standard and tickmarked sliders"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:226
msgid ""
"A standard [Controls.Slider](docs:qtquickcontrols;QtQuick.Controls.Slider) "
"provides the user with very fine control over the selection they wish to "
"make."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:228
msgid ""
"In Left to Right mode, sliders go left to right to increase when in "
"horizontal orientation, while in Right to Left mode they go in the reverse "
"direction. In both modes, sliders in vertical orientation go from the bottom "
"up."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:230
msgid ""
"The coloration provides a visual indicator of how large the value you are "
"selecting is."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:232
msgid "Sliders have a few important properties we must pay attention to:"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:234
msgid ""
"[value](https://doc.qt.io/qt-6/qml-qtquick-controls2-slider.html#value-"
"prop): contains the value at which the handle is placed, and can also be set "
"manually to provide a default starting value"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:235
msgid ""
"[to](https://doc.qt.io/qt-5/qml-qtquick-controls2-slider.html#to-prop): "
"defines the range of the slider by specifying the maximum value it can go to"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:236
msgid ""
"[orientation](https://doc.qt.io/qt-5/qml-qtquick-controls2-slider."
"html#orientation-prop): allows the slider to be set to a vertical "
"orientation with `Qt.Vertical`"
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:255
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a set of sliders, one horizontal and one vertical](/docs/"
"getting-started/kirigami/components-controls/controls-sliders.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-controls.md:261
msgid ""
"Another useful property we can use is [stepSize](https://doc.qt.io/qt-6/qml-"
"qtquick-controls2-slider.html#stepSize-prop). Setting this to a numerical "
"value allows us to create a slider that snaps onto values that are multiples "
"of the specified `stepSize`, with these multiples being indicated by "
"tickmarks. Therefore if we set this property to `2.0`, when the user drags "
"the slider handle, they will only be able to select `0.0`, `2.0`, `4.0`, "
"etc. up to the value specified in the `to` property."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:280
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a set of tickmarked sliders that are symmetrically "
"divided, with each division being called a step](/docs/getting-started/"
"kirigami/components-controls/controls-tickmarkedsliders.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-controls.md:286
#, fuzzy
#| msgid "Sliders"
msgid "Range sliders"
msgstr "Schieberegler"

#: content/docs/getting-started/kirigami/components-controls.md:288
msgid ""
"QtQuick Controls also provides [Controls.RangeSliders](docs:qtquickcontrols;"
"QtQuick.Controls.RangeSlider). These have two handles, hence allowing you to "
"define a range of numbers between the two handles."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:290
msgid ""
"Two new properties are important to keep in mind: [first.value](https://doc."
"qt.io/qt-6/qml-qtquick-controls2-rangeslider.html#first-prop) and [second."
"value](https://doc.qt.io/qt-5/qml-qtquick-controls2-rangeslider.html#second-"
"prop), which hold the values of the two handles. Like the [value](https://"
"doc.qt.io/qt-6/qml-qtquick-controls2-slider.html#value-prop) property of the "
"standard sliders, these can be pre-set."
msgstr ""

#: content/docs/getting-started/kirigami/components-controls.md:309
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a set of range sliders with two movable circles used to "
"delimit a certain range](/docs/getting-started/kirigami/components-controls/"
"controls-rangesliders.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-controls.md:315
msgid ""
"We can also make it a tickmarked slider by setting the [stepSize](https://"
"doc.qt.io/qt-6/qml-qtquick-controls2-rangeslider.html#stepSize-prop) "
"property value to a number, in the exact same way as a standard slider."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:0
msgid "Drawers"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:0
msgid ""
"Drawers provide applications with quick access to controls and pages of your "
"application."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:10
msgid ""
"Drawers are panels that slide out of the sides of the application window. "
"They can be populated with interactive elements such as Kirigami Actions, "
"buttons, text, and more."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:12
msgid ""
"Drawers come in different types, shapes, and forms. In this page we will go "
"over each type and provide an overview of their characteristics."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:14
#: content/docs/getting-started/kirigami/introduction-actions.md:83
#: content/docs/getting-started/kirigami/introduction-actions.md:120
#, fuzzy
#| msgid "![](global_drawer.png)"
msgid "Global drawer"
msgstr "![](global_drawer.png)"

#: content/docs/getting-started/kirigami/components-drawers.md:16
msgid ""
"The global drawer is a standard feature in KDE's mobile applications and can "
"sometimes be found in their desktop incarnations too. It contains an "
"application's main menu: included here are any functions that are not "
"specific to the current page but still significant to general navigation or "
"interaction within the application."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:18
msgid ""
"It can be activated by tapping the hamburger menu or by swiping from the "
"left edge to the middle of the screen in Left to Right mode or from the "
"right edge in Right to Left mode."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:20
msgid ""
"[Kirigami.GlobalDrawer](docs:kirigami2;GlobalDrawer) components are what we "
"use to create such drawers. These are set to the [globalDrawer](docs:"
"kirigami2;AbstractApplicationWindow::globalDrawer) property of the [Kirigami."
"ApplicationWindow](docs:kirigami2;ApplicationWindow) that forms the basis of "
"our Kirigami application."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:53
msgid ""
"![Screenshot of a global drawer in desktop mode that looks like a sidebar](/"
"docs/getting-started/kirigami/components-drawers/globaldrawer_simple.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:59
msgid "Header"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:61
msgid ""
"Headers can be used to place sticky components at the top of your global "
"drawer. Header components will stay in place even if your global drawer "
"contains nested Kirigami actions that replace the current layer on the "
"global drawer."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:63
msgid ""
"Your chosen header component can be set with the global drawer's `header` "
"property."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:101
msgid ""
"Our global drawer now shows the search bar component we set as the header"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:108
msgid "Adapting for the desktop"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:110
msgid ""
"While panel-style global drawers can be useful in mobile environments, they "
"might be too large on the desktop."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:112
msgid ""
"Thankfully, Kirigami global drawers provide an [isMenu](docs:kirigami2;"
"GlobalDrawer::isMenu) property. When set to `true`, they turn into more "
"traditional menus only on the desktop."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:116
msgid "In this menu mode, headers and banners are not visible."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:149
msgid "Global drawer in menu mode, without a header or banner"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:155
msgid "Banners"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:157
msgid ""
"Banners allow you to display a title and an icon at the top of your global "
"drawer (even above the header)."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:159
msgid ""
"By default, banners are only visible on mobile environments. You can change "
"this by setting the global drawer component's [bannerVisible](docs:kirigami2;"
"GlobalDrawer) property to `true`."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:161
msgid ""
"Titles, set with the [title](docs:kirigami2;GlobalDrawer::title) property, "
"can be used to pretty up your global drawer and make it seem less sparse. "
"More importantly, it can remind your users that this is a global and app-"
"wide drawer rather than a local drawer."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:163
msgid ""
"There is also a [titleIcon](docs:kirigami2;GlobalDrawer::titleIcon) "
"property, which can be paired with your title to make the global drawer even "
"more aesthetically pleasing. This icon will be placed to the left of the "
"title."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:195
msgid "Global drawer with title and icon in banner"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:203
msgid ""
"The [titleIcon](docs:kirigami2;GlobalDrawer::titleIcon) property takes names "
"for system-wide icons according to the FreeDesktop specification. These "
"icons and icon names can be viewed with KDE's CuttleFish application which "
"comes with [plasma-sdk](https://invent.kde.org/plasma/plasma-sdk), or by "
"visiting [FreeDesktop's icon naming specification](https://specifications."
"freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html)."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:207
msgid "Context Drawers"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:209
msgid ""
"While a [Kirigami.GlobalDrawer](docs:kirigami2;GlobalDrawer) displays global "
"actions available throughout your application, a [Kirigami.ContextDrawer]"
"(docs:kirigami2;ContextDrawer) should be used to display actions that are "
"only relevant in certain contexts. This is usually used in separate [pages](/"
"docs/getting-started/kirigami/introduction-pages)."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:211
msgid ""
"A context drawer will only show up if any [contextualActions](docs:kirigami2;"
"Page::contextualActions) have been created as part of the [Page.actions "
"group](docs:kirigami2;Page::actions). It also behaves differently depending "
"on whether it is being used on a mobile platform or on a desktop."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:213
msgid ""
"On a desktop, when a window has enough space, contextual actions show up as "
"part of the `actions` group in the top toolbar. When space is limited, such "
"as on a mobile device or in a narrow window, contextual actions are hidden "
"behind a hamburger menu on the right side. This is different from other "
"actions in the `actions` group, namely `actions.main`, `actions.left` and "
"`actions.right`; these do not get hidden in space-constrained windows, and "
"are instead collapsed into their respective icons."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:226
msgid "Context drawer with contextual actions hidden"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:228
msgid "Context drawer showing all contextual actions"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:234
msgid ""
"On mobile, the drawer always consists of actions hidden behind a hamburger "
"menu. It can be activated by tapping the hamburger menu or by swiping from "
"the right edge to the middle of the screen in Left to Right mode or from the "
"left edge in Right to Left mode. If you are on a desktop and want to test "
"the mobile interface, you can run your application with the environment "
"variable `QT_QUICK_CONTROLS_MOBILE=1`."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:240
msgid "Same example above, running in mobile mode"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:246
msgid "Context drawer open in mobile mode"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:252
msgid "Modal and Inline drawers"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:254
msgid ""
"Kirigami offers two additional types of drawers, modal drawers and inline "
"drawers. They are quite similar to each other: both span the entirety of the "
"application's width or height and can be placed on the edges of the app "
"window. However, they do react differently to user interaction."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:256
msgid ""
"Modal drawers darken the rest of the application and, like [overlay sheets]"
"(docs:kirigami2;OverlaySheet), will be dismissed when clicking on a darkened "
"area."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:257
msgid ""
"Inline drawers allow the user to still interact with the rest of the "
"application without being dismissed, and do not darken other areas."
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:259
msgid ""
"These two drawers are so similar because they can, in fact, be implemented "
"using the same Kirigami component: [Kirigami.OverlayDrawer](docs:kirigami2;"
"OverlayDrawer). Here are a few important inherited properties of this "
"component to keep in mind:"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:261
msgid ""
"[Popup.modal](https://doc.qt.io/qt-6/qml-qtquick-controls2-popup.html#modal-"
"prop) controls whether the drawer will be modal or inline depending on a "
"boolean value"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:262
msgid ""
"[Drawer.edge](https://doc.qt.io/qt-6/qml-qtquick-controls2-drawer.html#edge-"
"prop) controls which edge of the application window the drawer will appear "
"on; options for this property are part of the [Edge enum](docs:qtcore;Qt::"
"RightEdge), namely `Qt.TopEdge`, `Qt.RightEdge`, `Qt.BottomEdge`, and `Qt."
"LeftEdge`"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:263
msgid ""
"[Popup.contentItem](https://doc.qt.io/qt-6/qml-qtquick-controls2-popup."
"html#contentItem-prop) contains the component that will form the content of "
"your drawer"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:277
msgid "Set modal to false to make this drawer inline!"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:306
msgid "Modal drawer on the bottom edge of the screen"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:308
msgid "Inline drawer on the bottom edge of the screen"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:316
msgid "A use case for bottom overlay drawers: NeoChat"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:318
msgid ""
"NeoChat uses bottom overlay drawers to provide the user with a number of "
"actions they can perform on a message they have long pressed. Here is a "
"simplified example of what that looks like:"
msgstr ""

#: content/docs/getting-started/kirigami/components-drawers.md:347
#, fuzzy
#| msgid "Adding actions"
msgid "Message information"
msgstr "Aktionen hinzufügen"

#: content/docs/getting-started/kirigami/components-drawers.md:350
#, fuzzy
#| msgid "Adding actions"
msgid "Message actions"
msgstr "Aktionen hinzufügen"

#: content/docs/getting-started/kirigami/components-formlayouts.md:0
#, fuzzy
#| msgid "Cards"
msgid "Form Layouts"
msgstr "Karten"

#: content/docs/getting-started/kirigami/components-formlayouts.md:0
msgid "Easily create attractive interaction areas with Kirigami FormLayouts"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:10
msgid ""
"[Kirigami.FormLayout](docs:kirigami2;FormLayout) components make it easy for "
"you to create forms that conform to the [KDE Human Interface Guidelines]"
"(https://develop.kde.org/hig/). They are optimal for settings dialogs and "
"for large groups of controls and input fields that are related to each other."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:12
msgid ""
"When provided with enough space, form layouts will take up two columns. The "
"column on the left will be occupied by the labels provided for the form's "
"children components, while the right will be taken up by the children "
"components themselves. In more space-constrained windows (or on mobile), "
"forms will consist of a single vertical column with the labels of children "
"components being placed above their respective component."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:14
msgid "Simple form"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:16
msgid ""
"[Kirigami.FormLayout](docs:kirigami2;FormLayout) components are similar in "
"use to [QtQuick Layout](https://doc.qt.io/qt-6/qtquicklayouts-index.html) "
"components such as [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-"
"columnlayout.html) or [RowLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-"
"rowlayout.html). The child components will be automatically arranged "
"according to the size available to the form layout."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:18
msgid ""
"Children of a [Kirigami.FormLayout](docs:kirigami2;FormLayout) have a "
"property named [Kirigami.FormData.label](docs:kirigami2;FormLayoutAttached::"
"label). This property lets you set the label that will be provided for the "
"child component in question."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:54
msgid "A simple form layout in desktop mode"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:60
msgid "Sections and separators"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:62
msgid ""
"FormLayouts can also be divided into sections. Setting where a section "
"starts is as easy as setting a child component's [Kirigami.FormData."
"isSection](docs:kirigami2;FormLayoutAttached::isSection) to true. This will "
"provide the component with some extra margin at the top to demarcate the "
"start of the new section."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:64
msgid ""
"[Kirigami.Separator](docs:kirigami2;Separator) components are best suited "
"for starting new sections. Separators are used to draw a thin horizontal "
"line, demarcating the end of a section. If you would rather not have a line "
"drawn between sections, you can use a standard QML [Item](docs:qtquick;"
"QtQuick.Item) property. Alternatively you could use the [Kirigami.FormData."
"isSection](docs:kirigami2;FormLayoutAttached::isSection) property on any "
"other component."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:66
msgid ""
"However, this is not recommended. On components where [Kirigami.FormData."
"isSection](docs:kirigami2;FormLayoutAttached::isSection) is set to `true`, "
"the label text provided for this component's [Kirigami.FormData.label](docs:"
"kirigami2;FormLayoutAttached::label) property will be displayed as the "
"section's header text."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:70
msgid ""
"This does not apply to every component, hence the recommendation that you "
"use [Kirigami.Separator](docs:kirigami2;Separator) or [Item](docs:qtquick;"
"QtQuick.Item) components in places where you would like to use a header text."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:74
msgid ""
"This header text is larger than the normal label text, and provides users "
"with a nice visual cue of what the form layout section is about."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:130
msgid "A form layout with sections"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:137
msgid "Checkable children"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:139
msgid ""
"A handy feature of [Kirigami.FormLayout](docs:kirigami2;FormLayout) is that "
"you can add checkboxes to its children. This can be useful in settings pages "
"where you might want to let the user enable or disable a setting, and also "
"want the user to provide some extra information in a component such as a "
"textfield."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:166
msgid "A form layout with checkable label."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:172
msgid "Forcing a desktop or mobile layout"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:174
msgid ""
"If you would rather have your form layout stay consistent regardless of your "
"application's environment, you can use the [wideMode](docs:kirigami2;"
"FormLayout::wideMode) property of the [Kirigami.FormLayout](docs:kirigami2;"
"FormLayout) component:"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:176
msgid ""
"When set to `true`, the form layout will be structured in a desktop-"
"optimized widescreen (double-column) layout"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:177
msgid ""
"When set to `false`, the form layout will be structured in a mobile layout "
"(single column)"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:204
msgid "A form layout with forced mobile layout"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:210
msgid "Aligning your labels"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:212
msgid ""
"There are instances when you want a label to be assigned to components that "
"have more than one line or to a list of components. This can be achieved by "
"putting the [Kirigami.FormData.label](docs:kirigami2;FormLayoutAttached::"
"label) in the [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-"
"columnlayout.html), as you might have noticed in [Sections and Separators]"
"(#sections-and-separators). By default the label is positioned in the "
"vertical center of the layout, which is not always desirable. We can change "
"this with help of [Kirigami.FormData.labelAlignment](docs:kirigami2;"
"FormLayoutAttached::labelAlignment)."
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:238
msgid "A form layout with top-aligned label"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:244
msgid ""
"Setting the label alignment is particularly convenient to manage components "
"or lists of components whose size you do not know beforehand. [Elisa]"
"(https://apps.kde.org/elisa) is a very good example of this:"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:246
msgid ""
"The Comment label is only top aligned when its corresponding component has "
"more than one line"
msgstr ""

#: content/docs/getting-started/kirigami/components-formlayouts.md:248
msgid "We can do something similar to this with a JavaScript ternary operator:"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:0
msgid "Inline messages"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:0
msgid "Display messages related to the content in your application"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:10
msgid ""
"Inline messages provide an immediate way for you to notify your users about "
"something that happened while using the application."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:12
msgid "Basic inline message"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:14
msgid ""
"[Kirigami.InlineMessage](docs:kirigami2;InlineMessage) components have two "
"important properties to be mindful of:"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:15
msgid ""
"[visible](https://doc.qt.io/qt-6/qml-qtquick-item.html#visible-prop): by "
"default this is set to false, so that the message only appears when you "
"explicitly want it to. This can be overridden if you wish by setting it to "
"true. When a hidden inline message is set to be visible, you get a nice "
"animation."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:16
msgid ""
"[text](docs:kirigami2;templates::InlineMessage::text): here is where you set "
"the text of your inline message."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:49
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showing a button which when clicked makes an inline message with "
"light blue background pop up with text above it, near the top of the "
"application](/docs/getting-started/kirigami/components-inlinemessages/"
"inlinemessages-simple.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-inlinemessages.md:55
msgid "Different types"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:57
msgid ""
"Standard inline messages are like the ones above: they have a blue "
"background and a default icon. We can change that with the [type](docs:"
"kirigami2;templates::InlineMessage::type) property, which lets us set our "
"inline message to a different type. There are four types we can choose from:"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:59
msgid ""
"**Information** (`Kirigami.MessageType.Information`): the default. Has a "
"blue background, an 'i' icon, and is used to announce a result or tell the "
"user something general. It is not necessary to manually set it."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:60
msgid ""
"**Positive** (`Kirigami.MessageType.Positive`): has a green background, tick "
"icon, and indicates that something went well."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:61
msgid ""
"**Warning** (`Kirigami.MessageType.Warning`): has an orange background, an "
"exclamation-mark icon, and can be used to warn the user about something they "
"should be mindful of."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:62
msgid ""
"**Error** (`Kirigami.MessageType.Error`): has a red background, a cross "
"icon, and can be used to tell the user that something has gone wrong."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:105
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A window showcasing all four inline message types in blue, green, orange "
"and red](/docs/getting-started/kirigami/components-inlinemessages/"
"inlinemessages-types.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-inlinemessages.md:111
msgid "Customising text and icons"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:113
msgid ""
"Inline messages support rich text, which can be defined with simple HTML-"
"like markup. This allows you to add some formatting to your inline message's "
"text or even include an external web link if you want to."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:122
msgid "Note that when you use quotes in a string you will have to escape them!"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:133
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![An inline message with rich text and a hyperlink](/docs/getting-started/"
"kirigami/components-inlinemessages/inlinemessages-richtext.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-inlinemessages.md:139
msgid ""
"You can also customise the icon that appears on the top left of your message "
"by providing a system icon name for the [icon.source](docs:kirigami2;"
"templates::InlineMessage::icon) property. These icon names should correspond "
"to icons installed on your system; you can use an application such as "
"Cuttlefish provided by [plasma-sdk](https://invent.kde.org/plasma/plasma-"
"sdk) to browse and search the icons available on your system, and see what "
"their names are."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:158
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![An inline message with a custom icon](/docs/getting-started/kirigami/"
"components-inlinemessages/inlinemessages-icon.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-inlinemessages.md:164
msgid "Using actions in inline messages"
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:166
msgid ""
"If your messages need to be interactive, you can attach Kirigami actions to "
"your inline messages. Like with pages, you can do this by setting the "
"[InlineMessage.actions](docs:kirigami2;templates::InlineMessage::actions) "
"property to either a [Kirigami.Action](docs:kirigami2;Action) or an array "
"containing [Kirigami.Action](docs:kirigami2;Action) components."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:207
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![An inline message with two actions](/docs/getting-started/kirigami/"
"components-inlinemessages/inlinemessages-actions.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-inlinemessages.md:213
#, fuzzy
#| msgid "Radio buttons"
msgid "Close buttons"
msgstr "Auswahlknöpfe"

#: content/docs/getting-started/kirigami/components-inlinemessages.md:215
msgid ""
"Inline messages provide a close button that can be used to easily dismiss "
"them."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:217
msgid ""
"By default, this close button is hidden, but this can be overridden by "
"setting the [showCloseButton](docs:kirigami2;templates::InlineMessage::"
"showCloseButton) property to `true`."
msgstr ""

#: content/docs/getting-started/kirigami/components-inlinemessages.md:236
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![An inline message with close button to its right side](/docs/getting-"
"started/kirigami/components-inlinemessages/inlinemessages-closebutton.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-listview.md:0
msgid "List views"
msgstr "Listenansichten"

#: content/docs/getting-started/kirigami/components-listview.md:0
msgid "A list view can help you easily display many components dynamically.\n"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:11
msgid ""
"[Listviews](docs:qtquick;QtQuick.ListView) can help you display objects from "
"a model in an attractive way. To use a list view, you have to keep track of "
"three things:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:13
msgid ""
"The **model**, which contains the data you want your list view to display"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:14
msgid ""
"The **delegate**, which defines how each element in the model will be "
"displayed"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:15
msgid ""
"The **list view** itself, which will display information from the model "
"according to the delegate"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:17
msgid ""
"If you would like further clarification, the Qt documentation has [an "
"informative page](https://doc.qt.io/qt-5/qtquick-modelviewsdata-modelview."
"html) on the topic."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:19
msgid "Creating a basic listview"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:21
msgid "A list view has two essential properties we must pay attention to:"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:23
msgid ""
"[model](https://doc.qt.io/qt-6/qml-qtquick-listview.html#model-prop), which "
"accepts the data or the `id` of the object that holds the data"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:24
msgid ""
"[delegate](https://doc.qt.io/qt-6/qml-qtquick-listview.html#delegate-prop), "
"which accepts the component we will use to display the data in the model"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:41
msgid ""
"Providing a number for the model property will generate that number of data "
"entries starting from 0."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:57
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![A simple listview](/docs/getting-started/kirigami/components-listview/"
"listview-simple.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-listview.md:63
msgid ""
"In cases where your model data only contain a single piece of data, like in "
"the example above, you can just grab the data in the model by referencing "
"[modelData](https://doc.qt.io/qt-6/qtquick-modelviewsdata-modelview."
"html#models)."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:65
msgid ""
"A note on delegates: if your model contains objects with data in named "
"properties, the name of these properties will be automatically exposed to "
"your delegate and you will only need to use these names in your delegate."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:87
msgid ""
"Kirigami offers a number of components that have been designed specifically "
"for use in list views, such as [Kirigami.BasicListItem](docs:kirigami2;"
"BasicListItem), [Kirigami.CheckableListItem](docs:kirigami2;"
"CheckableListItem) and [Kirigami.SwipeListItem](docs:kirigami2;"
"SwipeListItem), all of which build upon [Kirigami.AbstractListItem](docs:"
"kirigami2;AbstractListItem). There are also [Kirigami.CheckDelegate](docs:"
"kirigami2;CheckDelegate), [Kirigami.RadioDelegate](docs:kirigami2;"
"RadioDelegate), and [Kirigami.SwitchDelegate](docs:kirigami2;"
"SwitchDelegate), which are designed to take advantage of those specific "
"controls."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:89
msgid ""
"However, you are not limited to using these components and you can choose "
"whichever ones you wish. This may require some tweaking of your layout."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:91
msgid "Placeholder messages"
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:93
msgid ""
"In some cases, you might want to use a list view that is empty until the "
"user does something. In these situations, using a [Kirigami."
"PlaceholderMessage](docs:kirigami2;PlaceholderMessage) can be an attractive "
"way of telling your user that the list is empty and that they can do "
"something about it."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:95
msgid ""
"You will generally want to place a placeholder message in the center of the "
"ListView and you will likely not want it to span the entire width of the "
"ListView. You will obviously also want it to be hidden once the ListView's "
"model becomes populated with data. Thankfully, ListViews have a property "
"named [count](https://doc.qt.io/qt-6/qml-qtquick-listview.html#count-prop) "
"that makes doing this quite easy."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:97
msgid ""
"You might also want to add a helpful action to your placeholder message. "
"This can be done by attaching an action to the [PlaceholderMessage."
"helpfulAction](docs:kirigami2;PlaceholderMessage::helpfulAction) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-listview.md:133
msgid ""
"![An empty list view which displays a placeholder message in the middle of "
"the application together with an action to add new data to the model](/docs/"
"getting-started/kirigami/components-listview/listview-placeholdermessage.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:0
msgid "Overlay sheets"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:0
msgid ""
"Overlay sheets can serve a variety of uses for both serving and inputting "
"data."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:10
msgid ""
"A [Kirigami.OverlaySheet](docs:kirigami2;OverlaySheet) is a simple component "
"that you can use to supplement the content being displayed on an "
"application's page. They are designed to display long, vertical content and "
"can accommodate content longer than the application window itself."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:12
msgid ""
"They can be dismissed by clicking or tapping outside of their area or by "
"clicking the 'x' icon on sheets' headers."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:14
msgid "Learning about the sheet"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:16
msgid ""
"In order to use an overlay sheet, we should create it inside the Kirigami "
"Page we want it to appear in."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:46
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![Simple overlay sheet containing only text](/docs/getting-started/kirigami/"
"components-overlaysheets/sheet_simple.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-overlaysheets.md:52
msgid ""
"Overlay sheets come with methods we can use to [open()](docs:kirigami2;"
"templates::OverlaySheet::open) or [close()](docs:kirigami2;templates::"
"OverlaySheet::close) them as we see fit. By default overlay sheets are "
"hidden, so at the very least we will need to use the `open()` method."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:61
msgid ""
"When opened, this overlay sheet will appear centered vertically and "
"horizontally within its parent page. Horizontally it will be bounded by its "
"parent even if the width of its contents exceeds its parent's. If the "
"sheet's vertical length exceeds its parent's, then the sheet will be "
"displayed starting from its top position, and will be scrollable."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:63
#, fuzzy
#| msgid "![](global_drawer.png)"
msgid "Global sheet"
msgstr "![](global_drawer.png)"

#: content/docs/getting-started/kirigami/components-overlaysheets.md:65
msgid ""
"If you want to display the sheet as a global sheet—one that spans across the "
"entire width of the application, regardless of the page it is a child to—we "
"have to reparent our overlay sheet to our application window's overlay "
"property. We can do this with the [parent](https://doc.qt.io/qt-6/qml-"
"qtquick-item.html#parent-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:86
msgid "Non-global overlay sheet"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:92
#, fuzzy
#| msgid "![](global_drawer.png)"
msgid "Global overlay sheet"
msgstr "![](global_drawer.png)"

#: content/docs/getting-started/kirigami/components-overlaysheets.md:98
msgid "Fixed sizing"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:100
msgid ""
"A sheet is greedy and will take the maximum amount of available width in a "
"page if needed. We can avoid this by specifying an [implicitWidth](https://"
"doc.qt.io/qt-6/qml-qtquick-item.html#implicitWidth-prop) or a [Layout."
"preferredWidth](https://doc.qt.io/qt-6/qml-qtquick-layouts-layout."
"html#preferredWidth-attached-prop) for its child elements, which will limit "
"how much the sheet will grow width wise."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:117
msgid "Non-fixed width overlay sheet"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:123
msgid "Fixed width overlay sheet"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:129
msgid "Headers and footers"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:131
msgid ""
"Overlay sheets come by default with a [header](docs:kirigami2;templates::"
"OverlaySheet::header) that only contains a button for closing our overlay "
"sheet. We can add a [Kirigami.Heading](docs:kirigami2;Heading) as a title in "
"our [header](docs:kirigami2;templates::OverlaySheet::header) to make it easy "
"for users to understand what the sheet is for. This is done by setting "
"`header` to contain our heading component."
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:156
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![Overlay sheet with title text in its header area](/docs/getting-started/"
"kirigami/components-overlaysheets/sheet_header.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-overlaysheets.md:162
msgid ""
"We can also provide our overlay sheet with a [footer](docs:kirigami2;"
"templates::OverlaySheet::footer). Footers in overlay sheets are quite "
"flexible, but most often they are used to provide overlay sheets with some "
"sort of quick interactive input similar to that provided by modal dialogs (e."
"g. buttons for \"Apply\", \"Ok\", \"Cancel\", \"Close\", etc.)"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:164
msgid "Footers are set in much the same way as headers:"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:194
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![Overlay sheet with a button in its footer area](/docs/getting-started/"
"kirigami/components-overlaysheets/sheet_footer.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-overlaysheets.md:200
msgid "Using delegate / model views"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:202
msgid ""
"Since overlay sheets are designed to display vertical content, they can be "
"especially useful when used in conjunction with components such as "
"[ListViews](docs:qtquick;QtQuick.ListView). When displaying content longer "
"than the application window itself, the overlay sheet becomes scrollable:"
msgstr ""

#: content/docs/getting-started/kirigami/components-overlaysheets.md:225
#, fuzzy
#| msgid "![A simple listview](listview-simple.png)"
msgid ""
"![Overlay sheet with a listview](/docs/getting-started/kirigami/components-"
"overlaysheets/sheet_listview.png)"
msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:0
msgid "Page rows and page stacks"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:0
msgid ""
"Add flow to your application: Add, remove and replace pages in different ways"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:10
msgid "A row of pages"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:12
msgid ""
"We have seen so far that one of the core components of a Kirigami window is "
"a [Kirigami.Page](docs:kirigami2;Page). A single page can envelop the whole "
"screen of the application, or it can be shown together with other pages at "
"the same time, if there is space."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:14
msgid ""
"Whenever a page gets added, or *pushed*, it appears to the right of the "
"existing page(s), forming a row. This row of pages can be managed with the "
"fittingly named [Kirigami.PageRow](docs:kirigami2;PageRow)."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:16
msgid "A minimal page row with a single page could look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:41
msgid "A single page with light blue color to show the page's dimensions"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:43
msgid ""
"There are two improvements that can be done here. The first is that, with "
"[initialPage](docs:kirigami2;PageRow::initialPage), we can both set "
"`mainPage` to be the first page that appears in the page row, and have its "
"dimensions be managed by the page row instead of via manual [anchors]"
"(https://doc.qt.io/qt-6/qtquick-positioning-anchors.html), [positioners]"
"(https://doc.qt.io/qt-6/qtquick-positioning-layouts.html) or [layouts]"
"(https://doc.qt.io/qt-6/layout.html). The second is to have a toolbar, which "
"can be set by defining a toolbar style with [globalToolBar.style](docs:"
"kirigami2;PageRow::globalToolBar). There are a few styles we can choose "
"from, but we'll go with [Kirigami.ApplicationHeaderStyle.Auto](docs:"
"kirigami2;templates::ApplicationHeader::headerStyle) for now."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:65
msgid ""
"A single page with toolbar and light blue color to show the page's dimensions"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:67
msgid ""
"There are only two ways of adding pages to a page row: by setting its "
"[initialPage](docs:kirigami2;PageRow::initialPage) (which can optionally "
"take an array of pages) or by using [push()](docs:kirigami2;PageRow::push). "
"To delete a page from the page row, you should use [pop()](docs:kirigami2;"
"PageRow::pop), whereas [goBack()](docs:kirigami2;PageRow::goBack) or "
"[goForward()](docs:kirigami2;PageRow::goForward) can be used to navigate "
"between pages."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:112
msgid "Initial page with light blue color"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:114
msgid ""
"Upon clicking \\\"Push!\\\", a second page with light green color shows up"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:116
msgid "The application's stack of pages"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:118
msgid ""
"If a [Kirigami.PageRow](docs:kirigami2;PageRow) with a toolbar looks "
"familiar to you, that is because you have seen it before. An "
"[ApplicationWindow.pageStack](docs:kirigami2;AbstractApplicationWindow::"
"pageStack) is nothing more than a very convenient, global page row. Every "
"function available to a `PageRow` is also available to the `pageStack`."
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:120
msgid ""
"The previous example can be reduced significantly with a `pageStack`, with "
"the added bonus of navigation actions:"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:167
msgid ""
"In general you'll want to use a `pageStack` rather than implement your own "
"[PageRow](docs:kirigami2;PageRow), especially when your application gets "
"bigger and you need your components living in separate files. If you create "
"your window in your `main.qml` using a [Kirigami.ApplicationWindow](docs:"
"kirigami2;ApplicationWindow), a component residing in another file can still "
"directly invoke the global `pageStack` by means of a call to the "
"[applicationWindow()](docs:kirigami2;AbstractApplicationWindow::"
"applicationWindow):"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:170
#, fuzzy
#| msgid "main.qml"
msgid "\"main.qml\""
msgstr "main.qml"

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:180
msgid "and"
msgstr ""

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:183
#, fuzzy
#| msgid "LoginPage.qml"
msgid "\"BasicPage.qml\""
msgstr "LoginPage.qml"

#: content/docs/getting-started/kirigami/components-pagerow_pagestack.md:209
msgid "Clicking the button pushes a new page with help of applicationWindow"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:0
msgid "Progress Bars and Indicators"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:0
msgid "Provide your users with loading state information using progress bars."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:10
msgid ""
"Whenever your application does something that takes a noticeable amount of "
"time, you will want to use a visual element that tells the user that "
"something is happening in the background."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:12
msgid ""
"QtQuick Controls provides two useful components that you can use to this end."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:14
msgid "Progress bar"
msgstr "Fortschrittsanzeige"

#: content/docs/getting-started/kirigami/components-progressbars.md:16
msgid ""
"[Controls.ProgressBar](docs:qtquickcontrols;QtQuick.Controls.ProgressBar) is "
"a component that lets you easily include progress bars in your application. "
"There are four main properties you will need to use:"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:18
msgid ""
"[from](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar.html#from-"
"prop): the minimum value represented by the start of the progress bar"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:19
msgid ""
"[to](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar.html#to-prop): "
"the maximum value represented by the end of the progress bar"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:20
msgid ""
"[value](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar.html#value-"
"prop): the current value of the action that is in progress (e.g. 50% loaded)"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:21
msgid ""
"[indeterminate](https://doc.qt.io/qt-6/qml-qtquick-controls2-progressbar."
"html#indeterminate-prop): if the action that is in process currently has no "
"clear progress value, you can set this property to `true` to show the user "
"that something is happening but its progress is not yet clear (but will be "
"soon)."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:48
msgid "Above: progress bar at 50%; below: indeterminate progress bar"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:54
msgid "Busy indicator"
msgstr "Fortschrittsanzeige"

#: content/docs/getting-started/kirigami/components-progressbars.md:56
msgid ""
"In cases where loading times are shorter or measuring progress is not "
"feasible, you can instead use [Controls.BusyIndicator](docs:qtquickcontrols;"
"QtQuick.Controls.BusyIndicator). This component provides a simple spinning "
"wheel that shows users that something is happening."
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:62
msgid ""
"![A busy indicator](/docs/getting-started/kirigami/components-progressbars/"
"busyindicator.png)"
msgstr ""

#: content/docs/getting-started/kirigami/components-progressbars.md:64
msgid ""
"If you want the indicator to stop running, you can do so by setting the "
"[running](https://doc.qt.io/qt-6/qml-qtquick-controls2-busyindicator."
"html#running-prop) property to false."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:0
msgid "Scrollable Pages and List Views"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:0
msgid ""
"Scrollable pages are useful when combined with vertical components or "
"dynamic components such as List Views."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:10
msgid "Kirigami.ScrollablePage"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:12
msgid ""
"A [Kirigami.ScrollablePage](docs:kirigami2;ScrollablePage) is a page that "
"holds scrollable content, such as a [ListView](docs:qtquick;QtQuick."
"ListView). Scrolling, as well as scrolling indicators, are automatically "
"managed."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:18
msgid "The rectangle will automatically be scrollable"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:26
msgid ""
"In almost every other way, a scrollable page is the same as a normal page."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:30
msgid ""
"Do not put a [ScrollView](docs:qtquickcontrols;QtQuick.Controls.ScrollView) "
"inside of a [Kirigami.ScrollablePage](docs:kirigami2;ScrollablePage); "
"children of a `Kirigami.ScrollablePage` are already inside a `ScrollView`."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:35
msgid "ListView in a ScrollablePage"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:37
msgid ""
"When the direct children of a [Kirigami.ScrollablePage](docs:kirigami2;"
"ScrollablePage) extend vertically beyond the size of the page itself, a "
"scrollbar appears at the right edge of the page and the page will be "
"scrollable."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:41
msgid ""
"Two scrollable pages, both containing a ListView with custom contents "
"(screenshot of NeoChat)"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:43
msgid ""
"Often you have more than one child in your [Kirigami.ScrollablePage](docs:"
"kirigami2;ScrollablePage), and positioning items can be tricky—especially in "
"combination with a [ListView](docs:qtquick;QtQuick.ListView)."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:46
msgid ""
"For non-visual components, having them inside the [ListView](docs:qtquick;"
"QtQuick.ListView) component won't change the visuals of the page, so we can "
"move them inside the scope of the list view. Same for elements anchored to "
"the center of the page, such as placeholder messages for empty list views."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:49
msgid ""
"For other items, it might make sense to move them to the header or footer of "
"the [Kirigami.ScrollablePage](docs:kirigami2;ScrollablePage). This is often "
"the case for search bars."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:52
msgid "PlaceholderMessage"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:54
msgid ""
"It is possible to add a [Kirigami.PlaceholderMessage](docs:kirigami2;"
"PlaceholderMessage) with some instructions in case the list view is empty."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:76
msgid "Search in the ListView"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:78
msgid ""
"A search field is often added to a [Kirigami.ScrollablePage](docs:kirigami2;"
"ScrollablePage) to filter the [ListView](docs:qtquick;QtQuick.ListView). "
"This can be done by changing the default [titleDelegate](docs:kirigami2;"
"Page::titleDelegate) to use a [Kirigami.SearchField](docs:kirigami2;"
"SearchField) instead."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:100
msgid "Hint"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:102
msgid ""
"You can use [KSortFilterProxyModel](docs:kitemmodels;SortFilterModel) from "
"[KItemModel](docs:kitemmodels) to easily add filtering capability directly "
"in QML without any need for C++ code."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:108
msgid "Pull to refresh"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:110
msgid ""
"Another function provided by this component is a \"pull-to-refresh\" action. "
"To use this, activate it as follows:"
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:123
msgid ""
"NOTE: MyModel doesn't come from the components, it's purely an example on "
"how it can be used together with some application logic that can update the "
"list model and signals when it's done."
msgstr ""

#: content/docs/getting-started/kirigami/components-scrollablepages_listviews.md:135
msgid ""
"By pulling down, you can also activate a special mode with a larger top "
"margin which makes single-handed use of the application easier."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:0
msgid "Adding actions"
msgstr "Aktionen hinzufügen"

#: content/docs/getting-started/kirigami/introduction-actions.md:0
msgid ""
"Learning more about Kirigami's Actions will help us make our application "
"more useful.\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:10
msgid "Recap"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:12
msgid ""
"So far, we have managed to build a simple app that can display cards. "
"However, we don't yet have a way of adding new cards to our card view."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:14
msgid ""
"In this tutorial, we'll be looking at Kirigami actions. These will help us "
"add interactivity to our app in a consistent, fast, and accessible way."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:24
msgid "Page actions on mobile"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:29
msgid ""
"If you have used Kirigami apps before, you have certainly interacted with "
"Kirigami Actions. In this image, we can see actions to the right of the page "
"title with various icons. Kirigami Actions can be displayed in several ways "
"and can do a wide variety of things."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:31
#, fuzzy
#| msgid "Adding actions"
msgid "Adding countdowns"
msgstr "Aktionen hinzufügen"

#: content/docs/getting-started/kirigami/introduction-actions.md:37
msgid ""
"A countdown app is pretty useless without the ability to add countdowns. "
"Let's create an action that'll let us do this."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:57
msgid ""
"We are placing our Kirigami Action within our main page from our previous "
"tutorials. If we wanted to, we could add more actions to our page (and even "
"nest actions within actions!). [Kirigami.Action](docs:kirigami2;Action) "
"components are used as contextual actions within Kirigami pages. We are "
"setting it specifically to the [actions.main](docs:kirigami2;Page::actions) "
"property of our [Kirigami.Page](docs:kirigami2;Page): the `actions` object "
"has properties that let us set different actions in different positions, but "
"since our \"Add kountdown\" action is central to our UI we are setting it as "
"the main action of this page."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:59
msgid ""
"The `id` and `text` properties should be familiar from previous tutorials. "
"However, the inherited [Action.icon](https://doc.qt.io/qt-5/qml-qtquick-"
"controls2-action.html#icon-prop) property should be interesting: it is an "
"object with several properties letting you display certain icons for your "
"actions. Fortunately, to use KDE icons all we need to do is provide the name "
"property for the icon property, `icon.name`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:63
msgid ""
"Cuttlefish is a KDE application that lets you view all the icons that you "
"can use for your application. It offers a number of useful features such as "
"previews of their appearance across different installed themes, previews at "
"different sizes, and more. You might find it a useful tool when deciding on "
"which icons to use in your application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:65
msgid ""
"Many of KDE's icons follow the FreeDesktop Icon Naming specification. "
"Therefore, you might also find it useful to consult The FreeDesktop "
"project's website, [which lists all cross-desktop compatible icon names]"
"(https://specifications.freedesktop.org/icon-naming-spec/icon-naming-spec-"
"latest.html)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:69
msgid ""
"The [onTriggered](docs:qtquickcontrols;QtQuick.Controls.Action::triggered) "
"signal handler is the most important. This is what our action will do when "
"it is used. You'll notice that in our example we're using the method "
"[kountdownModel.append](https://doc.qt.io/qt-6/qml-qtqml-models-listmodel."
"html#append-method) of the `kountdownModel` we created in our previous "
"tutorial. This method lets us append a new element to our list model. We are "
"providing it with an object (indicated by curly braces `{}`) that has the "
"relevant properties for our countdowns (`name`, `description`, and a "
"placeholder `date`)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:75
msgid ""
"Each time we click our \\\"Add kountdown\\\" button on the top right, our "
"custom countdown is added"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:77
msgid "Mobile version"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:89
msgid ""
"Did you notice those three lines next to the page title on the previous "
"screenshot? That's a hamburger menu that opens a [Kirigami.GlobalDrawer]"
"(docs:kirigami2;GlobalDrawer). Global drawers are useful for global "
"navigation and actions: in other words, those things you might need to use "
"throughout your application. We are going to create a simple global drawer "
"that includes a \"quit\" button."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:111
msgid ""
"Here, we put our global drawer inside our application window. The main "
"property we need to pay attention to is [GlobalDrawer.actions](docs:"
"kirigami2;GlobalDrawer::actions), which takes the form of an array of "
"[Kirigami.Action](docs:kirigami2;Action) components. This action has an "
"appropriate icon and executes the [Qt.quit()](docs:qtqml;QtQml.Qt::quit) "
"function when triggered, closing the application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:114
msgid ""
"Since we are keeping our global drawer simple for now, we are setting the "
"[GlobalDrawer.isMenu](docs:kirigami2;GlobalDrawer::isMenu) property to "
"`true`. This displays our global drawer as a normal application menu, taking "
"up less space than the default global drawer pane."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:122
#, fuzzy
#| msgid "![](global_drawer.png)"
msgid "Global drawer as a menu"
msgstr "![](global_drawer.png)"

#: content/docs/getting-started/kirigami/introduction-actions.md:130
msgid ""
"The [Actions based components](/docs/getting-started/kirigami/components-"
"actions/) page of these docs provides further detail on Kirigami Actions and "
"how they can be used."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-actions.md:134
#: content/docs/getting-started/kirigami/introduction-listviews.md:242
#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:103
msgid "Our app so far"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:0
msgid "Setting up and getting started"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:0
msgid "Getting ready to create our first Kirigami application\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:11
msgid "Installing required packages"
msgstr "Erforderliche Pakete installieren"

#: content/docs/getting-started/kirigami/introduction-getting_started.md:13
msgid ""
"Before getting started, we must install a few things. We need a C++ "
"compiler, Qt development packages, and Kirigami."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:24
msgid ""
"Further information for other distributions can be found [here](https://"
"community.kde.org/Guidelines_and_HOWTOs/Build_from_source/"
"Install_the_dependencies)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:26
msgid "Project structure"
msgstr "Projektstruktur"

#: content/docs/getting-started/kirigami/introduction-getting_started.md:28
msgid ""
"While there are tools that can easily set up our files, we are going to "
"create them manually. This will let us better understand the pieces that are "
"going to make up our new application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:30
msgid ""
"First we create our project folder. We are going to call ours \"helloworld\"."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:44
msgid ""
"Within this folder we are going to create a `src/` folder and `CMakeLists."
"txt`. It is generally considered good practice to place all our main code "
"files in a `src/` folder. Our `src/` folder in turn will contain a folder "
"named `contents/`, which itself contains a folder called `ui/`. Here is "
"where we will create our QML files."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:46
#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:14
#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:169
msgid "Tip"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:48
msgid "You can quickly create this file structure with:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:56
msgid ""
"Alternatively, you may want to use the standard Kirigami template provided "
"by [KDevelop](https://apps.kde.org/kdevelop/), KDE's main IDE for coding in C"
"++ and QML. [KAppTemplate](https://apps.kde.org/kapptemplate/) is also "
"available if you only need a quick template to start coding in your favorite "
"IDE or text editor."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:60
msgid ""
"This is a KDE convention, but not all KDE projects use this structure. You "
"are free to set things up differently, but you will have to take this into "
"account when creating your `CMakeLists.txt` and `resources.qrc` files."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:66
msgid "Here's where we will be handling our application's frontend."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:68
msgid ""
"If you know some Javascript, then much of QML will seem familiar to you "
"(though it does have its own peculiarities). [Qt's documentation](https://"
"doc.qt.io/qt-5/qtqml-index.html) has an extensive amount of material on this "
"language if you feel like trying something on your own. Over the course of "
"these tutorials we will be focusing much of our attention on our QML code, "
"where we can use Kirigami to get the most out of it."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:70
msgid ""
"For now, let's focus on `main.qml`. First we [import](https://doc.qt.io/qt-6/"
"qtqml-syntax-imports.html) a number of important modules:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:72
msgid ""
"[QtQuick](https://doc.qt.io/qt-6/qtquick-index.html), the standard library "
"used in QML applications."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:73
msgid ""
"[QtQuick Controls](https://doc.qt.io/qt-6/qtquickcontrols-index.html), which "
"provides a number of standard controls we can use to make our applications "
"interactive."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:74
msgid ""
"[QtQuick Layouts](https://doc.qt.io/qt-6/qtquicklayouts-index.html), which "
"provides tools for placing components within the application window."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:75
msgid ""
"[Kirigami](docs:kirigami2), which provides a number of components suited for "
"creating applications that work across devices of different shapes and sizes."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:79
msgid ""
"Putting the QtQuick Controls and Kirigami imports into separate namespaces "
"using the `as` keyword is a best practice that ensures no components with "
"the same name can conflict. You might see different names for QtQuick "
"Controls in the wild, such as \"QQC\" or \"QQC2\". We will be using "
"\"Controls\" in this tutorial for clarity."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:83
msgid ""
"We then come to our base element, [Kirigami.ApplicationWindow](docs:"
"kirigami2;ApplicationWindow), which provides some basic features needed for "
"all Kirigami applications. This is the window that will contain each of our "
"pages, the main sections of our UI."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:85
msgid ""
"We then set the window's `id` property to \"root\". IDs are useful because "
"they let us uniquely reference a component, even if we have several of the "
"same type."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:87
msgid ""
"We also set the window `title` property to \"Hello World\". You'll notice "
"that we have wrapped our \"Hello World\" string in a function called "
"`i18nc()`, where we detail the context of the string as well as the string "
"itself."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:91
msgid ""
"[i18n()](https://techbase.kde.org/Development/Tutorials/Localization/"
"i18n#Translatable_Code_Using_i18n()) functions make your app more easily "
"translatable, as they return a version of the provided string in the user's "
"language (as long as your app has been localised for that language). While "
"an English user might see our window title as \"Hello World\", a Spanish "
"user would see \"Hola Mundo\"."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:93
msgid ""
"[i18nc()](https://techbase.kde.org/Development/Tutorials/Localization/"
"i18n#Adding_Context_with_i18nc()) builds on the `i18n()` function by "
"allowing developers to provide some context to translators working on the "
"app. Here we clarify that the UI component is the title of the application "
"window, so we have included the string \"@title:window\" before \"Hello World"
"\". See the [Ki18n Programmer's guide](https://api.kde.org/frameworks/ki18n/"
"html/prg_guide.html#good_ctxt) for more details."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:97
msgid ""
"We then set the first page of our page stack. Most Kirigami applications are "
"organised as a stack of pages, each page containing related components "
"suited to a specific task. For now, we are keeping it simple, and sticking "
"to a single page. [pageStack](docs:kirigami2;AbstractApplicationWindow::"
"pageStack) is an initially empty stack of pages provided by [Kirigami."
"ApplicationWindow](docs:kirigami2;ApplicationWindow), and with `pageStack."
"initialPage: Kirigami.Page {...}` we set the first page presented upon "
"loading the application to a [Kirigami.Page](docs:kirigami2;Page). This page "
"will contain all our content."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:99
msgid ""
"Finally, we include in our page a [Controls.Label](docs:qtquickcontrols;"
"QtQuick.Controls.Label) that lets us place text on our page. We use `anchors."
"centerIn: parent` to center our label horizontally and vertically within our "
"parent element. In this case, the parent component of our label is [Kirigami."
"Page](docs:kirigami2;Page). The last thing we need to do is set its text: "
"`text: i18n(\"Hello World!\")`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:103
msgid ""
"`main.cpp` handles the \"business logic\" of our application. C++ is handy "
"because it is flexible and fast, even if it is more involved than other "
"programming languages."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:105
msgid ""
"`main.cpp` is also the entrypoint to our application. The two parts of our "
"project, the backend and the user interface, are both set up and started "
"here."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:109
msgid ""
"For now, we don't need to go into too much detail regarding what our `main."
"cpp` code does, but its role will grow significantly more important once we "
"decide to add more complex functionality to our application in the future. "
"If you want to get ahead, you can read more about how this `main.cpp` works "
"in [this page](/docs/getting-started/kirigami/advanced-maincpp)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:111
msgid "resources.qrc"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:113
msgid ""
"Our `resources.qrc` is a [Qt Resource file](https://doc.qt.io/qt-5/resources."
"html). It contains the list of all QML files as well as other files (like "
"custom icons) that will be included in the binary."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:117
msgid ""
"Notice the line `<file alias=\"main.qml\">contents/ui/main.qml</file>`. It "
"details which QML files are going to be included in the compilation process. "
"In our case we are only using `main.qml`, but if we were to add more QML "
"files to our code, we'd need to make sure we include it in `resources.qrc` "
"file by adding another line like this one."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:119
msgid ""
"This resource file lets us use the \"qrc:\" + \"/main.qml\" path in our "
"`main.cpp`, instead of needing to specify the whole \"contents/ui/main.qml\" "
"path."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:123
msgid ""
"`CMakeLists.txt` files are needed to use KDE's build system of choice, "
"[CMake](https://cmake.org/). The `CMakeLists.txt` file in our top-level "
"folder is going to specify some of our application's characteristics. It "
"also includes some of the dependencies we need in order to compile our "
"project."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:127
msgid ""
"The `CMakeLists.txt` defines how to build your projects. Most of the content "
"here is just to bootstrap your project. You can read a line-by-line, in-"
"depth explanation of what this CMakeLists file does [here](/docs/getting-"
"started/kirigami/advanced-understanding_cmakelists/)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:129
msgid ""
"The most important thing to keep in mind is that the Qt and KDE Frameworks "
"dependencies are managed with [find_package()](https://cmake.org/cmake/help/"
"latest/command/find_package.html). You will have to modify these lines and "
"include any additional components that you decide to use during the "
"development of your application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:131
msgid ""
"The final line, `add_subdirectory(src)`, points CMake to the `helloworld/src/"
"` directory, where our source code is located. Let's delve into the "
"`helloworld/src/CMakeLists.txt` file in there."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:135
msgid "This one's a lot shorter! Let's go through what it does:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:137
msgid ""
"[add_executable()](https://cmake.org/cmake/help/latest/command/"
"add_executable.html) creates an executable from the given source files."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:138
msgid ""
"[target_link_libraries()](https://cmake.org/cmake/help/latest/command/"
"target_link_libraries.html) links the libraries used in our code to our "
"executable."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:142
msgid ""
"Note that these libraries should match the components that we included in "
"our previous `CMakeLists.txt` file—otherwise these components will not be "
"included and our application won't compile."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:146
msgid ""
"Now that CMake has been taken care of, let's look at the files we are going "
"to spend the majority of our time working with."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:148
msgid "Compiling and running the application"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:150
msgid ""
"We are almost at the finish line. The last thing we need to do is build and "
"compile our application. To do that, we need to enter our `helloworld/` "
"folder in our terminal application of choice and run the following commands:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:157
msgid "And launch it with:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:163
msgid ""
"Voilà! Now you will see your very first Kirigami app appear before your very "
"own eyes."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:165
msgid "![Screenshot of the generated Kirigami application](hello-kworld.png)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:169
msgid ""
"Next time you want to create the files and folders needed, you can use "
"[KAppTemplate](https://apps.kde.org/kapptemplate) or [KDevelop](https://apps."
"kde.org/kdevelop/) to automatically generate a suitable project to start "
"from. They are available from each major distribution's repositories. These "
"applications will also generate files containing [AppStream](https://www."
"freedesktop.org/software/appstream/docs/sect-Metadata-Application.html) "
"metadata and a `.desktop` file that contains information about how the "
"application should be displayed in a linux application launcher."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-getting_started.md:171
msgid ""
"Thanks to the magic of CMakeLists, you can also use IDEs such as KDevelop or "
"[QtCreator](https://www.qt.io/product/development-tools) to develop this "
"application within a comfortable environment with minimal effort."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:0
#, fuzzy
#| msgid "Colors and Themes in Kirigami"
msgid "Using Kirigami Gallery"
msgstr "Farben und Designs in Kirigami"

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:0
msgid "Using Kirigami Gallery to find code patterns\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:11
msgid ""
"[Kirigami Gallery](https://apps.kde.org/kirigami2.gallery/) is a helpful "
"friend when developing a Kirigami application. It is an application that "
"uses core Kirigami features, provides links to the source code, tips on how "
"to use Kirigami components, and links to the corresponding HIG pages."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:16
msgid ""
"Before continuing please install Kirigami Gallery. It should already be in "
"the repository of your Linux distribution."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:21
msgid "Finding a card grid"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:23
msgid ""
"Navigating through the Kirigami Gallery application, we will stumble upon "
"the \"Grid view with cards\" gallery component. This is an example that can "
"be applied to multiple use cases, such as contact cards."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:25
msgid "![List of kirigami gallery components](components.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:27
msgid ""
"After selecting the \"Grid view of cards\" gallery component, if we click "
"the \"Info\" button on the top right, we will get some useful information "
"about the Card and Abstract Card types."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:29
msgid "![Kirigami gallery grid view](cards.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:31
msgid ""
"In the bottom section of this information dialog we will also find a link to "
"the source code of the \"Cards Grid View\". Let's navigate to this page."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:34
msgid "Implementing a card grid"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:36
msgid ""
"We will reuse most of the code found in the [source code of the "
"CardsGridViewGallery component](https://invent.kde.org/sdk/kirigami-"
"gallery/-/blob/master/src/data/contents/ui/gallery/CardsGridViewGallery."
"qml). In particular, we will remove the extra parts of the [OverlaySheet]"
"(docs:kirigami2;OverlaySheet) (which is the pop-up we used to reach the "
"kirigami-gallery source code repository)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:39
msgid ""
"So, we are going to substitute the [Page](docs:kirigami2;Page) component of "
"`main.qml` of our skeleton app with the below [ScrollablePage](docs:"
"kirigami2;ScrollablePage):"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:58
msgid ""
"What we have done so far is to create a [ScrollablePage](docs:kirigami2;"
"ScrollablePage) and put a [CardsGridView](docs:kirigami2;CardsGridView) into "
"it, since we want to display a grid of Cards generated from a model. The "
"data of each contact is provided by a [ListModel](https://doc.qt.io/qt-6/qml-"
"qtqml-models-listmodel.html) while the card delegate is responsible for the "
"presentation of the data. For more info about models and views in Qt Quick, "
"see [here](https://doc.qt.io/qt-5/qtquick-modelviewsdata-modelview.html)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:64
msgid ""
"Now let's populate the model that will feed our grid view with data. In the "
"definition of [Kirigami.ScrollablePage](docs:kirigami2;ScrollablePage), just "
"after:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:72
msgid "add the following:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:123
msgid ""
"Notice the `{}` that indicates we are appending a JavaScript object to our "
"model."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:127
msgid ""
"The model part of our implementation is ready. Let's proceed to defining a "
"delegate that will be responsible for displaying the data. So, we add the "
"following code to the `main.qml` page, just after the [Component.onCompleted]"
"(docs:qtqml;QtQml.Component::completed) definition:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:161
msgid ""
"Following the related information on the [Kirigami.Card API page](docs:"
"kirigami2;Card), we populate a \"[banner](docs:kirigami2;Card::banner)\" "
"that will act as a header to display the name of the contact as well as a "
"contact icon."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:163
msgid ""
"The main content of the card has been populated with the cell phone number "
"and the email of the contact, structured as a [Column](docs:qtquick;QtQuick."
"Column) of [Labels](docs:qtquickcontrols;QtQuick.Controls.Label)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:165
msgid "The application should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:167
msgid "![Simple grid of cards](implementation.png)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:171
msgid ""
"You can find the full source code of the tutorial at [invent.kde.org]"
"(https://invent.kde.org/dkardarakos/kirigami-tutorial)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:175
msgid ""
"As a last step we will add some dummy functionality to each card. In "
"particular, a `call` [Action](docs:kirigami2;Action) will be added. "
"Nevertheless, instead of a real call, a passive notification will be "
"displayed. So, let's change the `card` component to the following:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:180
msgid ""
"So, we added a [Kirigami.Action](docs:kirigami2;Action) that, as soon as it "
"is triggered (by pressing the action button), displays a [passive "
"notification](docs:kirigami2;AbstractApplicationWindow::"
"showPassiveNotification)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:182
msgid "Result"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:184
msgid "Finally, our application should look like this:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-kirigami-gallery.md:188
msgid "![Grid with calling action triggered](implementation-actions.png)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:0
msgid "Layouts, ListViews, and Cards"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:0
msgid "Figuring out the different ways of placing things on a page"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:9
#: content/docs/getting-started/kirigami/style-typography.md:0
msgid "Laying out your content"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:11
msgid ""
"Now that we understand how pages work, it is time to add stuff to ours. We "
"will be going through a number of important layout components and elements "
"that will be useful when designing our app."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:13
msgid ""
"Don't be scared by the big chunks of code! We'll be going over everything "
"that we haven't covered before, and by the end of this section you'll have a "
"neat-looking app."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:15
#, fuzzy
#| msgid "List views"
msgid "ListViews"
msgstr "Listenansichten"

#: content/docs/getting-started/kirigami/introduction-listviews.md:17
msgid ""
"If you've ever used [Discover](https://apps.kde.org/discover/), [NeoChat]"
"(https://apps.kde.org/neochat/), or Plasma's System Settings, you will have "
"come across a [ListView](https://doc.qt.io/qt-6/qml-qtquick-listview.html). "
"Quite simply, it lets you display data on a list."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:27
msgid "That seems cryptic, but don't worry. Let's start from the beginning."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:29
msgid ""
"We add this component inside our [Kirigami.ScrollablePage](docs:kirigami2;"
"ScrollablePage) from the last tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:31
msgid ""
"We're using [Kirigami.CardsListView](docs:kirigami2;CardsListView), which is "
"a [ListView](https://doc.qt.io/qt-6/qml-qtquick-listview.html) that allows "
"us to easily display cards in a list. However, ListViews are made to show "
"data taken from a model - to automatically populate itself from a set of "
"data that we point it to. That's where the `model` property comes in: in "
"this example, it's pointing to `kountdownModel`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:33
msgid "Model"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:38
msgid "Each ListElement is an element on the list, containing information"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:47
msgid ""
"We add our `kountdownModel` inside our [Kirigami.ApplicationWindow](docs:"
"kirigami2;ApplicationWindow) from the last tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:49
msgid ""
"A model defines the way that a data entry is structured. Our "
"`kountdownModel` will consist of only one element for now. By looking at our "
"[ListElement](https://doc.qt.io/qt-6/qml-qtqml-models-listelement.html) "
"above, we can see how the data of our `kountdownModel` are structured: it "
"contains a name, a description, and a date. This isn't set in stone, and you "
"may have different sorts of data in your model. The first two are just "
"strings, and the third is a number we're using as a placeholder."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:53
msgid ""
"Since QML is built on top of JavaScript, many of this language's features "
"are available for use in QML files. However, QML variables have to be "
"prefixed with `property`, unless it is inside a JS code block. You can read "
"more about it in [this page](https://doc.qt.io/qt-6/qtqml-javascript-topic."
"html)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:57
msgid ""
"Models are also useful in how they can be modified through the use of "
"several methods. Some important ones are:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:58
msgid ""
"[ListModel.append(yourobject: jsobject)](https://doc.qt.io/qt-6/qml-qtqml-"
"models-listmodel.html#append-method) adds a JavaScript Object `yourobject` "
"to the ListModel, and places it after the last item in the model. For this "
"to happen correctly, you must provide a JavaScript Object with the correct "
"properties and corresponding datatypes."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:59
msgid ""
"[ListModel.get(index: int)](https://doc.qt.io/qt-6/qml-qtqml-models-"
"listmodel.html#get-method) returns the JSObject at the index location you "
"provide."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:60
msgid ""
"[ListModel.remove(index: int, count: int)](https://doc.qt.io/qt-6/qml-qtqml-"
"models-listmodel.html#remove-method) removes the JSObject at the provided "
"`index` location, and as many after that index location as you put in "
"`count` (1 includes only the JSObject at the provided index)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:61
msgid ""
"[ListModel.set(index: int, yourobject: jsobject)](https://doc.qt.io/qt-6/qml-"
"qtqml-models-listmodel.html#set-method) changes the item at the provided "
"`index` location with the values provided in `yourobject`. Same rules as "
"with `append()`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:63
msgid "Delegate"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:65
msgid ""
"While our `kountdownModel` contains the data that will be displayed, our "
"`kountdownDelegate` will handle how the data will be displayed in the "
"[ListView](https://doc.qt.io/qt-6/qml-qtquick-listview.html). [Kirigami."
"CardsListView](docs:kirigami2;CardsListView) was designed to display card-"
"type delegates, and we have indeed used a [Kirigami.AbstractCard](docs:"
"kirigami2;AbstractCard) element as our delegate in the excerpt above."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:67
msgid ""
"Delegates automatically receive the properties of the ListElements that we "
"have specified in our model. We can therefore just refer to the `name`, "
"`description`, and `date` properties of our ListElements as if they were a "
"conventional variable within our delegate."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:69
msgid "Building our delegate card"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:71
msgid ""
"The [Component](docs:qtqml;QtQml.Component) that will represent our delegate "
"can be added inside our [Kirigami.ApplicationWindow](docs:kirigami2;"
"ApplicationWindow). We will then proceed by checking what each part of our "
"delegate component does."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:78
msgid ""
"implicitWidth/Height define the natural width/height of an item if no width "
"or height is specified. The setting below defines a component's preferred "
"size based on its content"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:120
msgid "onClicked: to be done... soon!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:128
msgid "implicitWidth and implicitHeight"
msgstr "implicitWidth und implicitHeight"

#: content/docs/getting-started/kirigami/introduction-listviews.md:130
msgid ""
"The first part we will take a look at is how to manage the width and height "
"of our component:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:145
msgid ""
"Looking at our [Kirigami.AbstractCard](docs:kirigami2;AbstractCard), the "
"first properties we set are [implicitWidth](https://doc.qt.io/qt-6/qml-"
"qtquick-item.html#implicitWidth-prop) and [implicitHeight](https://doc.qt.io/"
"qt-6/qml-qtquick-item.html#implicitHeight-prop). We have set these to the "
"`delegateLayout.implicitWidth` and `delegateLayout.implicitHeight`, i.e. the "
"`implicitWidth` and `implicitHeight` of the `GridLayout` element. Implicit "
"widths and heights are properties that are set as a default, i.e. if there "
"is no explicit width or height set for these components. We have therefore "
"set the `implicitWidth` and `implicitHeight` of our [Kirigami.AbstractCard]"
"(docs:kirigami2;AbstractCard) to that of the [GridLayout](https://doc.qt.io/"
"qt-6/qml-qtquick-layouts-gridlayout.html) below to ensure it does not spill "
"out of the card."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:147
#, fuzzy
#| msgid "Cards"
msgid "Layouts"
msgstr "Karten"

#: content/docs/getting-started/kirigami/introduction-listviews.md:149
msgid ""
"The [GridLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-gridlayout.html) "
"is inside the [Item](https://doc.qt.io/qt-6/qml-qtquick-item.html) component "
"we have provided for the property [contentItem](https://doc.qt.io/qt-6/qml-"
"qtquick-controls2-control.html#contentItem-prop). This is the [Item](https://"
"doc.qt.io/qt-6/qml-qtquick-item.html) that contains what will be displayed "
"in your card."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:151
msgid ""
"We also need to choose a [layout](https://doc.qt.io/qt-6/qtquicklayouts-"
"index.html) for our components so that they don't just pile on top of each "
"other. There are three main types that we can choose from:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:152
msgid ""
"[ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-columnlayout.html) "
"lays out your components vertically, in a single column"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:153
msgid ""
"[RowLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-rowlayout.html) lays "
"out your components horizontally, in a single row"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:154
msgid ""
"[GridLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-gridlayout.html) "
"lays out your components in a grid with a composition of your choosing"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:156
msgid ""
"With [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-columnlayout."
"html) and [RowLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-rowlayout."
"html), all we have to do is write our components inside the Layout "
"component. As you can see, we went with a [GridLayout](https://doc.qt.io/"
"qt-6/qml-qtquick-layouts-gridlayout.html), which entails a bit more "
"handiwork."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:175
msgid ""
"The first thing you see is our `anchors`. [QtQuick's anchoring system]"
"(https://doc.qt.io/qt-6/qtquick-positioning-anchors.html) provides a useful "
"way of making sure your components are positioned in certain parts of a "
"parent component. We have anchored our [GridLayout](https://doc.qt.io/qt-6/"
"qml-qtquick-layouts-gridlayout.html) to the left, top, and right of the "
"parent card, ensuring our content stretches across the whole card."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:177
msgid ""
"Next we specify the spacing between the rows and columns within our grid, so "
"that our components don't bunch up. Kirigami provides a number of handy "
"[predefined units](docs:kirigami2;Kirigami::Units) to use for this purpose:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:179
#, fuzzy
#| msgid "Kirigami"
msgid "Kirigami Unit"
msgstr "Kirigami"

#: content/docs/getting-started/kirigami/introduction-listviews.md:179
msgid "Pixels"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:181
msgid "smallSpacing"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:181
msgid "4px"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:182
msgid "largeSpacing"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:182
msgid "8px"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:183
msgid "gridUnit"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:183
msgid "18px"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:187
msgid ""
"KDE's Visual Design Group (VDG) has a lot more information about the "
"different units defined within Plasma and Kirigami on the [Human Interface "
"Guidelines](/hig/layout/units/)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:191
msgid ""
"As you might remember, `root` is the id of our [Kirigami.ApplicationWindow]"
"(docs:kirigami2;ApplicationWindow). It provides the [wideScreen](docs:"
"kirigami2;AbstractApplicationWindow::wideScreen) property, used to determine "
"whether the current device screen is a widescreen (i.e. a computer monitor "
"or a phone in landscape). We use a ternary conditional here to vary the "
"number of columns in our grid depending on the screen we are using: if it's "
"a widescreen, the grid will have 4 columns, else it will have 2."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:193
#, fuzzy
#| msgid "Components"
msgid "Inner components"
msgstr "Komponenten"

#: content/docs/getting-started/kirigami/introduction-listviews.md:195
msgid ""
"We could just create three labels within our delegate component and call it "
"a day. But that wouldn't look particularly nice."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:234
msgid "![Screenshot showing how a Card looks like](CardDesign.png)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:236
msgid ""
"Left, [Kirigami.Heading](docs:kirigami2;Heading): uses the `ListElement`'s "
"`date` as a level 1 heading."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:238
msgid ""
"Middle, [ColumnLayout](https://doc.qt.io/qt-6/qml-qtquick-layouts-"
"columnlayout.html): has a [Kirigami.Heading](docs:kirigami2;Heading) that "
"displays the task name; a [Kirigami.Separator](docs:kirigami2;Separator), "
"which provides the horizontal line; and a [Controls.Label](docs:"
"qtquickcontrols;QtQuick.Controls.Label), that displays a task's optional "
"description. The latter two components have a [visible](https://doc.qt.io/"
"qt-6/qml-qtquick-item.html#visible-prop) property, which checks if the "
"description is empty or not and displays the components depending on the "
"result of `description.length > 0`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:240
msgid ""
"Right, [Controls.Button](docs:qtquickcontrols;QtQuick.Controls.Button): a "
"button that will do something... soon!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:246
msgid ""
"![Screenshot of the app appearance after completing this lesson](Screenshot."
"webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:248
msgid "So there is our basic card!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-listviews.md:250
msgid ""
"With these steps, we have now laid the basic groundwork for adding all the "
"functionality to our app."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:0
msgid "Next steps"
msgstr "Nächste Schritte"

#: content/docs/getting-started/kirigami/introduction-next_steps.md:0
msgid "What to do after finishing your first simple Kirigami application\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:11
msgid "What we have built"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:13
msgid ""
"Over the past few tutorials you have built a basic but functional Kirigami "
"application that lets you add, edit, and delete date countdowns. In doing so "
"we have learned about Kirigami and QtQuick components, some of how QML "
"works, basic application layouts, and more. Not bad at all!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:15
msgid ""
"You now have a grasp of the basics that make up many of KDE's most popular "
"applications. You might be asking yourself: what now?"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:17
msgid ""
"Well, don't worry: we have taken the time to provide some pointers as to "
"where you can go from here."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:19
msgid "Contributing to KDE projects"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:21
msgid ""
"One of the best ways to improve your development skills is by putting them "
"into practice. KDE's community is welcoming and always looking for more "
"passionate developers!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:23
msgid ""
"We have several pieces of documentation that can help guide you towards "
"becoming a contributor. We recommend you take a look at the developer-"
"specific section of our [Development Guide](https://community.kde.org/"
"Get_Involved/development) which can help you learn more about the KDE "
"Community's development workflow. We also recommend you take a look at our "
"documentation for KDE's GitLab instance, called [Invent](https://community."
"kde.org/Infrastructure/GitLab), as you will likely need to interact with it "
"during the development process. The KDE Community interacts mainly through "
"Matrix, and we also have [a page on the community wiki](https://community."
"kde.org/Matrix) that will guide you through setting up with your very own "
"account."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:27
msgid ""
"While interacting with others in the KDE Community, please make sure you "
"abide by the [Code of Conduct](https://kde.org/code-of-conduct/)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:31
msgid ""
"With your newfound skills you are in a good position to begin contributing "
"to Kirigami projects. Thankfully, many of KDE's most popular applications "
"and components are built with this framework. Here are a list of projects "
"you are welcome to help with."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:33
msgid "Beginner-friendly Kirigami projects"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:35
#: content/docs/getting-started/kirigami/introduction-next_steps.md:45
msgid "Project"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:35
#: content/docs/getting-started/kirigami/introduction-next_steps.md:45
msgid "What it is"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:35
#: content/docs/getting-started/kirigami/introduction-next_steps.md:45
msgid "Links"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:37
msgid ""
"<img src=\"org.kde.calindori.png\" width=\"50\" height=\"50\"><br />Calindori"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:37
msgid "A touch friendly calendar application designed for mobile devices."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:37
msgid ""
"[KDE Apps page](https://apps.kde.org/en/calindori)<br />[KDE Invent page]"
"(https://invent.kde.org/plasma-mobile/calindori)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:38
msgid "<img src=\"org.kde.koko.png\" width=\"50\" height=\"50\"><br />Koko"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:38
msgid "An image viewer designed for desktop and touch devices."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:38
msgid ""
"[Userbase page](https://userbase.kde.org/Koko)<br />[KDE Invent page]"
"(https://invent.kde.org/graphics/koko)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:39
msgid ""
"<img src=\"org.kde.kontrast.png\" width=\"50\" height=\"50\"><br />Kontrast"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:39
msgid ""
"A color contrast checker that tells you if your color combinations are "
"accessible for people with color vision deficiencies."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:39
msgid ""
"[KDE Apps page](https://apps.kde.org/en/kontrast)<br />[KDE Invent page]"
"(https://invent.kde.org/accessibility/kontrast)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:40
msgid ""
"<img src=\"org.kde.licentia.png\" width=\"50\" height=\"50\"><br />Licentia"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:40
msgid "An app to help you choose the license to go with your project."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:40
msgid ""
"[KDE Apps page](https://apps.kde.org/licentia/)<br />[KDE Invent page]"
"(https://invent.kde.org/sdk/licentia)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:41
msgid ""
"<img src=\"start-here-kde.png\" width=\"50\" height=\"50\"><br />Plasma "
"Welcome"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:41
msgid ""
"A welcome app for the Plasma desktop that lets you create new pages with QML."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:41
msgid "[KDE Invent page](https://invent.kde.org/plasma/plasma-welcome)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:43
#, fuzzy
#| msgid "Kirigami"
msgid "More complex Kirigami projects"
msgstr "Kirigami"

#: content/docs/getting-started/kirigami/introduction-next_steps.md:47
msgid ""
"<img src=\"org.kde.discover.png\" width=\"50\" height=\"50\"><br />Discover"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:47
msgid ""
"An application that helps you find and install applications, games, and "
"tools."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:47
msgid ""
"[KDE Apps page](https://apps.kde.org/en/discover)<br />[KDE Userbase page]"
"(https://userbase.kde.org/Discover)<br />[KDE Invent page](https://invent."
"kde.org/plasma/discover)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:48
msgid "<img src=\"org.kde.elisa.png\" width=\"50\" height=\"50\"><br />Elisa"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:48
msgid "A music player that strives to be simple and nice to use."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:48
msgid ""
"[Home page](https://elisa.kde.org/)<br />[KDE Apps page](https://apps.kde."
"org/en/elisa)<br />[KDE Community Wiki page](https://community.kde.org/"
"KDEConnect)<br />[KDE Invent page](https://invent.kde.org/multimedia/elisa)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:49
msgid ""
"<img src=\"org.kde.kdeconnect.png\" width=\"50\" height=\"50\"><br />KDE "
"Connect"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:49
msgid ""
"A multi-platform app that allows your devices to communicate (eg: your phone "
"and your computer)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:49
msgid ""
"[Home page](https://kdeconnect.kde.org/)<br />[KDE Community Wiki page]"
"(https://community.kde.org/KDEConnect)<br />[KDE Invent page](https://invent."
"kde.org/network/kdeconnect-kde)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:50
msgid ""
"<img src=\"org.kde.kongress.png\" width=\"50\" height=\"50\"><br />Kongress"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:50
msgid "A companion application for conference attendees."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:50
msgid "[KDE Invent page](https://invent.kde.org/utilities/kongress)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:51
msgid ""
"<img src=\"org.kde.neochat.png\" width=\"50\" height=\"50\"><br />NeoChat"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:51
msgid ""
"A client for Matrix, the decentralized communication protocol for instant "
"messaging."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:51
msgid ""
"[KDE Apps page](https://apps.kde.org/en/neochat)<br />[KDE Invent page]"
"(https://invent.kde.org/network/neochat)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:53
msgid "Learning more"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:55
msgid "Not feeling quite ready yet? That's okay too."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:57
msgid ""
"Many of the projects listed above are invaluable learning resources. You can "
"poke through the code and see how experienced developers have created fully-"
"featured applications, and use these techniques yourself."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:59
msgid ""
"If you feel you need a more gentle approach, we have also compiled some "
"resources we think you might find useful."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:61
msgid "The backend and C++"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:63
msgid ""
"While we have learned a lot about QML, we haven't really touched upon how to "
"handle backend code all that much. This is, however, an essential facet of "
"KDE application development."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:65
msgid "C++/Qt with Kirigami"
msgstr "C++/Qt mit Kirigami"

#: content/docs/getting-started/kirigami/introduction-next_steps.md:67
msgid ""
"In the advanced section of this Kirigami documentation we have some pages "
"that can help you get started:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:69
#: content/docs/getting-started/kirigami/introduction-next_steps.md:80
msgid "Topic"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:71
msgid ""
"[Understanding CMakeLists](/docs/getting-started/kirigami/advanced-"
"understanding_cmakelists)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:71
msgid "Learn all about CMake and how to compile your applications."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:72
msgid ""
"[Figuring out main.cpp](/docs/getting-started/kirigami/advanced-maincpp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:72
msgid ""
"Getting to grips with the central C++ file that handles your application's "
"initialisation."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:73
msgid ""
"[Connect logic to your QML user interface](/docs/getting-started/kirigami/"
"advanced-connect_backend)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:73
msgid ""
"Add advanced functionality to your Kirigami application and connect it to "
"your UI."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:74
msgid "[About Page](/docs/getting-started/kirigami/advanced-add_about_page)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:74
msgid "Add an \"About Page\" to your UI."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:76
msgid "Beginner C++ resources"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:78
msgid ""
"If you are completely new to C++, there are numerous resources available "
"throughout the web. Here are some that may be useful."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:80
msgid "Resource"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:82
msgid "[Wikibooks C++](https://en.wikibooks.org/wiki/C%2B%2B_Programming)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:82
msgid "A comprehensive wikibook with C++ lessons and exercises"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:83
msgid "[W3Schools C++](https://www.w3schools.com/cpp/cpp_intro.asp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:83
msgid "A set of C++ tutorials and other resources aimed at beginners"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:84
msgid "[LearnCpp](https://www.learncpp.com/)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:84
msgid "Tutorials to get to grips with C++"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:85
msgid "[cppreference](https://en.cppreference.com/w/)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:85
msgid "A reference site for C++"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:87
msgid ""
"We also provide a list of continuously updated resources to learn C++ in "
"[this wiki page](https://community.kde.org/Get_Involved/development/"
"Learn#C_and_C++)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:89
msgid "Creating classic KDE applications using QtWidgets"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:91
msgid ""
"If you'd like to work on more complex KDE applications such as Dolphin, "
"Kontact, or Kate, you will need to learn more about how to use QtWidgets, "
"which encompass a completely different way of developing user interfaces "
"with Qt. While not interchangeable with QML/Kirigami—they each have a "
"different set of tradeoffs—older and more complex KDE applications tend to "
"be built with QtWidgets."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:93
msgid ""
"QtWidgets are somewhat more daunting to work with than QML (and *much* more C"
"++ intensive!). Luckily, we have [a set of tutorials](/docs/kxmlgui) in the "
"KDE Docs that will help you become more familiar with them."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:95
msgid "More QML and QtQuick"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:97
msgid ""
"The Qt project is extensive, and so are QML and QtQuick. There is a lot of "
"functionality we haven't covered, but there is a lot of documentation we can "
"pull from to find out more."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:99
msgid ""
"If you want to look up what specific components do, look no further than "
"[Qt's official QML documentation.](https://doc.qt.io/qt-5/qtquick-index.html)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:100
msgid ""
"If you are looking for a more guided approach to learning, [the QMLBook]"
"(https://qmlbook.github.io/) is a great place to start."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:102
#, fuzzy
#| msgid "Kirigami"
msgid "More Kirigami"
msgstr "Kirigami"

#: content/docs/getting-started/kirigami/introduction-next_steps.md:104
msgid ""
"This documentation includes a lot more about Kirigami. You can poke through "
"some of the Components pages to find out more about some of the QML "
"components that Kirigami provides for you to use."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:106
msgid ""
"We recommend you also take a look at [Kirigami Gallery](https://apps.kde.org/"
"kirigami2.gallery/), an application designed by KDE developers to "
"demonstrate Kirigami's tools and capabilities. It provides both interactive "
"examples of Kirigami components as well as links to the source code of these "
"examples so you can see how they were built. You can read more about "
"Kirigami Gallery in our [specific Kirigami Gallery tutorial](/docs/getting-"
"started/kirigami/introduction-kirigami-gallery)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:108
msgid "The sky is the limit!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:110
msgid ""
"Don't be intimidated by all the material on here! No one starts off being "
"able to create something like Plasma from scratch. But KDE is no multi-"
"billion dollar company with a high barrier for entry (we have no five-round "
"coding interviews!) and as long as you are nice, you will be welcomed."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-next_steps.md:112
msgid "Good luck!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:0
msgid "Creating overlay sheets"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:0
msgid "Getting to grips with overlay sheets.\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:11
msgid "Making our app useful"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:13
msgid ""
"We have a window, we have cards, and we have actions. Yet, we still need to "
"find some way of inputting a name, description, and date of our choice."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:15
msgid ""
"One way we could do this is by creating a new page where we place the "
"required input elements. However, a whole page dedicated to providing a "
"name, description, and date seems a bit excessive."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:17
msgid "Instead, we'll be using an overlay sheet."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:19
msgid ""
"![Overlay sheet appearing in the middle of the application like a dialog "
"window](addSheet.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:21
msgid "Countdown-adding sheet"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:23
msgid ""
"The new component we add is a [Kirigami.OverlaySheet](docs:kirigami2;"
"OverlaySheet). Overlay sheets hover above the contents of the window and can "
"be used for a variety of purposes, such as providing extra information "
"relevant to the current content. They are like fancy pop-up windows, except "
"they can't be moved."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:59
msgid ""
"The parse() method parses a string and returns the number of milliseconds "
"since January 1, 1970, 00:00:00 UTC."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:73
msgid ""
"We can give overlay sheets a header. These are set with the [header](docs:"
"kirigami2;templates::OverlaySheet::header) property. We have provided ours "
"with a [Kirigami.Heading](docs:kirigami2;Heading) containing a relevant "
"title: \"Add Kountdown\"."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:75
msgid ""
"Then we come to a [Kirigami.FormLayout](docs:kirigami2;FormLayout). This "
"allows us to easily create responsive input forms, which neatly display "
"labels for inputs and the inputs themselves on both widescreen displays and "
"narrower mobile devices. These form layouts are designed to work with a "
"variety of different input types, though we're sticking to simple [Controls."
"Textfield](docs:qtquickcontrols;QtQuick.Controls.TextField) inputs that give "
"us simple text boxes to write things in."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:77
msgid "We have created Textfield elements that act as:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:79
msgid "Input for the name of our countdown"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:80
msgid "Input for the description of our countdown"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:81
msgid ""
"Input for the date we are counting down towards, which must be provided in a "
"`YYYY-MM-DD` format."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:83
msgid ""
"Within each of these [Controls.Textfield](docs:qtquickcontrols;QtQuick."
"Controls.TextField) elements, we are setting a [Kirigami.FormData.label]"
"(docs:kirigami2;FormLayoutAttached::label) property that lets us define "
"labels for them. The form will present the correct labels to the left of "
"each of these text input fields. We are also setting placeholder text inside "
"the fields with the [TextField.placeholderText](https://doc.qt.io/qt-5/qml-"
"qtquick-controls2-textfield.html#placeholderText-prop) property, which will "
"disappear as soon as the user begins typing in the field. Finally, we are "
"also setting the [onAccepted](https://doc.qt.io/qt-6/qml-qtquick-textinput."
"html#accepted-signal) property to trigger the [forceActiveFocus()](https://"
"doc.qt.io/qt-6/qml-qtquick-item.html#forceActiveFocus-method) method of the "
"following field; this will switch the active field once the user hits the "
"ENTER key, improving the usability of our form."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:85
msgid ""
"We have also set a property called [inputMask](https://doc.qt.io/qt-6/qml-"
"qtquick-textinput.html#inputMask-prop) on the text field for our date. "
"Setting this to `\"0000-00-00\"` prevents users from entering something that "
"might break the functionality of the application (such as text), restricting "
"them to only entering digits which we can then try to parse into a date "
"object."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:87
msgid ""
"At the end of our form we are including a [Button](docs:qtquickcontrols;"
"QtQuick.Controls.Button) that adds our new countdown to the list model. We "
"have set its [enabled](https://doc.qt.io/qt-5/qml-qtquick-item.html#enabled-"
"prop) property to a conditional statement that checks whether the name field "
"is empty or not: if it is, the button is disabled, and vice versa. When the "
"button is triggered, it triggers the [append](https://doc.qt.io/qt-6/qml-"
"qtqml-models-listmodel.html#append-method) method of our `kountdownModel` "
"list model, adding a JavaScript object including the properties we have "
"provided. We also make sure to clear the text fields by setting their [text]"
"(https://doc.qt.io/qt-6/qml-qtquick-textinput.html#text-prop) properties to "
"an empty string. We finally call a method on our overlay sheet, [close()]"
"(docs:kirigami2;templates::OverlaySheet::close), which closes it."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:89
msgid "Using our sheet"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:100
msgid ""
"Overlay sheets have two methods, [open()](docs:kirigami2;templates::"
"OverlaySheet::open) and [close()](docs:kirigami2;templates::OverlaySheet::"
"close), which control the opening and closing of this component. In this "
"case, we have set the sheet to be opened when we trigger our action. Once we "
"save our files and build our program, we'll be able to add our own custom "
"countdowns!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-overlaysheets.md:107
msgid ""
"![Screenshot of the application with four example cards](addedKountdowns."
"webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:0
msgid "Explaining Pages"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:0
msgid "Pages allow you to organize your application content"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:9
msgid "Our app"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:11
msgid ""
"In the previous tutorial, we managed to set up, build, and compile our first "
"Kirigami application. With the basics in place, we can begin our journey "
"towards creating a fully-featured application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:13
msgid ""
"These tutorials will focus on creating an application that lets the user see "
"how many days are left until an event of their choice. That doesn't mean you "
"shouldn't deviate and try to create your own thing! Just make sure you pay "
"close attention to how things work *first*, so that you can adjust when "
"things are different in your own code. We also recommend you check out the "
"[Kirigami Gallery](https://apps.kde.org/en/kirigami2.gallery), which "
"provides a number of useful UI examples and easy access to all the code."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:15
msgid ""
"In this section we'll be focusing on pages, one of the key structural "
"elements of any Kirigami application."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:17
msgid "Pages"
msgstr "Seiten"

#: content/docs/getting-started/kirigami/introduction-pages.md:19
msgid ""
"Kirigami apps are typically organized in [Pages](docs:kirigami2;Page). Those "
"are the different \"screens\" of an app. You will want to have a page "
"dedicated to specific aspects of your app's interaction, and to make things "
"easier you can create different QML files, one for each page."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:21
msgid ""
"Pages are organized in a [page stack](docs:qtquickcontrols;QtQuick.Controls."
"StackView) where they can be pushed and popped. On a phone only the top-most "
"page is shown, whereas on a larger screen (desktop or tablet), if desired, "
"multiple pages can be shown next to each other."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:23
msgid "![A single page on the phone](mobile.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:25
msgid "![Two pages next to each other on the desktop](desktop.webp)"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:29
msgid ""
"KDE has [Human Interface Guidelines (HIG)](/hig/introduction/architecture/) "
"that go into detail about how to best design your application. The "
"guidelines help ensure your application remains usable, consistent, and "
"aesthetic."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:31
msgid ""
"A [Kirigami.Page](docs:kirigami2;Page) inherits from a [Controls.Page](docs:"
"qtquickcontrols;QtQuick.Controls.Page), and as such you can use the latter's "
"properties as well."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:35
msgid ""
"Let's go back to the `main.qml` file we created in our previous tutorial:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:39
msgid ""
"We make our application start to our [Kirigami.Page](docs:kirigami2;Page). "
"All we have included in it is a label containing \"Hello World\", but we're "
"going to spruce things up a little."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:41
msgid ""
"The idea behind our app is that we're going to be able to display a bunch of "
"countdowns to the user. The problem with a normal [Kirigami.Page](docs:"
"kirigami2;Page) is that it has a fixed vertical size, but don't worry: "
"Kirigami also supports scrollable pages. [Kirigami.ScrollablePage](docs:"
"kirigami2;ScrollablePage) is going to be our main page now."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:45
msgid ""
"If you've gone ahead of the tutorial, you might have noticed that there is "
"also such a thing as a [ScrollView](docs:qtquickcontrols;QtQuick.Controls."
"ScrollView) that you can use to contain your components. However, do NOT put "
"a `ScrollView` inside a `ScrollablePage` as this can cause problems. "
"Children of a `ScrollablePage` are functionally already in a `ScrollView`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:51
msgid ""
"Kirigami pages also feature neat titles placed within the toolbar, quickly "
"indicating to the user which page they are on. All we need to do is to set a "
"page title using the `title` property of [Kirigami.ScrollablePage](docs:"
"kirigami2;ScrollablePage). In this case, we used one of the `i18nc()` "
"functions we explored in our previous tutorial to this end."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:55
msgid ""
"You could also choose to define your page within its own QML document. To do "
"so, you'd create the new QML file, for example \"StartPage.qml\", add it to "
"your `resources.qrc` file, and set the window's first page to load it, like "
"so:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:61
msgid ""
"`pageStack.initialPage` sets the initial Page of the application's page "
"stack, and [Qt.resolvedUrl](docs:qtqml;QtQml.Qt::resolvedUrl) converts the "
"relative URL of the QML file into an absolute one."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-pages.md:63
msgid ""
"There is further information about alternative page structures [within our "
"Kirigami documentation](/docs/getting-started/kirigami/components-"
"pagerow_pagestack)."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:0
msgid "Using separate files and signals"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:0
msgid ""
"Separating unwieldy code into different files, and attach signals to your "
"components.\n"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:11
msgid "But why?"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:13
msgid ""
"For the first time, we will be separating some of our components into their "
"own QML files. If we keep adding things to `main.qml`, it's going to quickly "
"become hard to tell what does what, and we risk muddying our code."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:15
msgid ""
"First we need to add our new files into our `resources.qrc` which we created "
"in the first part of this tutorial."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:27
msgid "Using our new files"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:29
msgid ""
"We'll need to find some way of using our new files in `main.qml`. "
"Thankfully, all we need to do is include a declaration of these components "
"in our `main.qml` like this:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:37
msgid "Extending our add sheet into an add/edit sheet"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:39
msgid ""
"While in the last tutorial we made our countdown-adding button do something, "
"the edit button on our countdown cards is still inactive. We also created an "
"adding sheet that we could now repurpose to also serve as an edit sheet... "
"but before we get to that, we need to add a couple of extra things to our "
"`main.qml`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:45
msgid ""
"The key changes we have made involve the addition of our component "
"definition `AddEditSheet` (and `KountdownDelegate` further down) and a new "
"function called `openPopulatedSheet()`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:47
msgid "Lets go through our `AddEditSheet` definition:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:65
msgid ""
"`onAdded` and `onEdited` are signal handlers. Just like `onTriggered` is "
"called when we click an action, we can use handlers that respond to our "
"custom signals."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:67
msgid "AddEditSheet.qml"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:69
msgid ""
"Looking at our new `AddEditSheet.qml`—our repurposed adding sheet—we can see "
"how these signals work:"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:73
msgid ""
"Signals invoke their handlers when they are called. In this case, we have "
"created two signals, `added` and `edited`, that we can invoke with different "
"outcomes, and to which we can attach information about the countdown we are "
"adding or creating. A neat thing about signals is that they expose the "
"variables defined in them to the functions that are listening to them, which "
"is why we can just call those variable names in our `onEdited` and `onAdded` "
"handlers in `main.qml`. Our signals are invoked by the \"Done\" button "
"depending on what the `mode` property, defined at the top of our "
"AddEditSheet, is set to."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:75
msgid ""
"The `mode` property also controls several other things: mainly what the "
"title of our sheet is set to, and what text is to be included in our "
"textfields. However, by default, our `mode` property is just set to add..."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:77
msgid ""
"Which brings us back to `main.qml` and our new `openPopulatedSheet()` "
"function. You might have noticed that this is what it is called now when the "
"countdown-adding action is triggered. This function takes in several "
"arguments which have been provided with defaults. This is helpful when we "
"simply want to add a new countdown, because we can have the concise function "
"call `openPopulatedSheet(\"add\")`. More importantly, this function sets all "
"the relevant properties in AddEditSheet."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:91
msgid ""
"`mode` changes the add/edit sheet depending on whether this argument is set "
"to `\"add\"` or to `\"edit\"`"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:92
msgid ""
"`index` is needed so that when we save our edited countdown, the correct one "
"is modified"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:93
msgid ""
"`listName`, `listDesc`, and `listDate` are the relevant countdown details "
"that need to be put in the sheet's fields"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:95
msgid ""
"Of course, to actually use our sheet for anything besides adding countdowns "
"first we need to make the edit button on our cards work. But if you look at "
"our [Kirigami.CardsListView](docs:kirigami2;CardsListView) in `main.qml`..."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:105
msgid "KountdownDelegate.qml"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:107
msgid ""
"We've replaced our [Kirigami.AbstractCard](docs:kirigami2;AbstractCard) with "
"a delegate component definition from `KountdownDelegate.qml`."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:111
msgid ""
"The [onClicked](docs:qtquickcontrols;QtQuick.Controls.AbstractButton::"
"clicked) property of the \"Edit\" button on our cards now calls the "
"`openPopulatedSheet()` function, with the card's fetched list element "
"properties set as the arguments for this function. With these, the sheet can "
"be populated with the correct text."
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:113
msgid ""
"With that, we have a fully-functional sheet where we can add and edit our "
"countdowns!"
msgstr ""

#: content/docs/getting-started/kirigami/introduction-separatefiles.md:115
msgid "![](editsheet.png)"
msgstr "![](editsheet.png)"

#: content/docs/getting-started/kirigami/style-colors.md:0
msgid "Colors and Themes in Kirigami"
msgstr "Farben und Designs in Kirigami"

#: content/docs/getting-started/kirigami/style-colors.md:0
msgid "Colors "
msgstr "Farben "

#: content/docs/getting-started/kirigami/style-colors.md:0
msgid "Make your app follow your user color scheme\n"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:12
msgid ""
"Kirigami has a color palette that follows the system colors to better "
"integrate with the platform it is running on (i.e. Plasma Desktop, Plasma "
"Mobile, GNOME, Android, etc.)."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:16
msgid ""
"All of the QML components of Kirigami and QtQuick Controls should already "
"follow this palette by default, so usually no custom coloring should be "
"needed for these controls."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:20
msgid ""
"Primitive components such as [Rectangle](docs:qtquick;QtQuick.Rectangle) "
"should always be colored with the color palette provided by Kirigami via the "
"[Kirigami.Theme](docs:kirigami2;Kirigami::PlatformTheme) attached property."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:23
msgid ""
"Hardcoded colors in QML, such as `#32b2fa` or `red`, should usually be "
"avoided; if it is really necessary to have elements with custom colors, it "
"should be an area where only custom colors are used (usually in the content "
"area of the app, and never in chrome areas such as toolbars or dialogs). For "
"instance, a hardcoded `black` foreground cannot be used over a [Kirigami."
"Theme.backgroundColor](docs:kirigami2;Kirigami::PlatformTheme::"
"backgroundColor) background, because if the platform uses a dark color "
"scheme the result will have poor contrast with black over almost black. This "
"is an accessibility issue and should be avoided."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:30
msgid ""
"If you really need to use custom colors, check out [Kontrast](https://apps."
"kde.org/kontrast/) to ensure that the colors you choose have good contrast "
"and are [WCAG compliant](https://en.wikipedia.org/wiki/"
"Web_Content_Accessibility_Guidelines)."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:34
#: content/docs/getting-started/kirigami/style-typography.md:266
msgid "Theme"
msgstr "Design"

#: content/docs/getting-started/kirigami/style-colors.md:36
msgid ""
"[Kirigami.Theme](docs:kirigami2;Kirigami::PlatformTheme) is an attached "
"property, and therefore it is available to use for any QML item. Its "
"properties include all the colors available in the palette, and what palette "
"to use, such as the [colorSet](docs:kirigami2;Kirigami::PlatformTheme::"
"colorSet) property."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:39
msgid "Example:"
msgstr "Beispiel:"

#: content/docs/getting-started/kirigami/style-colors.md:50
msgid ""
"[Kirigami Gallery](../introduction-kirigami-gallery) provides a code example "
"showcasing [all colors available for Kirigami](https://invent.kde.org/sdk/"
"kirigami-gallery/-/blob/master/src/data/contents/ui/gallery/ColorsGallery."
"qml) through [Kirigami.Theme](docs:kirigami2;Kirigami::PlatformTheme). This "
"includes all their states: if you click outside the window, the colors "
"change to their inactive state, and if you switch your system to a dark "
"theme, the dark variants of the colors should show up in real time."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:52
#, fuzzy
#| msgid "Colors and Themes in Kirigami"
msgid "The Colors component in Kirigami Gallery"
msgstr "Farben und Designs in Kirigami"

#: content/docs/getting-started/kirigami/style-colors.md:54
msgid "Color Set"
msgstr "Farbsatz"

#: content/docs/getting-started/kirigami/style-colors.md:56
msgid ""
"Depending on where a control is located, it should use a different color "
"set: for instance, when the Breeze Light color scheme is used in [Views]"
"(https://doc.qt.io/qt-6/qtquick-modelviewsdata-modelview.html), the normal "
"background is almost white, while in other regions, such as toolbars or "
"dialogs, the normal background color is gray."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:59
msgid ""
"If you define a color set for an item, all of its child items will "
"recursively inherit it automatically (unless the property [inherit](docs:"
"kirigami2;Kirigami::PlatformTheme::inherit) has explicitly been set to "
"`false`, which should always be done when the developer wants to force a "
"specific color set) so it is easy to change colors for an entire hierarchy "
"of items without touching any of the items themselves."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:64
msgid ""
"[Kirigami.Theme](docs:kirigami2;Kirigami::PlatformTheme) supports 5 "
"different color sets:"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:66
msgid ""
"View: Color set for item views, usually the lightest of all (in light color "
"themes)"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:68
msgid ""
"Window: Color set for windows and chrome areas (this is also the default "
"color set)"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:69
msgid "Button: Color set used by buttons"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:70
msgid "Selection: Color set used by selected areas"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:71
msgid "Tooltip: Color set used by tooltips"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:72
msgid ""
"Complementary: Color set meant to be complementary to Window: usually dark "
"even in light themes. May be used for emphasis in small areas of the "
"application"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:76
msgid ""
"Here is an example showcasing how color sets are inherited and can be used "
"to distinguish different components. A large border has been added to "
"contrast colors."
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:84
msgid "How color sets differ in Breeze"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:90
msgid "How color sets differ in Breeze Dark"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:96
msgid "Using Custom Colors"
msgstr "Benutzerdefinierte Farben verwenden"

#: content/docs/getting-started/kirigami/style-colors.md:98
msgid ""
"Although it's discouraged to use hardcoded colors, Kirigami offers a more "
"maintainable way to assign a custom hardcoded palette to an item and all its "
"children, which allows to define such custom colors in one place and one "
"only:"
msgstr ""

#: content/docs/getting-started/kirigami/style-colors.md:113
msgid "Example with custom colors"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:0
msgid "Typography"
msgstr "Typografie"

#: content/docs/getting-started/kirigami/style-typography.md:10
msgid "Headings"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:12
msgid ""
"Kirigami provides a [Heading](docs:kirigami2;Heading) that can be used for "
"page or section titles."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:47
msgid "Five headings with different levels for size comparison"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:53
msgid "Labels"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:55
msgid ""
"Text elements should use the [Label](docs:qtquickcontrols;QtQuick.Controls."
"Label) component from QtQuick Controls 2."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:79
msgid "Text Alignment"
msgstr "Textausrichtung"

#: content/docs/getting-started/kirigami/style-typography.md:81
msgid ""
"You can align your text elements using the [horizontalAlignment](https://doc."
"qt.io/qt-6/qml-qtquick-text.html#horizontalAlignment-prop) and "
"[verticalAlignment](https://doc.qt.io/qt-6/qml-qtquick-text."
"html#verticalAlignment-prop) properties."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:112
msgid "Heading and lorem ipsum text aligned to the horizontal center"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:148
msgid "Heading and lorem ipsum text using right-aligned text"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:186
msgid ""
"Heading with bottom vertical alignment and lorem ipsum text with top "
"vertical alignment"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:225
msgid ""
"Heading with top vertical alignment and lorem ipsum text with bottom "
"vertical alignment"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:231
msgid "Rich Text"
msgstr "Rich-Text"

#: content/docs/getting-started/kirigami/style-typography.md:233
msgid ""
"QML allows you to display (and edit) rich text. The behavior can be "
"controlled via the [textFormat](https://doc.qt.io/qt-6/qml-qtquick-text."
"html#textFormat-prop) property."
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:260
msgid ""
"A Label containing a list of fruits using HTML tags like paragraph, "
"unordered lists and bold fonts"
msgstr ""

#: content/docs/getting-started/kirigami/style-typography.md:268
msgid ""
"The font size of the [Kirigami.Theme](docs:kirigami2;Kirigami::"
"PlatformTheme) is available as `Kirigami.Theme.defaultFont.pointSize` in "
"your application."
msgstr ""

#~ msgid "![](action_tool_bar.png)"
#~ msgstr "![](action_tool_bar.png)"

#, fuzzy
#~| msgid "![A simple listview](listview-simple.png)"
#~ msgid ""
#~ "![A simple formlayout](/docs/use/kirigami/components-formlayouts/"
#~ "formlayouts-simple.png)"
#~ msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#, fuzzy
#~| msgid "List views"
#~ msgid "List headers"
#~ msgstr "Listenansichten"

#, fuzzy
#~| msgid "![A simple listview](listview-simple.png)"
#~ msgid ""
#~ "![A listview with a header](/docs/use/kirigami/components-listview/"
#~ "listview-header.png)"
#~ msgstr "![Eine einfache Listenansicht](listview-simple.png)"

#~ msgid "ConfigurationPage.qml"
#~ msgstr "ConfigurationPage.qml"

#~ msgid "HomePage.qml"
#~ msgstr "HomePage.qml"

#~ msgid "![](global_drawer.png)"
#~ msgstr "![](global_drawer.png)"

#~ msgid "![](quit_action.png)"
#~ msgstr "![](quit_action.png)"

#~ msgid "![](CardDesign.png)"
#~ msgstr "![](CardDesign.png)"

#~ msgid "![](Screenshot.png)"
#~ msgstr "![](Screenshot.png)"

#~ msgid "![](addSheet.png)"
#~ msgstr "![](addSheet.png)"

#~ msgid "![](addedKountdowns.png)"
#~ msgstr "![](addedKountdowns.png)"

#~ msgid "Text centered"
#~ msgstr "Zentrierter Text"

#~ msgid "Text right aligned"
#~ msgstr "Rechtsbündiger Text"

#~ msgid "Displaying rich text"
#~ msgstr "Anzeigen von Rich-Text"

#~ msgid "![](card1.png)"
#~ msgstr "![](card1.png)"

#~ msgid ""
#~ "| Kirigami Unit | Pixels | | ------ | ------ | | smallSpacing | 4px | | "
#~ "largeSpacing | 8px | | gridUnit | 18px |"
#~ msgstr ""
#~ "| Kirigami Unit | Pixels | | ------ | ------ | | smallSpacing | 4px | | "
#~ "largeSpacing | 8px | | gridUnit | 18px |"
